{
	"id": "dfe9045a1d7cb5487056ff7a28a0e6a5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.15",
	"solcLongVersion": "0.8.15+commit.e14f2714",
	"input": {
		"language": "Solidity",
		"sources": {
			"定息矿池-进阶.sol": {
				"content": " // SPDX-License-Identifier: MIT  \r\npragma solidity ^0.8.6;\r\n\r\nimport \"./safeMath/safemath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n\r\ncontract StakeContract {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // 利息\r\n    uint public ratio;\r\n    // 质押代币 \r\n    address public staketoken;\r\n    // 奖励代币\r\n    address public rewardtoken;\r\n    // 质押总数\r\n    uint public staketotal;\r\n    address public owner;\r\n\r\n    struct User {\r\n        // 用户质押数量\r\n        uint stakeNumber;\r\n        // 上次质押时间\r\n        uint last_Stake_Time;\r\n        // 上次累计未领取奖励代币数量\r\n        uint last_totoken_ratio;  \r\n        // 所有可领取奖励代币数量\r\n        uint whole_ratio;\r\n        // 开始收益时间\r\n        uint last_totoken_Time;\r\n    }\r\n\r\n    event Trasfer(address indexed from, address indexed to, uint amout);\r\n    event Approveal(address indexed owner, address indexed spender, uint amout);\r\n    event transfer(address indexed to, uint amout);\r\n\r\n    mapping(address => User) public User_Map;\r\n\r\n    constructor (address _staketoken ,address _totoken) {\r\n        owner = msg.sender;\r\n        require(_staketoken != address(0),\"NOT,S 0X ADDRESS\");\r\n        require(_totoken != address(0),\"NOT,S 0X ADDRESS\");\r\n        require(_staketoken == _totoken,\"NEED agreement\");\r\n        staketoken = _staketoken;\r\n        rewardtoken = _totoken;\r\n    }\r\n\r\n    // 设置年化利息\r\n    function setratio(uint _ratio) external {\r\n        ratio = _ratio;\r\n    }\r\n\r\n    // 质押方法\r\n    function deposit(uint _amount) public returns (bool) {\r\n        // 判断用户余额是否大于质押数量\r\n        require(IERC20(staketoken).balanceOf(msg.sender) > _amount, \"Balance Insufficient\");\r\n        // 用户发送代币\r\n        IERC20(staketoken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        // 计算上次累计未领取奖励代币数量\r\n        uint unClime_Reward_Token_Number = (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))\r\n        .mul((User_Map[msg.sender].stakeNumber.mul(ratio).div(100))\r\n        .div(31536000)); \r\n\r\n        emit Trasfer(msg.sender, address(this), _amount);\r\n\r\n        // 将每次的上次未领取奖励代币数量累计起来\r\n        User_Map[msg.sender].last_totoken_ratio += unClime_Reward_Token_Number;\r\n        // 每次质押需要更新用户质押数量\r\n        User_Map[msg.sender].stakeNumber += _amount;\r\n        // 每次质押将上次质押时间更新为当前时间；\r\n        User_Map[msg.sender].last_Stake_Time = block.timestamp;\r\n        // 每次用户质押将质押总数更新\r\n        staketotal += _amount;\r\n        // 将上次质押时间赋给开始计算收益时间\r\n        User_Map[msg.sender].last_totoken_Time = User_Map[msg.sender].last_Stake_Time;\r\n        return (true);\r\n    }\r\n\r\n        // 解压并收获方法\r\n        function harvestwithDraw() public returns (bool) {\r\n        // 计算出用户可领取奖励代币总数量\r\n        User_Map[msg.sender].whole_ratio = User_Map[msg.sender].last_totoken_ratio\r\n        .add((block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))\r\n        .mul(((User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000))));\r\n\r\n        // 调用合约奖励代币余额方法，赋给x，判断x要大于取出代币数量\r\n        uint x =  tokennumber();\r\n        require (x > User_Map[msg.sender].whole_ratio,\"rewardtoken Insufficient\");\r\n        // 发送计算的所有可领取代币总数量发送给用户\r\n        IERC20(rewardtoken).safeTransfer(msg.sender, User_Map[msg.sender].whole_ratio); \r\n\r\n        emit transfer(msg.sender, User_Map[msg.sender].whole_ratio);\r\n        // 发送成功后更新可领取奖励代币总数量=0\r\n        User_Map[msg.sender].whole_ratio = 0;\r\n        // 发送成功后更新上次累计未领取奖励代币数量=0\r\n        User_Map[msg.sender].last_totoken_ratio = 0;\r\n\r\n        // 调用合约奖励代币余额方法，赋给x，判断x要大于取出代币数量\r\n        require (x > User_Map[msg.sender].stakeNumber,\"rewardtoken Insufficient\");\r\n        // 再将用户的质押代币退回给用户\r\n        IERC20(staketoken).safeTransfer(msg.sender, User_Map[msg.sender].stakeNumber); \r\n        emit transfer(msg.sender, User_Map[msg.sender].stakeNumber);\r\n\r\n        // 退回用户本金后，更新总质押数量\r\n        staketotal -= User_Map[msg.sender].stakeNumber;\r\n        // 更新该用户本金 = 0\r\n        User_Map[msg.sender].stakeNumber = 0;      \r\n        return true;\r\n    }\r\n  \r\n        //收获方法 \r\n        function harvest() public returns (bool) {\r\n         // 计算出用户可领取奖励代币总数量\r\n        User_Map[msg.sender].whole_ratio = User_Map[msg.sender].last_totoken_ratio\r\n        .add((block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))\r\n        .mul(((User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000))));\r\n\r\n        uint x =  tokennumber();\r\n        require (x > User_Map[msg.sender].whole_ratio,\"rewardtoken Insufficient\");\r\n\r\n        // 发送计算的所有可领取代币总数量发送给用户\r\n        IERC20(rewardtoken).safeTransfer(msg.sender, User_Map[msg.sender].whole_ratio); \r\n        \r\n\r\n        emit transfer(msg.sender, User_Map[msg.sender].whole_ratio);\r\n        // 发送成功后更新可领取奖励代币总数量=0\r\n        User_Map[msg.sender].whole_ratio = 0; \r\n        // 发送成功后更新上次累计未领取奖励代币数量=0\r\n        User_Map[msg.sender].last_totoken_ratio = 0;\r\n        // 将当前时间赋予上次领取奖励时间，领取后查询当前奖励代币数量就清0\r\n        User_Map[msg.sender].last_totoken_Time = block.timestamp;\r\n        return true;    \r\n    }\r\n\r\n    // 查询当前奖励代币数量\r\n    function newTotokenRatio() public view returns (uint) {\r\n        // 计算上次奖励时间到现在发了多长时间奖励\r\n        uint newtime = block.timestamp - User_Map[msg.sender].last_totoken_Time;\r\n        // 计算正在产生的收益数量\r\n        uint newTotokenRatione = newtime\r\n        .mul(((User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000)))\r\n        .add(User_Map[msg.sender].last_totoken_ratio);\r\n        return newTotokenRatione;  \r\n    }\r\n\r\n    // 查询合约奖励代币余额\r\n    function tokennumber() public view returns (uint) {\r\n        uint _rewardtokennumber =  IERC20(rewardtoken).balanceOf(address(this)) ;\r\n        return _rewardtokennumber;\r\n    }\r\n\r\n}"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"safeMath/safemath.sol": {
				"content": " // SPDX-License-Identifier: MIT  \r\npragma solidity ^0.8.6;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract math {\r\n    using SafeMath for uint;\r\n\r\n    function matha(uint _a, uint _b) public view returns (uint)  {\r\n        uint c = _a.add(_b);\r\n        return c;\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xB2 0xE2 0xE2 CALLVALUE 0xE9 SWAP4 PUSH32 0x11FBD7B24B6F5ACB84E9934EE08829F0A74702ECE334AEE64736F6C63430008 0xF STOP CALLER ",
							"sourceMap": "707:3748:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:2;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xB2 0xE2 0xE2 CALLVALUE 0xE9 SWAP4 PUSH32 0x11FBD7B24B6F5ACB84E9934EE08829F0A74702ECE334AEE64736F6C63430008 0xF STOP CALLER ",
							"sourceMap": "707:3748:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"定息矿池-进阶.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6\",\"dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8305  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8305  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 DIV 0xB8 BALANCE 0xAA 0xC6 DUP10 ADDMOD DUP14 0xED DUP7 EXTCODEHASH EQ DUP6 CREATE CREATE2 RETURN 0xC6 DUP15 0xFC 0xC3 SWAP16 0xD7 PUSH21 0xC35C7D3466935D9164736F6C634300080F00330000 ",
							"sourceMap": "194:8111:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8111:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 DIV 0xB8 BALANCE 0xAA 0xC6 DUP10 ADDMOD DUP14 0xED DUP7 EXTCODEHASH EQ DUP6 CREATE CREATE2 RETURN 0xC6 DUP15 0xFC 0xC3 SWAP16 0xD7 PUSH21 0xC35C7D3466935D9164736F6C634300080F00330000 ",
							"sourceMap": "194:8111:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033",
									".code": [
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"定息矿池-进阶.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"safeMath/safemath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"safeMath/safemath.sol\":63:577  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"safeMath/safemath.sol\":63:577  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0x4C 0xCA PUSH18 0xDD0FD40E7FD306B93D7B5BB17B40D498C21B 0xD5 ADD SAR 0xBF 0xDF 0x2C SELFBALANCE 0xE9 0x5C 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "63:514:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;63:514:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0x4C 0xCA PUSH18 0xDD0FD40E7FD306B93D7B5BB17B40D498C21B 0xD5 ADD SAR 0xBF 0xDF 0x2C SELFBALANCE 0xE9 0x5C 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "63:514:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033",
									".code": [
										{
											"begin": 63,
											"end": 577,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 63,
											"end": 577,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 63,
											"end": 577,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 63,
											"end": 577,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"定息矿池-进阶.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"safeMath/safemath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"safeMath/safemath.sol\":{\"keccak256\":\"0x97fc4ad193b2a914edb17b5e2e6ca80c5afb817413db1da916fc00694960325a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6018ff050520f0291861aa0b68d6e9369a1e46e55cdd7fe95afac6eae3ff8274\",\"dweb:/ipfs/QmYaYCoStbzohrcbL4qdL4h93DJ8UTyhwJCinnKSb7KUBr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"math": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_a",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_b",
									"type": "uint256"
								}
							],
							"name": "matha",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"safeMath/safemath.sol\":583:757  contract math {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"safeMath/safemath.sol\":583:757  contract math {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x803ab3a9\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"safeMath/safemath.sol\":636:754  function matha(uint _a, uint _b) public view returns (uint)  {... */\n    tag_3:\n      tag_4\n      tag_5\n      calldatasize\n      0x04\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n        /* \"#utility.yul\":413:438   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":401:403   */\n      0x20\n        /* \"#utility.yul\":386:404   */\n      add\n        /* \"safeMath/safemath.sol\":636:754  function matha(uint _a, uint _b) public view returns (uint)  {... */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"safeMath/safemath.sol\":690:694  uint */\n      0x00\n      dup1\n        /* \"safeMath/safemath.sol\":717:727  _a.add(_b) */\n      tag_11\n        /* \"safeMath/safemath.sol\":717:719  _a */\n      dup5\n        /* \"safeMath/safemath.sol\":724:726  _b */\n      dup5\n        /* \"safeMath/safemath.sol\":717:723  _a.add */\n      tag_12\n        /* \"safeMath/safemath.sol\":717:727  _a.add(_b) */\n      jump\t// in\n    tag_11:\n        /* \"safeMath/safemath.sol\":708:727  uint c = _a.add(_b) */\n      swap2\n      pop\n      pop\n        /* \"safeMath/safemath.sol\":636:754  function matha(uint _a, uint _b) public view returns (uint)  {... */\n    tag_10:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"safeMath/safemath.sol\":87:201  function add(uint a, uint b) internal pure returns (uint c) {... */\n    tag_12:\n        /* \"safeMath/safemath.sol\":139:145  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":162:167  a + b */\n      tag_14\n        /* \"safeMath/safemath.sol\":166:167  b */\n      dup3\n        /* \"safeMath/safemath.sol\":162:163  a */\n      dup5\n        /* \"safeMath/safemath.sol\":162:167  a + b */\n      tag_15\n      jump\t// in\n    tag_14:\n        /* \"safeMath/safemath.sol\":158:167  c = a + b */\n      swap1\n      pop\n        /* \"safeMath/safemath.sol\":191:192  a */\n      dup3\n        /* \"safeMath/safemath.sol\":186:187  c */\n      dup2\n        /* \"safeMath/safemath.sol\":186:192  c >= a */\n      lt\n      iszero\n        /* \"safeMath/safemath.sol\":178:193  require(c >= a) */\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"#utility.yul\":14:262   */\n    tag_6:\n        /* \"#utility.yul\":82:88   */\n      0x00\n        /* \"#utility.yul\":90:96   */\n      dup1\n        /* \"#utility.yul\":143:145   */\n      0x40\n        /* \"#utility.yul\":131:140   */\n      dup4\n        /* \"#utility.yul\":122:129   */\n      dup6\n        /* \"#utility.yul\":118:141   */\n      sub\n        /* \"#utility.yul\":114:146   */\n      slt\n        /* \"#utility.yul\":111:163   */\n      iszero\n      tag_19\n      jumpi\n        /* \"#utility.yul\":159:160   */\n      0x00\n        /* \"#utility.yul\":156:157   */\n      dup1\n        /* \"#utility.yul\":149:161   */\n      revert\n        /* \"#utility.yul\":111:163   */\n    tag_19:\n      pop\n      pop\n        /* \"#utility.yul\":182:205   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":252:254   */\n      0x20\n        /* \"#utility.yul\":237:255   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":224:256   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":14:262   */\n      jump\t// out\n        /* \"#utility.yul\":449:674   */\n    tag_15:\n        /* \"#utility.yul\":489:492   */\n      0x00\n        /* \"#utility.yul\":520:521   */\n      dup3\n        /* \"#utility.yul\":516:522   */\n      not\n        /* \"#utility.yul\":513:514   */\n      dup3\n        /* \"#utility.yul\":510:523   */\n      gt\n        /* \"#utility.yul\":507:643   */\n      iszero\n      tag_22\n      jumpi\n        /* \"#utility.yul\":565:575   */\n      0x4e487b71\n        /* \"#utility.yul\":560:563   */\n      0xe0\n        /* \"#utility.yul\":556:576   */\n      shl\n        /* \"#utility.yul\":553:554   */\n      0x00\n        /* \"#utility.yul\":546:577   */\n      mstore\n        /* \"#utility.yul\":600:604   */\n      0x11\n        /* \"#utility.yul\":597:598   */\n      0x04\n        /* \"#utility.yul\":590:605   */\n      mstore\n        /* \"#utility.yul\":628:632   */\n      0x24\n        /* \"#utility.yul\":625:626   */\n      0x00\n        /* \"#utility.yul\":618:633   */\n      revert\n        /* \"#utility.yul\":507:643   */\n    tag_22:\n      pop\n        /* \"#utility.yul\":659:668   */\n      add\n      swap1\n        /* \"#utility.yul\":449:674   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063803ab3a914602d575b600080fd5b603c6038366004607b565b604e565b60405190815260200160405180910390f35b600080605984846063565b9150505b92915050565b6000606d8284609c565b905082811015605d57600080fd5b60008060408385031215608d57600080fd5b50508035926020909101359150565b6000821982111560bc57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF7 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x803AB3A9 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x38 CALLDATASIZE PUSH1 0x4 PUSH1 0x7B JUMP JUMPDEST PUSH1 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x59 DUP5 DUP5 PUSH1 0x63 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D DUP3 DUP5 PUSH1 0x9C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH1 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH1 0xBC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 0xD6 0x4C 0xDB 0x2A 0xBD MUL JUMPI SSTORE GT SWAP12 SWAP1 JUMPI SMOD NUMBER POP 0xBF 0xD3 CALLDATACOPY 0xF8 0xB3 0xB3 ADDMOD 0x24 PUSH10 0x59218283E4B82864736F PUSH13 0x634300080F0033000000000000 ",
							"sourceMap": "583:174:4:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@add_713": {
									"entryPoint": 99,
									"id": 713,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@matha_808": {
									"entryPoint": 78,
									"id": 808,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 123,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 156,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:676:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "101:161:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "147:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "156:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "159:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "149:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "149:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "149:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "122:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "131:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "118:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "118:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "143:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "114:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:32:6"
															},
															"nodeType": "YulIf",
															"src": "111:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "172:33:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "195:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "182:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "182:23:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "172:6:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "214:42:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "241:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "252:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "237:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "237:18:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "224:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:32:6"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "214:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "59:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "70:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "82:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "90:6:6",
														"type": ""
													}
												],
												"src": "14:248:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "368:76:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "378:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "390:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "401:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "386:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "386:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "378:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "420:9:6"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "431:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "413:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "413:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "413:25:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "337:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "348:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "359:4:6",
														"type": ""
													}
												],
												"src": "267:177:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "497:177:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "532:111:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "553:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "560:3:6",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "565:10:6",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "556:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "556:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "546:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "546:31:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "546:31:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "597:1:6",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "600:4:6",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "590:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "590:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "590:15:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "625:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "628:4:6",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "618:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "618:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "618:15:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "513:1:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "520:1:6"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "516:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "516:6:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "510:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "510:13:6"
															},
															"nodeType": "YulIf",
															"src": "507:136:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "652:16:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "663:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "666:1:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "659:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "659:9:6"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "652:3:6"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "480:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "483:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "489:3:6",
														"type": ""
													}
												],
												"src": "449:225:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063803ab3a914602d575b600080fd5b603c6038366004607b565b604e565b60405190815260200160405180910390f35b600080605984846063565b9150505b92915050565b6000606d8284609c565b905082811015605d57600080fd5b60008060408385031215608d57600080fd5b50508035926020909101359150565b6000821982111560bc57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x803AB3A9 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x38 CALLDATASIZE PUSH1 0x4 PUSH1 0x7B JUMP JUMPDEST PUSH1 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x59 DUP5 DUP5 PUSH1 0x63 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D DUP3 DUP5 PUSH1 0x9C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH1 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH1 0xBC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 0xD6 0x4C 0xDB 0x2A 0xBD MUL JUMPI SSTORE GT SWAP12 SWAP1 JUMPI SMOD NUMBER POP 0xBF 0xD3 CALLDATACOPY 0xF8 0xB3 0xB3 ADDMOD 0x24 PUSH10 0x59218283E4B82864736F PUSH13 0x634300080F0033000000000000 ",
							"sourceMap": "583:174:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;636:118;;;;;;:::i;:::-;;:::i;:::-;;;413:25:6;;;401:2;386:18;636:118:4;;;;;;;;690:4;;717:10;:2;724;717:6;:10::i;:::-;708:19;-1:-1:-1;;636:118:4;;;;;:::o;87:114::-;139:6;162:5;166:1;162;:5;:::i;:::-;158:9;;191:1;186;:6;;178:15;;;;;14:248:6;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:6;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:6:o;449:225::-;489:3;520:1;516:6;513:1;510:13;507:136;;;565:10;560:3;556:20;553:1;546:31;600:4;597:1;590:15;628:4;625:1;618:15;507:136;-1:-1:-1;659:9:6;;449:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "49400",
								"executionCost": "99",
								"totalCost": "49499"
							},
							"external": {
								"matha(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033",
									".code": [
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "803AB3A9"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 636,
											"end": 754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 636,
											"end": 754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 413,
											"end": 438,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 413,
											"end": 438,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 413,
											"end": 438,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 401,
											"end": 403,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 386,
											"end": 404,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 690,
											"end": 694,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 690,
											"end": 694,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 717,
											"end": 727,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 717,
											"end": 719,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 724,
											"end": 726,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 717,
											"end": 723,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 717,
											"end": 727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 717,
											"end": 727,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 717,
											"end": 727,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 708,
											"end": 727,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 87,
											"end": 201,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 87,
											"end": 201,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 139,
											"end": 145,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 162,
											"end": 167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 166,
											"end": 167,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 162,
											"end": 163,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 162,
											"end": 167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 162,
											"end": 167,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 162,
											"end": 167,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 162,
											"end": 167,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 158,
											"end": 167,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 158,
											"end": 167,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 191,
											"end": 192,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 186,
											"end": 187,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 186,
											"end": 192,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 186,
											"end": 192,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 178,
											"end": 193,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 178,
											"end": 193,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 14,
											"end": 262,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 14,
											"end": 262,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 82,
											"end": 88,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 90,
											"end": 96,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 143,
											"end": 145,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 131,
											"end": 140,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 122,
											"end": 129,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 118,
											"end": 141,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 114,
											"end": 146,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 111,
											"end": 163,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 111,
											"end": 163,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 111,
											"end": 163,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 159,
											"end": 160,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 156,
											"end": 157,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 149,
											"end": 161,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 111,
											"end": 163,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 111,
											"end": 163,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 182,
											"end": 205,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 182,
											"end": 205,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 182,
											"end": 205,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 252,
											"end": 254,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 237,
											"end": 255,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 237,
											"end": 255,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 237,
											"end": 255,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 224,
											"end": 256,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 224,
											"end": 256,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 262,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 449,
											"end": 674,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 449,
											"end": 674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 489,
											"end": 492,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 520,
											"end": 521,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 516,
											"end": 522,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 513,
											"end": 514,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 510,
											"end": 523,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 507,
											"end": 643,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 507,
											"end": 643,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 507,
											"end": 643,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 565,
											"end": 575,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 560,
											"end": 563,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 556,
											"end": 576,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 553,
											"end": 554,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 546,
											"end": 577,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 600,
											"end": 604,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 597,
											"end": 598,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 590,
											"end": 605,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 628,
											"end": 632,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 625,
											"end": 626,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 618,
											"end": 633,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 507,
											"end": 643,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 507,
											"end": 643,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 659,
											"end": 668,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 659,
											"end": 668,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 449,
											"end": 674,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"定息矿池-进阶.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"matha(uint256,uint256)": "803ab3a9"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"matha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"safeMath/safemath.sol\":\"math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"safeMath/safemath.sol\":{\"keccak256\":\"0x97fc4ad193b2a914edb17b5e2e6ca80c5afb817413db1da916fc00694960325a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6018ff050520f0291861aa0b68d6e9369a1e46e55cdd7fe95afac6eae3ff8274\",\"dweb:/ipfs/QmYaYCoStbzohrcbL4qdL4h93DJ8UTyhwJCinnKSb7KUBr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"定息矿池-进阶.sol": {
				"StakeContract": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_staketoken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_totoken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amout",
									"type": "uint256"
								}
							],
							"name": "Approveal",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amout",
									"type": "uint256"
								}
							],
							"name": "Trasfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amout",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "User_Map",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "stakeNumber",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "last_Stake_Time",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "last_totoken_ratio",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "whole_ratio",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "last_totoken_Time",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "harvest",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "harvestwithDraw",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "newTotokenRatio",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ratio",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardtoken",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_ratio",
									"type": "uint256"
								}
							],
							"name": "setratio",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "staketoken",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "staketotal",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokennumber",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":169:6587  contract StakeContract {... */\n  mstore(0x40, 0x80)\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1123:1465  constructor (address _staketoken ,address _totoken) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1186:1191  owner */\n  0x04\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1186:1204  owner = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1194:1204  msg.sender */\n  caller\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1186:1204  owner = msg.sender */\n  or\n  swap1\n  sstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1223:1248  _staketoken != address(0) */\n  dup3\n  and\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1215:1268  require(_staketoken != address(0),\"NOT,S 0X ADDRESS\") */\n  tag_6\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":696:698   */\n  0x20\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1215:1268  require(_staketoken != address(0),\"NOT,S 0X ADDRESS\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":678:699   */\n  mstore\n    /* \"#utility.yul\":735:737   */\n  0x10\n    /* \"#utility.yul\":715:733   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":708:738   */\n  mstore\n  shl(0x80, 0x4e4f542c532030582041444452455353)\n    /* \"#utility.yul\":754:772   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":747:793   */\n  mstore\n    /* \"#utility.yul\":810:828   */\n  0x64\n  add\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1215:1268  require(_staketoken != address(0),\"NOT,S 0X ADDRESS\") */\ntag_7:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_6:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1287:1309  _totoken != address(0) */\n  dup2\n  and\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1279:1329  require(_totoken != address(0),\"NOT,S 0X ADDRESS\") */\n  tag_9\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":696:698   */\n  0x20\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1279:1329  require(_totoken != address(0),\"NOT,S 0X ADDRESS\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":678:699   */\n  mstore\n    /* \"#utility.yul\":735:737   */\n  0x10\n    /* \"#utility.yul\":715:733   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":708:738   */\n  mstore\n  shl(0x80, 0x4e4f542c532030582041444452455353)\n    /* \"#utility.yul\":754:772   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":747:793   */\n  mstore\n    /* \"#utility.yul\":810:828   */\n  0x64\n  add\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1279:1329  require(_totoken != address(0),\"NOT,S 0X ADDRESS\") */\n  tag_7\n    /* \"#utility.yul\":494:834   */\n  jump\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1279:1329  require(_totoken != address(0),\"NOT,S 0X ADDRESS\") */\ntag_9:\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1363:1371  _totoken */\n  dup1\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1348:1371  _staketoken == _totoken */\n  and\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1348:1359  _staketoken */\n  dup3\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1348:1371  _staketoken == _totoken */\n  and\n  eq\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1340:1389  require(_staketoken == _totoken,\"NEED agreement\") */\n  tag_11\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":1041:1043   */\n  0x20\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1340:1389  require(_staketoken == _totoken,\"NEED agreement\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":1023:1044   */\n  mstore\n    /* \"#utility.yul\":1080:1082   */\n  0x0e\n    /* \"#utility.yul\":1060:1078   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":1053:1083   */\n  mstore\n  shl(0x92, 0x13915151081859dc99595b595b9d)\n    /* \"#utility.yul\":1099:1117   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":1092:1136   */\n  mstore\n    /* \"#utility.yul\":1153:1171   */\n  0x64\n  add\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1340:1389  require(_staketoken == _totoken,\"NEED agreement\") */\n  tag_7\n    /* \"#utility.yul\":839:1177   */\n  jump\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1340:1389  require(_staketoken == _totoken,\"NEED agreement\") */\ntag_11:\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1400:1410  staketoken */\n  0x01\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1400:1424  staketoken = _staketoken */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap4\n  dup5\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1435:1446  rewardtoken */\n  0x02\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1435:1457  rewardtoken = _totoken */\n  dup1\n  sload\n  swap3\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":169:6587  contract StakeContract {... */\n  jump(tag_16)\n    /* \"#utility.yul\":14:191   */\ntag_15:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  dup1\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_18:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:489   */\ntag_3:\n    /* \"#utility.yul\":275:281   */\n  0x00\n    /* \"#utility.yul\":283:289   */\n  dup1\n    /* \"#utility.yul\":336:338   */\n  0x40\n    /* \"#utility.yul\":324:333   */\n  dup4\n    /* \"#utility.yul\":315:322   */\n  dup6\n    /* \"#utility.yul\":311:334   */\n  sub\n    /* \"#utility.yul\":307:339   */\n  slt\n    /* \"#utility.yul\":304:356   */\n  iszero\n  tag_20\n  jumpi\n    /* \"#utility.yul\":352:353   */\n  0x00\n    /* \"#utility.yul\":349:350   */\n  dup1\n    /* \"#utility.yul\":342:354   */\n  revert\n    /* \"#utility.yul\":304:356   */\ntag_20:\n    /* \"#utility.yul\":375:415   */\n  tag_21\n    /* \"#utility.yul\":405:414   */\n  dup4\n    /* \"#utility.yul\":375:415   */\n  tag_15\n  jump\t// in\ntag_21:\n    /* \"#utility.yul\":365:415   */\n  swap2\n  pop\n    /* \"#utility.yul\":434:483   */\n  tag_22\n    /* \"#utility.yul\":479:481   */\n  0x20\n    /* \"#utility.yul\":468:477   */\n  dup5\n    /* \"#utility.yul\":464:482   */\n  add\n    /* \"#utility.yul\":434:483   */\n  tag_15\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":424:483   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:489   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":839:1177   */\ntag_16:\n    /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":169:6587  contract StakeContract {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":169:6587  contract StakeContract {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x9ba7d1ce\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xdab2997b\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xe8221917\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xfb5bca7a\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      dup1\n      0x1afaa6e8\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4641257d\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x529aca49\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x6dff132e\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x71ca337d\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8c93ecff\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1500:1573  function setratio(uint _ratio) external {... */\n    tag_3:\n      tag_16\n      tag_17\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_17:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1551:1556  ratio */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1551:1565  ratio = _ratio */\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1500:1573  function setratio(uint _ratio) external {... */\n      jump\n    tag_16:\n      stop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4666:5830  function harvest() public returns (bool) {... */\n    tag_4:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n        /* \"#utility.yul\":364:378   */\n      swap1\n      iszero\n        /* \"#utility.yul\":357:379   */\n      iszero\n        /* \"#utility.yul\":339:380   */\n      dup2\n      mstore\n        /* \"#utility.yul\":327:329   */\n      0x20\n        /* \"#utility.yul\":312:330   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4666:5830  function harvest() public returns (bool) {... */\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5877:6358  function newTotokenRatio() public view returns (uint) {... */\n    tag_5:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n        /* \"#utility.yul\":537:562   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":525:527   */\n      0x20\n        /* \"#utility.yul\":510:528   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5877:6358  function newTotokenRatio() public view returns (uint) {... */\n      tag_22\n        /* \"#utility.yul\":391:568   */\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":378:404  address public rewardtoken */\n    tag_6:\n      sload(0x02)\n      tag_28\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_28:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":737:769   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":719:770   */\n      dup2\n      mstore\n        /* \"#utility.yul\":707:709   */\n      0x20\n        /* \"#utility.yul\":692:710   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":378:404  address public rewardtoken */\n      tag_22\n        /* \"#utility.yul\":573:776   */\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":279:296  uint public ratio */\n    tag_7:\n      tag_24\n      sload(0x00)\n      dup2\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1074:1114  mapping(address => User) public User_Map */\n    tag_8:\n      tag_35\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      mstore(0x20, 0x05)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      dup5\n      add\n      sload\n      0x04\n      swap1\n      swap5\n      add\n      sload\n      swap3\n      swap4\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      dup6\n      jump\n    tag_35:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1331:1356   */\n      swap6\n      dup7\n      mstore\n        /* \"#utility.yul\":1387:1389   */\n      0x20\n        /* \"#utility.yul\":1372:1390   */\n      dup7\n      add\n        /* \"#utility.yul\":1365:1399   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":1415:1433   */\n      swap3\n      dup5\n      add\n        /* \"#utility.yul\":1408:1442   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":1473:1475   */\n      0x60\n        /* \"#utility.yul\":1458:1476   */\n      dup4\n      add\n        /* \"#utility.yul\":1451:1485   */\n      mstore\n        /* \"#utility.yul\":1516:1519   */\n      0x80\n        /* \"#utility.yul\":1501:1520   */\n      dup3\n      add\n        /* \"#utility.yul\":1494:1529   */\n      mstore\n        /* \"#utility.yul\":1318:1321   */\n      0xa0\n        /* \"#utility.yul\":1303:1322   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1074:1114  mapping(address => User) public User_Map */\n      tag_22\n        /* \"#utility.yul\":1072:1535   */\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":461:481  address public owner */\n    tag_9:\n      sload(0x04)\n      tag_28\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6405:6582  function tokennumber() public view returns (uint) {... */\n    tag_10:\n      tag_24\n      tag_45\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1602:2901  function deposit(uint _amount) public returns (bool) {... */\n    tag_11:\n      tag_20\n      tag_48\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_48:\n      tag_49\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":325:350  address public staketoken */\n    tag_12:\n      sload(0x01)\n      tag_28\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":432:454  uint public staketotal */\n    tag_13:\n      tag_24\n      sload(0x03)\n      dup2\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2947:4627  function harvestwithDraw() public returns (bool) {... */\n    tag_14:\n      tag_20\n      tag_58\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4666:5830  function harvest() public returns (bool) {... */\n    tag_21:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4701:4705  bool */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4979:4984  ratio */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4951:4961  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4962  User_Map[msg.sender] */\n      dup3\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4950  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4962  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4974  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:5012  User_Map[msg.sender].last_totoken_ratio... */\n      tag_62\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4866:5011  (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n      tag_63\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4941:5009  (User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000) */\n      tag_64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5000:5008  31536000 */\n      0x01e13380\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4994  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      tag_66\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4990:4993  100 */\n      0x64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4994  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      dup4\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4978  User_Map[msg.sender].stakeNumber.mul */\n      tag_67\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4985  User_Map[msg.sender].stakeNumber.mul(ratio) */\n      jump\t// in\n    tag_66:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4989  User_Map[msg.sender].stakeNumber.mul(ratio).div */\n      swap1\n      tag_68\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4942:4994  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4941:5009  (User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000) */\n    tag_64:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4896:4906  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4887:4907  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4887:4895  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4887:4907  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4887:4923  User_Map[msg.sender].last_Stake_Time */\n      0x01\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4867:4924  block.timestamp.sub(User_Map[msg.sender].last_Stake_Time) */\n      tag_69\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4867:4882  block.timestamp */\n      timestamp\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4867:4886  block.timestamp.sub */\n      tag_70\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4867:4924  block.timestamp.sub(User_Map[msg.sender].last_Stake_Time) */\n      jump\t// in\n    tag_69:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4866:4939  (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n      swap1\n      tag_67\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4866:5011  (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n      jump\t// in\n    tag_63:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4821:4831  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:4832  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:4820  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:4832  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:4851  User_Map[msg.sender].last_totoken_ratio */\n      0x02\n      add\n      sload\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:4865  User_Map[msg.sender].last_totoken_ratio... */\n      tag_71\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4812:5012  User_Map[msg.sender].last_totoken_ratio... */\n      jump\t// in\n    tag_62:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4786:4796  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4777:4797  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4777:4785  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4777:4797  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4777:4809  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4777:5012  User_Map[msg.sender].whole_ratio = User_Map[msg.sender].last_totoken_ratio... */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5035:5048  tokennumber() */\n      tag_72\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5035:5046  tokennumber */\n      tag_45\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5035:5048  tokennumber() */\n      jump\t// in\n    tag_72:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5081:5091  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5072:5092  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5072:5080  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5072:5092  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5072:5104  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5025:5048  uint x =  tokennumber() */\n      swap1\n      swap2\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5068:5104  x > User_Map[msg.sender].whole_ratio */\n      dup2\n      gt\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5059:5132  require (x > User_Map[msg.sender].whole_ratio,\"rewardtoken Insufficient\") */\n      tag_73\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_74\n      swap1\n      tag_75\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_73:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5251:5261  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5263:5283  User_Map[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5263:5271  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5263:5283  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5263:5295  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5225:5236  rewardtoken */\n      sload(0x02)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5218:5296  IERC20(rewardtoken).safeTransfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      tag_76\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5225:5236  rewardtoken */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5218:5250  IERC20(rewardtoken).safeTransfer */\n      tag_77\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5218:5296  IERC20(rewardtoken).safeTransfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      jump\t// in\n    tag_76:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5334:5344  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5346:5366  User_Map[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5346:5354  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5346:5366  User_Map[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5346:5378  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5325:5379  transfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      swap2\n      mload\n        /* \"#utility.yul\":537:562   */\n      swap2\n      dup3\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5325:5379  transfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      0xa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b\n      swap2\n        /* \"#utility.yul\":510:528   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5325:5379  transfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5465:5475  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5491:5492  0 */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5456:5476  User_Map[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5456:5464  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5456:5476  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5456:5488  User_Map[msg.sender].whole_ratio */\n      0x03\n      dup2\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5456:5492  User_Map[msg.sender].whole_ratio = 0 */\n      dup3\n      swap1\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5579:5618  User_Map[msg.sender].last_totoken_ratio */\n      0x02\n      dup2\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5579:5622  User_Map[msg.sender].last_totoken_ratio = 0 */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5781:5796  block.timestamp */\n      timestamp\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5740:5778  User_Map[msg.sender].last_totoken_Time */\n      0x04\n      swap1\n      swap2\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5740:5796  User_Map[msg.sender].last_totoken_Time = block.timestamp */\n      sstore\n      0x01\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4666:5830  function harvest() public returns (bool) {... */\n      jump\t// out\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5877:6358  function newTotokenRatio() public view returns (uint) {... */\n    tag_25:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6054:6064  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5925:5929  uint */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6045:6065  User_Map[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6045:6053  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6045:6065  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6045:6083  User_Map[msg.sender].last_totoken_Time */\n      0x04\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5925:5929  uint */\n      dup2\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6027:6083  block.timestamp - User_Map[msg.sender].last_totoken_Time */\n      tag_80\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6027:6042  block.timestamp */\n      timestamp\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6027:6083  block.timestamp - User_Map[msg.sender].last_totoken_Time */\n      tag_81\n      jump\t// in\n    tag_80:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6282:6292  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6140:6162  uint newTotokenRatione */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6273:6293  User_Map[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6273:6281  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6273:6293  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6273:6312  User_Map[msg.sender].last_totoken_ratio */\n      0x02\n      dup2\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6226:6231  ratio */\n      dup3\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6189:6221  User_Map[msg.sender].stakeNumber */\n      swap2\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6012:6083  uint newtime = block.timestamp - User_Map[msg.sender].last_totoken_Time */\n      swap4\n      swap5\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6140:6162  uint newTotokenRatione */\n      swap2\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6313  newtime... */\n      tag_82\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6273:6312  User_Map[msg.sender].last_totoken_ratio */\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6258  newtime... */\n      tag_83\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6188:6256  (User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000) */\n      tag_84\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6247:6255  31536000 */\n      0x01e13380\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6189:6241  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      tag_66\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6237:6240  100 */\n      0x64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6189:6241  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      dup4\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6189:6225  User_Map[msg.sender].stakeNumber.mul */\n      tag_67\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6189:6232  User_Map[msg.sender].stakeNumber.mul(ratio) */\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6188:6256  (User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000) */\n    tag_84:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6172  newtime */\n      dup6\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6186  newtime... */\n      tag_67\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6258  newtime... */\n      jump\t// in\n    tag_83:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6272  newtime... */\n      swap1\n      tag_71\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6165:6313  newtime... */\n      jump\t// in\n    tag_82:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6140:6313  uint newTotokenRatione = newtime... */\n      swap4\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":5877:6358  function newTotokenRatio() public view returns (uint) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6405:6582  function tokennumber() public view returns (uint) {... */\n    tag_45:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6500:6511  rewardtoken */\n      sload(0x02)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6493:6537  IERC20(rewardtoken).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6531:6535  this */\n      address\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6493:6537  IERC20(rewardtoken).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":719:770   */\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6449:6453  uint */\n      0x00\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6500:6511  rewardtoken */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6493:6522  IERC20(rewardtoken).balanceOf */\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":692:710   */\n      0x24\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6493:6537  IERC20(rewardtoken).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_90\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_90:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_91\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6466:6537  uint _rewardtokennumber =  IERC20(rewardtoken).balanceOf(address(this)) */\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":6405:6582  function tokennumber() public view returns (uint) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1602:2901  function deposit(uint _amount) public returns (bool) {... */\n    tag_49:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1736:1746  staketoken */\n      sload(0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1729:1769  IERC20(staketoken).balanceOf(msg.sender) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1758:1768  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1729:1769  IERC20(staketoken).balanceOf(msg.sender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":719:770   */\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1649:1653  bool */\n      0x00\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1772:1779  _amount */\n      dup4\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1736:1746  staketoken */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1729:1757  IERC20(staketoken).balanceOf */\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":692:710   */\n      0x24\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1729:1769  IERC20(staketoken).balanceOf(msg.sender) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_96\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_96:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_97\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_97:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1729:1779  IERC20(staketoken).balanceOf(msg.sender) > _amount */\n      gt\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1721:1804  require(IERC20(staketoken).balanceOf(msg.sender) > _amount, \"Balance Insufficient\") */\n      tag_98\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2546:2548   */\n      0x20\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1721:1804  require(IERC20(staketoken).balanceOf(msg.sender) > _amount, \"Balance Insufficient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2528:2549   */\n      mstore\n        /* \"#utility.yul\":2585:2587   */\n      0x14\n        /* \"#utility.yul\":2565:2583   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2558:2588   */\n      mstore\n      shl(0x62, 0x10985b185b98d948125b9cdd59999a58da595b9d)\n        /* \"#utility.yul\":2604:2622   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2597:2647   */\n      mstore\n        /* \"#utility.yul\":2664:2682   */\n      0x64\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1721:1804  require(IERC20(staketoken).balanceOf(msg.sender) > _amount, \"Balance Insufficient\") */\n      tag_74\n        /* \"#utility.yul\":2344:2688   */\n      jump\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1721:1804  require(IERC20(staketoken).balanceOf(msg.sender) > _amount, \"Balance Insufficient\") */\n    tag_98:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1853:1863  staketoken */\n      sload(0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1846:1917  IERC20(staketoken).safeTransferFrom(msg.sender, address(this), _amount) */\n      tag_101\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1853:1863  staketoken */\n      and\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1882:1892  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1902:1906  this */\n      address\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1909:1916  _amount */\n      dup6\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1846:1881  IERC20(staketoken).safeTransferFrom */\n      tag_102\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1846:1917  IERC20(staketoken).safeTransferFrom(msg.sender, address(this), _amount) */\n      jump\t// in\n    tag_101:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1986:2018  uint unClime_Reward_Token_Number */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2133:2138  ratio */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2105:2115  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2116  User_Map[msg.sender] */\n      dup3\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2104  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2116  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2128  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2021:2174  (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n      tag_103\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2095:2173  (User_Map[msg.sender].stakeNumber.mul(ratio).div(100))... */\n      tag_64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2164:2172  31536000 */\n      0x01e13380\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2148  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      tag_66\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2144:2147  100 */\n      0x64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2148  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      dup4\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2128  User_Map[msg.sender].stakeNumber */\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2132  User_Map[msg.sender].stakeNumber.mul */\n      tag_67\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2096:2139  User_Map[msg.sender].stakeNumber.mul(ratio) */\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2021:2174  (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n    tag_103:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2193:2236  Trasfer(msg.sender, address(this), _amount) */\n      mload(0x40)\n        /* \"#utility.yul\":537:562   */\n      dup5\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1986:2174  uint unClime_Reward_Token_Number = (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n      swap1\n      swap2\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2221:2225  this */\n      address\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2201:2211  msg.sender */\n      caller\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2193:2236  Trasfer(msg.sender, address(this), _amount) */\n      0x1fd6ebb971d137acf3f01670862b8a96758cfc7e39dccb093e68daf461b0262c\n      swap1\n        /* \"#utility.yul\":525:527   */\n      0x20\n        /* \"#utility.yul\":510:528   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2193:2236  Trasfer(msg.sender, address(this), _amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2328:2338  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2339  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2327  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2339  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2358  User_Map[msg.sender].last_totoken_ratio */\n      0x02\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2389  User_Map[msg.sender].last_totoken_ratio += unClime_Reward_Token_Number */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2362:2389  unClime_Reward_Token_Number */\n      dup4\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2339  User_Map[msg.sender] */\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2389  User_Map[msg.sender].last_totoken_ratio += unClime_Reward_Token_Number */\n      tag_109\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2362:2389  unClime_Reward_Token_Number */\n      dup5\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2319:2389  User_Map[msg.sender].last_totoken_ratio += unClime_Reward_Token_Number */\n      tag_110\n      jump\t// in\n    tag_109:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2464:2474  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2475  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2463  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2475  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2498  User_Map[msg.sender].stakeNumber += _amount */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2491:2498  _amount */\n      dup6\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2475  User_Map[msg.sender] */\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2498  User_Map[msg.sender].stakeNumber += _amount */\n      tag_111\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2491:2498  _amount */\n      dup5\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2455:2498  User_Map[msg.sender].stakeNumber += _amount */\n      tag_110\n      jump\t// in\n    tag_111:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2588:2598  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2579:2599  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2579:2587  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2579:2599  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2618:2633  block.timestamp */\n      timestamp\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2579:2615  User_Map[msg.sender].last_Stake_Time */\n      0x01\n      swap1\n      swap2\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2579:2633  User_Map[msg.sender].last_Stake_Time = block.timestamp */\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2696:2706  staketotal */\n      0x03\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2696:2717  staketotal += _amount */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2710:2717  _amount */\n      dup6\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2579:2599  User_Map[msg.sender] */\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2696:2717  staketotal += _amount */\n      tag_112\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2710:2717  _amount */\n      dup5\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2696:2717  staketotal += _amount */\n      tag_110\n      jump\t// in\n    tag_112:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2842:2852  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2833:2853  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2833:2841  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2833:2853  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2833:2869  User_Map[msg.sender].last_Stake_Time */\n      0x01\n      dup1\n      dup3\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2792:2830  User_Map[msg.sender].last_totoken_Time */\n      0x04\n      swap1\n      swap3\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2792:2869  User_Map[msg.sender].last_totoken_Time = User_Map[msg.sender].last_Stake_Time */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2833:2869  User_Map[msg.sender].last_Stake_Time */\n      swap4\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":1602:2901  function deposit(uint _amount) public returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2947:4627  function harvestwithDraw() public returns (bool) {... */\n    tag_58:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2990:2994  bool */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3267:3272  ratio */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3239:3249  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3250  User_Map[msg.sender] */\n      dup3\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3238  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3250  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3262  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3100:3300  User_Map[msg.sender].last_totoken_ratio... */\n      tag_114\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3154:3299  (block.timestamp.sub(User_Map[msg.sender].last_Stake_Time))... */\n      tag_63\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3229:3297  (User_Map[msg.sender].stakeNumber.mul(ratio).div(100)).div(31536000) */\n      tag_64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3288:3296  31536000 */\n      0x01e13380\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3282  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      tag_66\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3278:3281  100 */\n      0x64\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3282  User_Map[msg.sender].stakeNumber.mul(ratio).div(100) */\n      dup4\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3266  User_Map[msg.sender].stakeNumber.mul */\n      tag_67\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3230:3273  User_Map[msg.sender].stakeNumber.mul(ratio) */\n      jump\t// in\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3100:3300  User_Map[msg.sender].last_totoken_ratio... */\n    tag_114:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3074:3084  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3065:3085  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3065:3073  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3065:3085  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3065:3097  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3065:3300  User_Map[msg.sender].whole_ratio = User_Map[msg.sender].last_totoken_ratio... */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3419:3432  tokennumber() */\n      tag_120\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3419:3430  tokennumber */\n      tag_45\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3419:3432  tokennumber() */\n      jump\t// in\n    tag_120:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3465:3475  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3456:3476  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3456:3464  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3456:3476  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3456:3488  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3409:3432  uint x =  tokennumber() */\n      swap1\n      swap2\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3452:3488  x > User_Map[msg.sender].whole_ratio */\n      dup2\n      gt\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3443:3516  require (x > User_Map[msg.sender].whole_ratio,\"rewardtoken Insufficient\") */\n      tag_121\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_74\n      swap1\n      tag_75\n      jump\t// in\n    tag_121:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3633:3643  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3645:3665  User_Map[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3645:3653  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3645:3665  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3645:3677  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3607:3618  rewardtoken */\n      sload(0x02)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3600:3678  IERC20(rewardtoken).safeTransfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      tag_123\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3607:3618  rewardtoken */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3600:3632  IERC20(rewardtoken).safeTransfer */\n      tag_77\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3600:3678  IERC20(rewardtoken).safeTransfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      jump\t// in\n    tag_123:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3706:3716  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3718:3738  User_Map[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3718:3726  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3718:3738  User_Map[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3718:3750  User_Map[msg.sender].whole_ratio */\n      0x03\n      add\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3697:3751  transfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      swap2\n      mload\n        /* \"#utility.yul\":537:562   */\n      swap2\n      dup3\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3697:3751  transfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      0xa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b\n      swap2\n        /* \"#utility.yul\":510:528   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3697:3751  transfer(msg.sender, User_Map[msg.sender].whole_ratio) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3837:3847  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3863:3864  0 */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3828:3848  User_Map[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3828:3836  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3828:3848  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3828:3860  User_Map[msg.sender].whole_ratio */\n      0x03\n      dup2\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3828:3864  User_Map[msg.sender].whole_ratio = 0 */\n      dup3\n      swap1\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3950:3989  User_Map[msg.sender].last_totoken_ratio */\n      0x02\n      dup2\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":3950:3993  User_Map[msg.sender].last_totoken_ratio = 0 */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4115:4147  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4111:4147  x > User_Map[msg.sender].stakeNumber */\n      dup2\n      gt\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4102:4175  require (x > User_Map[msg.sender].stakeNumber,\"rewardtoken Insufficient\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_74\n      swap1\n      tag_75\n      jump\t// in\n    tag_125:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4273:4283  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4285:4305  User_Map[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4285:4293  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4285:4305  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4285:4317  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4248:4258  staketoken */\n      sload(0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4241:4318  IERC20(staketoken).safeTransfer(msg.sender, User_Map[msg.sender].stakeNumber) */\n      tag_127\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4248:4258  staketoken */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4241:4272  IERC20(staketoken).safeTransfer */\n      tag_77\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4241:4318  IERC20(staketoken).safeTransfer(msg.sender, User_Map[msg.sender].stakeNumber) */\n      jump\t// in\n    tag_127:\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4344:4354  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4356:4376  User_Map[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4356:4364  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4356:4376  User_Map[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4356:4388  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4335:4389  transfer(msg.sender, User_Map[msg.sender].stakeNumber) */\n      swap2\n      mload\n        /* \"#utility.yul\":537:562   */\n      swap2\n      dup3\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4335:4389  transfer(msg.sender, User_Map[msg.sender].stakeNumber) */\n      0xa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b\n      swap2\n        /* \"#utility.yul\":510:528   */\n      add\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4335:4389  transfer(msg.sender, User_Map[msg.sender].stakeNumber) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4483:4493  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4474:4494  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4474:4482  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4474:4494  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4474:4506  User_Map[msg.sender].stakeNumber */\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4460:4470  staketotal */\n      0x03\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4460:4506  staketotal -= User_Map[msg.sender].stakeNumber */\n      dup1\n      sload\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4474:4506  User_Map[msg.sender].stakeNumber */\n      swap2\n      swap3\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4460:4470  staketotal */\n      swap1\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4460:4506  staketotal -= User_Map[msg.sender].stakeNumber */\n      tag_129\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4474:4506  User_Map[msg.sender].stakeNumber */\n      dup5\n      swap1\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4460:4506  staketotal -= User_Map[msg.sender].stakeNumber */\n      tag_81\n      jump\t// in\n    tag_129:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4564:4574  msg.sender */\n      caller\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4590:4591  0 */\n      0x00\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4555:4575  User_Map[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4555:4563  User_Map */\n      0x05\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4555:4575  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4555:4591  User_Map[msg.sender].stakeNumber = 0 */\n      sstore\n      pop\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":4615:4619  true */\n      0x01\n      swap2\n        /* \"\\xe5\\xae\\x9a\\xe6\\x81\\xaf\\xe7\\x9f\\xbf\\xe6\\xb1\\xa0-\\xe8\\xbf\\x9b\\xe9\\x98\\xb6.sol\":2947:4627  function harvestwithDraw() public returns (bool) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"safeMath/safemath.sol\":327:455  function mul(uint a, uint b) internal pure returns (uint c) {... */\n    tag_67:\n        /* \"safeMath/safemath.sol\":379:385  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":402:407  a * b */\n      tag_131\n        /* \"safeMath/safemath.sol\":406:407  b */\n      dup3\n        /* \"safeMath/safemath.sol\":402:403  a */\n      dup5\n        /* \"safeMath/safemath.sol\":402:407  a * b */\n      tag_132\n      jump\t// in\n    tag_131:\n        /* \"safeMath/safemath.sol\":398:407  c = a * b */\n      swap1\n      pop\n        /* \"safeMath/safemath.sol\":426:432  a == 0 */\n      dup3\n      iszero\n      dup1\n        /* \"safeMath/safemath.sol\":426:446  a == 0 || c / a == b */\n      tag_133\n      jumpi\n      pop\n        /* \"safeMath/safemath.sol\":445:446  b */\n      dup2\n        /* \"safeMath/safemath.sol\":436:441  c / a */\n      tag_134\n        /* \"safeMath/safemath.sol\":440:441  a */\n      dup5\n        /* \"safeMath/safemath.sol\":436:437  c */\n      dup4\n        /* \"safeMath/safemath.sol\":436:441  c / a */\n      tag_135\n      jump\t// in\n    tag_134:\n        /* \"safeMath/safemath.sol\":436:446  c / a == b */\n      eq\n        /* \"safeMath/safemath.sol\":426:446  a == 0 || c / a == b */\n    tag_133:\n        /* \"safeMath/safemath.sol\":418:447  require(a == 0 || c / a == b) */\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"safeMath/safemath.sol\":461:574  function div(uint a, uint b) internal pure returns (uint c) {... */\n    tag_68:\n        /* \"safeMath/safemath.sol\":513:519  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":544:545  0 */\n      dup1\n        /* \"safeMath/safemath.sol\":540:541  b */\n      dup3\n        /* \"safeMath/safemath.sol\":540:545  b > 0 */\n      gt\n        /* \"safeMath/safemath.sol\":532:546  require(b > 0) */\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n        /* \"safeMath/safemath.sol\":561:566  a / b */\n      tag_82\n        /* \"safeMath/safemath.sol\":565:566  b */\n      dup3\n        /* \"safeMath/safemath.sol\":561:562  a */\n      dup5\n        /* \"safeMath/safemath.sol\":561:566  a / b */\n      tag_135\n      jump\t// in\n        /* \"safeMath/safemath.sol\":207:321  function sub(uint a, uint b) internal pure returns (uint c) {... */\n    tag_70:\n        /* \"safeMath/safemath.sol\":259:265  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":291:292  a */\n      dup3\n        /* \"safeMath/safemath.sol\":286:287  b */\n      dup3\n        /* \"safeMath/safemath.sol\":286:292  b <= a */\n      gt\n      iszero\n        /* \"safeMath/safemath.sol\":278:293  require(b <= a) */\n      tag_141\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_141:\n        /* \"safeMath/safemath.sol\":308:313  a - b */\n      tag_82\n        /* \"safeMath/safemath.sol\":312:313  b */\n      dup3\n        /* \"safeMath/safemath.sol\":308:309  a */\n      dup5\n        /* \"safeMath/safemath.sol\":308:313  a - b */\n      tag_81\n      jump\t// in\n        /* \"safeMath/safemath.sol\":87:201  function add(uint a, uint b) internal pure returns (uint c) {... */\n    tag_71:\n        /* \"safeMath/safemath.sol\":139:145  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":162:167  a + b */\n      tag_144\n        /* \"safeMath/safemath.sol\":166:167  b */\n      dup3\n        /* \"safeMath/safemath.sol\":162:163  a */\n      dup5\n        /* \"safeMath/safemath.sol\":162:167  a + b */\n      tag_110\n      jump\t// in\n    tag_144:\n        /* \"safeMath/safemath.sol\":158:167  c = a + b */\n      swap1\n      pop\n        /* \"safeMath/safemath.sol\":191:192  a */\n      dup3\n        /* \"safeMath/safemath.sol\":186:187  c */\n      dup2\n        /* \"safeMath/safemath.sol\":186:192  c >= a */\n      lt\n      iszero\n        /* \"safeMath/safemath.sol\":178:193  require(c >= a) */\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_77:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3413:3445   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3395:3446   */\n      mstore\n        /* \"#utility.yul\":3462:3480   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":3455:3489   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_147\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":3368:3386   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n    tag_148:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:894  _callOptionalReturn */\n      tag_150\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_147:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_102:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3758:3773   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":3740:3774   */\n      mstore\n        /* \"#utility.yul\":3810:3825   */\n      dup4\n      and\n        /* \"#utility.yul\":3790:3808   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3783:3826   */\n      mstore\n        /* \"#utility.yul\":3842:3860   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":3835:3869   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_152\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":3675:3693   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      tag_148\n        /* \"#utility.yul\":3500:3875   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n    tag_152:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_150:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_157\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_156:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_147\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_159\n      swap2\n      swap1\n      tag_160\n      jump\t// in\n    tag_159:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_147\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4364:4366   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4346:4367   */\n      mstore\n        /* \"#utility.yul\":4403:4405   */\n      0x2a\n        /* \"#utility.yul\":4383:4401   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4376:4406   */\n      mstore\n        /* \"#utility.yul\":4442:4476   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":4422:4440   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4415:4477   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":4493:4511   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4486:4526   */\n      mstore\n        /* \"#utility.yul\":4543:4562   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_74\n        /* \"#utility.yul\":4162:4568   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_165\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_166\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_166:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4775:4777   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4757:4778   */\n      mstore\n        /* \"#utility.yul\":4814:4816   */\n      0x26\n        /* \"#utility.yul\":4794:4812   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4787:4817   */\n      mstore\n        /* \"#utility.yul\":4853:4887   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":4833:4851   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4826:4888   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":4904:4922   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4897:4933   */\n      mstore\n        /* \"#utility.yul\":4950:4969   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_74\n        /* \"#utility.yul\":4573:4975   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_168:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_173\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5182:5184   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5164:5185   */\n      mstore\n        /* \"#utility.yul\":5221:5223   */\n      0x1d\n        /* \"#utility.yul\":5201:5219   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5194:5224   */\n      mstore\n        /* \"#utility.yul\":5260:5291   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":5240:5258   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5233:5292   */\n      mstore\n        /* \"#utility.yul\":5309:5327   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_74\n        /* \"#utility.yul\":4980:5333   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n    tag_173:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_176\n      swap2\n      swap1\n      tag_177\n      jump\t// in\n    tag_176:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_180\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_179)\n    tag_180:\n      0x60\n      swap2\n      pop\n    tag_179:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_181\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_182\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_181:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8303  function verifyCallResult(... */\n    tag_182:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8297  if (success) {... */\n      iszero\n      tag_185\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      jump(tag_82)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8297  if (success) {... */\n    tag_185:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8287  if (returndata.length > 0) {... */\n      tag_187\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8120:8130  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8114:8131  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8180:8195  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8167:8177  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8163:8165  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8159:8178  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8152:8196  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8287  if (returndata.length > 0) {... */\n    tag_187:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8259:8271  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8252:8272  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_74\n      swap2\n      swap1\n      tag_190\n      jump\t// in\n        /* \"#utility.yul\":14:194   */\n    tag_18:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_195\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_195:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":781:1067   */\n    tag_37:\n        /* \"#utility.yul\":840:846   */\n      0x00\n        /* \"#utility.yul\":893:895   */\n      0x20\n        /* \"#utility.yul\":881:890   */\n      dup3\n        /* \"#utility.yul\":872:879   */\n      dup5\n        /* \"#utility.yul\":868:891   */\n      sub\n        /* \"#utility.yul\":864:896   */\n      slt\n        /* \"#utility.yul\":861:913   */\n      iszero\n      tag_200\n      jumpi\n        /* \"#utility.yul\":909:910   */\n      0x00\n        /* \"#utility.yul\":906:907   */\n      dup1\n        /* \"#utility.yul\":899:911   */\n      revert\n        /* \"#utility.yul\":861:913   */\n    tag_200:\n        /* \"#utility.yul\":935:958   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":987:1018   */\n      dup2\n      and\n        /* \"#utility.yul\":977:1019   */\n      dup2\n      eq\n        /* \"#utility.yul\":967:1037   */\n      tag_82\n      jumpi\n        /* \"#utility.yul\":1033:1034   */\n      0x00\n        /* \"#utility.yul\":1030:1031   */\n      dup1\n        /* \"#utility.yul\":1023:1035   */\n      revert\n        /* \"#utility.yul\":1540:1888   */\n    tag_75:\n        /* \"#utility.yul\":1742:1744   */\n      0x20\n        /* \"#utility.yul\":1724:1745   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":1781:1783   */\n      0x18\n        /* \"#utility.yul\":1761:1779   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":1754:1784   */\n      mstore\n        /* \"#utility.yul\":1820:1846   */\n      0x726577617264746f6b656e20496e73756666696369656e740000000000000000\n        /* \"#utility.yul\":1815:1817   */\n      0x40\n        /* \"#utility.yul\":1800:1818   */\n      dup3\n      add\n        /* \"#utility.yul\":1793:1847   */\n      mstore\n        /* \"#utility.yul\":1879:1881   */\n      0x60\n        /* \"#utility.yul\":1864:1882   */\n      add\n      swap1\n        /* \"#utility.yul\":1540:1888   */\n      jump\t// out\n        /* \"#utility.yul\":1893:2020   */\n    tag_191:\n        /* \"#utility.yul\":1954:1964   */\n      0x4e487b71\n        /* \"#utility.yul\":1949:1952   */\n      0xe0\n        /* \"#utility.yul\":1945:1965   */\n      shl\n        /* \"#utility.yul\":1942:1943   */\n      0x00\n        /* \"#utility.yul\":1935:1966   */\n      mstore\n        /* \"#utility.yul\":1985:1989   */\n      0x11\n        /* \"#utility.yul\":1982:1983   */\n      0x04\n        /* \"#utility.yul\":1975:1990   */\n      mstore\n        /* \"#utility.yul\":2009:2013   */\n      0x24\n        /* \"#utility.yul\":2006:2007   */\n      0x00\n        /* \"#utility.yul\":1999:2014   */\n      revert\n        /* \"#utility.yul\":2025:2150   */\n    tag_81:\n        /* \"#utility.yul\":2065:2069   */\n      0x00\n        /* \"#utility.yul\":2093:2094   */\n      dup3\n        /* \"#utility.yul\":2090:2091   */\n      dup3\n        /* \"#utility.yul\":2087:2095   */\n      lt\n        /* \"#utility.yul\":2084:2118   */\n      iszero\n      tag_207\n      jumpi\n        /* \"#utility.yul\":2098:2116   */\n      tag_207\n      tag_191\n      jump\t// in\n    tag_207:\n      pop\n        /* \"#utility.yul\":2135:2144   */\n      sub\n      swap1\n        /* \"#utility.yul\":2025:2150   */\n      jump\t// out\n        /* \"#utility.yul\":2155:2339   */\n    tag_92:\n        /* \"#utility.yul\":2225:2231   */\n      0x00\n        /* \"#utility.yul\":2278:2280   */\n      0x20\n        /* \"#utility.yul\":2266:2275   */\n      dup3\n        /* \"#utility.yul\":2257:2264   */\n      dup5\n        /* \"#utility.yul\":2253:2276   */\n      sub\n        /* \"#utility.yul\":2249:2281   */\n      slt\n        /* \"#utility.yul\":2246:2298   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":2294:2295   */\n      0x00\n        /* \"#utility.yul\":2291:2292   */\n      dup1\n        /* \"#utility.yul\":2284:2296   */\n      revert\n        /* \"#utility.yul\":2246:2298   */\n    tag_209:\n      pop\n        /* \"#utility.yul\":2317:2333   */\n      mload\n      swap2\n        /* \"#utility.yul\":2155:2339   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2693:2821   */\n    tag_110:\n        /* \"#utility.yul\":2733:2736   */\n      0x00\n        /* \"#utility.yul\":2764:2765   */\n      dup3\n        /* \"#utility.yul\":2760:2766   */\n      not\n        /* \"#utility.yul\":2757:2758   */\n      dup3\n        /* \"#utility.yul\":2754:2767   */\n      gt\n        /* \"#utility.yul\":2751:2790   */\n      iszero\n      tag_213\n      jumpi\n        /* \"#utility.yul\":2770:2788   */\n      tag_213\n      tag_191\n      jump\t// in\n    tag_213:\n      pop\n        /* \"#utility.yul\":2806:2815   */\n      add\n      swap1\n        /* \"#utility.yul\":2693:2821   */\n      jump\t// out\n        /* \"#utility.yul\":2826:2994   */\n    tag_132:\n        /* \"#utility.yul\":2866:2873   */\n      0x00\n        /* \"#utility.yul\":2932:2933   */\n      dup2\n        /* \"#utility.yul\":2928:2929   */\n      0x00\n        /* \"#utility.yul\":2924:2930   */\n      not\n        /* \"#utility.yul\":2920:2934   */\n      div\n        /* \"#utility.yul\":2917:2918   */\n      dup4\n        /* \"#utility.yul\":2914:2935   */\n      gt\n        /* \"#utility.yul\":2909:2910   */\n      dup3\n        /* \"#utility.yul\":2902:2911   */\n      iszero\n        /* \"#utility.yul\":2895:2912   */\n      iszero\n        /* \"#utility.yul\":2891:2936   */\n      and\n        /* \"#utility.yul\":2888:2959   */\n      iszero\n      tag_216\n      jumpi\n        /* \"#utility.yul\":2939:2957   */\n      tag_216\n      tag_191\n      jump\t// in\n    tag_216:\n      pop\n        /* \"#utility.yul\":2979:2988   */\n      mul\n      swap1\n        /* \"#utility.yul\":2826:2994   */\n      jump\t// out\n        /* \"#utility.yul\":2999:3216   */\n    tag_135:\n        /* \"#utility.yul\":3039:3040   */\n      0x00\n        /* \"#utility.yul\":3065:3066   */\n      dup3\n        /* \"#utility.yul\":3055:3187   */\n      tag_218\n      jumpi\n        /* \"#utility.yul\":3109:3119   */\n      0x4e487b71\n        /* \"#utility.yul\":3104:3107   */\n      0xe0\n        /* \"#utility.yul\":3100:3120   */\n      shl\n        /* \"#utility.yul\":3097:3098   */\n      0x00\n        /* \"#utility.yul\":3090:3121   */\n      mstore\n        /* \"#utility.yul\":3144:3148   */\n      0x12\n        /* \"#utility.yul\":3141:3142   */\n      0x04\n        /* \"#utility.yul\":3134:3149   */\n      mstore\n        /* \"#utility.yul\":3172:3176   */\n      0x24\n        /* \"#utility.yul\":3169:3170   */\n      0x00\n        /* \"#utility.yul\":3162:3177   */\n      revert\n        /* \"#utility.yul\":3055:3187   */\n    tag_218:\n      pop\n        /* \"#utility.yul\":3201:3210   */\n      div\n      swap1\n        /* \"#utility.yul\":2999:3216   */\n      jump\t// out\n        /* \"#utility.yul\":3880:4157   */\n    tag_160:\n        /* \"#utility.yul\":3947:3953   */\n      0x00\n        /* \"#utility.yul\":4000:4002   */\n      0x20\n        /* \"#utility.yul\":3988:3997   */\n      dup3\n        /* \"#utility.yul\":3979:3986   */\n      dup5\n        /* \"#utility.yul\":3975:3998   */\n      sub\n        /* \"#utility.yul\":3971:4003   */\n      slt\n        /* \"#utility.yul\":3968:4020   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":4016:4017   */\n      0x00\n        /* \"#utility.yul\":4013:4014   */\n      dup1\n        /* \"#utility.yul\":4006:4018   */\n      revert\n        /* \"#utility.yul\":3968:4020   */\n    tag_222:\n        /* \"#utility.yul\":4048:4057   */\n      dup2\n        /* \"#utility.yul\":4042:4058   */\n      mload\n        /* \"#utility.yul\":4101:4106   */\n      dup1\n        /* \"#utility.yul\":4094:4107   */\n      iszero\n        /* \"#utility.yul\":4087:4108   */\n      iszero\n        /* \"#utility.yul\":4080:4085   */\n      dup2\n        /* \"#utility.yul\":4077:4109   */\n      eq\n        /* \"#utility.yul\":4067:4127   */\n      tag_82\n      jumpi\n        /* \"#utility.yul\":4123:4124   */\n      0x00\n        /* \"#utility.yul\":4120:4121   */\n      dup1\n        /* \"#utility.yul\":4113:4125   */\n      revert\n        /* \"#utility.yul\":5338:5596   */\n    tag_192:\n        /* \"#utility.yul\":5410:5411   */\n      0x00\n        /* \"#utility.yul\":5420:5533   */\n    tag_228:\n        /* \"#utility.yul\":5434:5440   */\n      dup4\n        /* \"#utility.yul\":5431:5432   */\n      dup2\n        /* \"#utility.yul\":5428:5441   */\n      lt\n        /* \"#utility.yul\":5420:5533   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":5510:5521   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":5504:5522   */\n      mload\n        /* \"#utility.yul\":5491:5502   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":5484:5523   */\n      mstore\n        /* \"#utility.yul\":5456:5458   */\n      0x20\n        /* \"#utility.yul\":5449:5459   */\n      add\n        /* \"#utility.yul\":5420:5533   */\n      jump(tag_228)\n    tag_230:\n        /* \"#utility.yul\":5551:5557   */\n      dup4\n        /* \"#utility.yul\":5548:5549   */\n      dup2\n        /* \"#utility.yul\":5545:5558   */\n      gt\n        /* \"#utility.yul\":5542:5590   */\n      iszero\n      tag_152\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":5586:5587   */\n      0x00\n        /* \"#utility.yul\":5568:5584   */\n      swap2\n      add\n        /* \"#utility.yul\":5561:5588   */\n      mstore\n        /* \"#utility.yul\":5338:5596   */\n      jump\t// out\n        /* \"#utility.yul\":5601:5875   */\n    tag_177:\n        /* \"#utility.yul\":5730:5733   */\n      0x00\n        /* \"#utility.yul\":5768:5774   */\n      dup3\n        /* \"#utility.yul\":5762:5775   */\n      mload\n        /* \"#utility.yul\":5784:5837   */\n      tag_233\n        /* \"#utility.yul\":5830:5836   */\n      dup2\n        /* \"#utility.yul\":5825:5828   */\n      dup5\n        /* \"#utility.yul\":5818:5822   */\n      0x20\n        /* \"#utility.yul\":5810:5816   */\n      dup8\n        /* \"#utility.yul\":5806:5823   */\n      add\n        /* \"#utility.yul\":5784:5837   */\n      tag_192\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":5853:5869   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":5601:5875   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5880:6263   */\n    tag_190:\n        /* \"#utility.yul\":6029:6031   */\n      0x20\n        /* \"#utility.yul\":6018:6027   */\n      dup2\n        /* \"#utility.yul\":6011:6032   */\n      mstore\n        /* \"#utility.yul\":5992:5996   */\n      0x00\n        /* \"#utility.yul\":6061:6067   */\n      dup3\n        /* \"#utility.yul\":6055:6068   */\n      mload\n        /* \"#utility.yul\":6104:6110   */\n      dup1\n        /* \"#utility.yul\":6099:6101   */\n      0x20\n        /* \"#utility.yul\":6088:6097   */\n      dup5\n        /* \"#utility.yul\":6084:6102   */\n      add\n        /* \"#utility.yul\":6077:6111   */\n      mstore\n        /* \"#utility.yul\":6120:6186   */\n      tag_235\n        /* \"#utility.yul\":6179:6185   */\n      dup2\n        /* \"#utility.yul\":6174:6176   */\n      0x40\n        /* \"#utility.yul\":6163:6172   */\n      dup6\n        /* \"#utility.yul\":6159:6177   */\n      add\n        /* \"#utility.yul\":6154:6156   */\n      0x20\n        /* \"#utility.yul\":6146:6152   */\n      dup8\n        /* \"#utility.yul\":6142:6157   */\n      add\n        /* \"#utility.yul\":6120:6186   */\n      tag_192\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":6247:6249   */\n      0x1f\n        /* \"#utility.yul\":6226:6241   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":6222:6251   */\n      and\n        /* \"#utility.yul\":6207:6252   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":6254:6256   */\n      0x40\n        /* \"#utility.yul\":6203:6257   */\n      add\n      swap3\n        /* \"#utility.yul\":5880:6263   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220e2cebf1404ea16169806b95b68b29b27734aba7e0c3a40ef9357f8c6af499f6664736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_916": {
									"entryPoint": null,
									"id": 916,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 347,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 375,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_stringliteral_c53404d4246b0640c5d546a4b55fb182a6f0c9ba5aa404eb9d02e6863598390c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1179:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "74:117:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "84:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "93:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "169:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "178:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "181:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "154:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "159:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:6"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "163:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "118:50:6"
															},
															"nodeType": "YulIf",
															"src": "115:70:6"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "53:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:6",
														"type": ""
													}
												],
												"src": "14:177:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "294:195:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "340:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "349:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "352:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "342:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "342:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "342:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "315:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "324:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "311:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "311:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "336:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "307:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "307:32:6"
															},
															"nodeType": "YulIf",
															"src": "304:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "365:50:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "405:9:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "375:29:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "375:40:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "365:6:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "424:59:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "468:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "479:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "464:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "464:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "434:29:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "434:49:6"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "424:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "252:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "263:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "275:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "283:6:6",
														"type": ""
													}
												],
												"src": "196:293:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "668:166:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "685:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "696:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "678:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "678:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "678:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "719:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "730:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "715:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "715:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "735:2:6",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "708:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "708:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "708:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "758:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "769:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "754:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "754:18:6"
																	},
																	{
																		"hexValue": "4e4f542c532030582041444452455353",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "774:18:6",
																		"type": "",
																		"value": "NOT,S 0X ADDRESS"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "747:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "747:46:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "747:46:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "802:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "814:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "825:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "810:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "810:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "802:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "645:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "659:4:6",
														"type": ""
													}
												],
												"src": "494:340:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1013:164:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1030:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1041:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1023:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1023:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1023:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1064:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1075:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1060:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1060:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1080:2:6",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1053:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1053:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1053:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1103:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1114:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1099:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1099:18:6"
																	},
																	{
																		"hexValue": "4e4545442061677265656d656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1119:16:6",
																		"type": "",
																		"value": "NEED agreement"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1092:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1092:44:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1092:44:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1145:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1157:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1168:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1153:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1153:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1145:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c53404d4246b0640c5d546a4b55fb182a6f0c9ba5aa404eb9d02e6863598390c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "990:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1004:4:6",
														"type": ""
													}
												],
												"src": "839:338:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"NOT,S 0X ADDRESS\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c53404d4246b0640c5d546a4b55fb182a6f0c9ba5aa404eb9d02e6863598390c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"NEED agreement\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50604051610f06380380610f0683398101604081905261002f91610177565b600480546001600160a01b031916331790556001600160a01b03821661008f5760405162461bcd60e51b815260206004820152601060248201526f4e4f542c53203058204144445245535360801b60448201526064015b60405180910390fd5b6001600160a01b0381166100d85760405162461bcd60e51b815260206004820152601060248201526f4e4f542c53203058204144445245535360801b6044820152606401610086565b806001600160a01b0316826001600160a01b03161461012a5760405162461bcd60e51b815260206004820152600e60248201526d13915151081859dc99595b595b9d60921b6044820152606401610086565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556101aa565b80516001600160a01b038116811461017257600080fd5b919050565b6000806040838503121561018a57600080fd5b6101938361015b565b91506101a16020840161015b565b90509250929050565b610d4d806101b96000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461019a5780639ba7d1ce146101ad578063b6b55f25146101b5578063dab2997b146101c8578063e8221917146101db578063fb5bca7a146101e457600080fd5b80631afaa6e8146100b95780634641257d146100ce578063529aca49146100eb5780636dff132e1461010157806371ca337d1461012c5780638c93ecff14610135575b600080fd5b6100cc6100c7366004610b62565b600055565b005b6100d66101ec565b60405190151581526020015b60405180910390f35b6100f3610359565b6040519081526020016100e2565b600254610114906001600160a01b031681565b6040516001600160a01b0390911681526020016100e2565b6100f360005481565b610172610143366004610b7b565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100e2565b600454610114906001600160a01b031681565b6100f36103ca565b6100d66101c3366004610b62565b610441565b600154610114906001600160a01b031681565b6100f360035481565b6100d6610613565b60008054338252600560205260408220546102609161024791610223916301e133809161021d9160649183916107f1565b9061081d565b33600090815260056020526040902060010154610241904290610835565b906107f1565b336000908152600560205260409020600201549061084e565b3360009081526005602052604081206003019190915561027e6103ca565b3360009081526005602052604090206003015490915081116102bb5760405162461bcd60e51b81526004016102b290610ba4565b60405180910390fd5b336000818152600560205260409020600301546002546102e6926001600160a01b0390911691610869565b336000818152600560209081526040918290206003015491519182527fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b910160405180910390a2505033600090815260056020526040812060038101829055600281019190915542600490910155600190565b3360009081526005602052604081206004015481906103789042610bf1565b33600090815260056020526040812060028101548254915493945091926103c392916103bd916103b6916301e133809161021d9160649183916107f1565b85906107f1565b9061084e565b9392505050565b6002546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610c08565b92915050565b6001546040516370a0823160e01b815233600482015260009183916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b29190610c08565b116104f65760405162461bcd60e51b815260206004820152601460248201527310985b185b98d948125b9cdd59999a58da595b9d60621b60448201526064016102b2565b60015461050e906001600160a01b03163330856108d1565b600080543382526005602052604082205461053c91610223916301e133809161021d916064918391906107f1565b604051848152909150309033907f1fd6ebb971d137acf3f01670862b8a96758cfc7e39dccb093e68daf461b0262c9060200160405180910390a33360009081526005602052604081206002018054839290610598908490610c21565b909155505033600090815260056020526040812080548592906105bc908490610c21565b909155505033600090815260056020526040812042600190910155600380548592906105e9908490610c21565b90915550503360009081526005602052604090206001808201546004909201919091559392505050565b60008054338252600560205260408220546106449161024791610223916301e133809161021d9160649183916107f1565b336000908152600560205260408120600301919091556106626103ca565b3360009081526005602052604090206003015490915081116106965760405162461bcd60e51b81526004016102b290610ba4565b336000818152600560205260409020600301546002546106c1926001600160a01b0390911691610869565b336000818152600560209081526040918290206003015491519182527fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b910160405180910390a23360009081526005602052604081206003810182905560028101919091555481116107455760405162461bcd60e51b81526004016102b290610ba4565b3360008181526005602052604090205460015461076d926001600160a01b0390911691610869565b336000818152600560209081526040918290205491519182527fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b910160405180910390a23360009081526005602052604081205460038054919290916107d4908490610bf1565b909155505033600090815260056020526040812055506001919050565b60006107fd8284610c39565b90508215806108145750816108128483610c58565b145b61043b57600080fd5b600080821161082b57600080fd5b6103c38284610c58565b60008282111561084457600080fd5b6103c38284610bf1565b600061085a8284610c21565b90508281101561043b57600080fd5b6040516001600160a01b0383166024820152604481018290526108cc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261090f565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526109099085906323b872dd60e01b90608401610895565b50505050565b6000610964826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109e19092919063ffffffff16565b8051909150156108cc57808060200190518101906109829190610c7a565b6108cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102b2565b60606109f084846000856109f8565b949350505050565b606082471015610a595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102b2565b6001600160a01b0385163b610ab05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b2565b600080866001600160a01b03168587604051610acc9190610cc8565b60006040518083038185875af1925050503d8060008114610b09576040519150601f19603f3d011682016040523d82523d6000602084013e610b0e565b606091505b5091509150610b1e828286610b29565b979650505050505050565b60608315610b385750816103c3565b825115610b485782518084602001fd5b8160405162461bcd60e51b81526004016102b29190610ce4565b600060208284031215610b7457600080fd5b5035919050565b600060208284031215610b8d57600080fd5b81356001600160a01b03811681146103c357600080fd5b60208082526018908201527f726577617264746f6b656e20496e73756666696369656e740000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610c0357610c03610bdb565b500390565b600060208284031215610c1a57600080fd5b5051919050565b60008219821115610c3457610c34610bdb565b500190565b6000816000190483118215151615610c5357610c53610bdb565b500290565b600082610c7557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c8c57600080fd5b815180151581146103c357600080fd5b60005b83811015610cb7578181015183820152602001610c9f565b838111156109095750506000910152565b60008251610cda818460208701610c9c565b9190910192915050565b6020815260008251806020840152610d03816040850160208701610c9c565b601f01601f1916919091016040019291505056fea2646970667358221220e2cebf1404ea16169806b95b68b29b27734aba7e0c3a40ef9357f8c6af499f6664736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xF06 CODESIZE SUB DUP1 PUSH2 0xF06 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x177 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E4F542C532030582041444452455353 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E4F542C532030582041444452455353 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x13915151081859DC99595B595B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x86 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x1AA JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x18A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x193 DUP4 PUSH2 0x15B JUMP JUMPDEST SWAP2 POP PUSH2 0x1A1 PUSH1 0x20 DUP5 ADD PUSH2 0x15B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xD4D DUP1 PUSH2 0x1B9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x9BA7D1CE EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0xDAB2997B EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xE8221917 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xFB5BCA7A EQ PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1AFAA6E8 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x529ACA49 EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x6DFF132E EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x71CA337D EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x8C93ECFF EQ PUSH2 0x135 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x0 SSTORE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD6 PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF3 PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0xF3 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x172 PUSH2 0x143 CALLDATASIZE PUSH1 0x4 PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x3CA JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x441 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x613 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x260 SWAP2 PUSH2 0x247 SWAP2 PUSH2 0x223 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 PUSH2 0x7F1 JUMP JUMPDEST SWAP1 PUSH2 0x81D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x241 SWAP1 TIMESTAMP SWAP1 PUSH2 0x835 JUMP JUMPDEST SWAP1 PUSH2 0x7F1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 PUSH2 0x84E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x27E PUSH2 0x3CA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP2 POP DUP2 GT PUSH2 0x2BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x2 SLOAD PUSH2 0x2E6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x869 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE TIMESTAMP PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 ADD SLOAD DUP2 SWAP1 PUSH2 0x378 SWAP1 TIMESTAMP PUSH2 0xBF1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD DUP3 SLOAD SWAP2 SLOAD SWAP4 SWAP5 POP SWAP2 SWAP3 PUSH2 0x3C3 SWAP3 SWAP2 PUSH2 0x3BD SWAP2 PUSH2 0x3B6 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 PUSH2 0x7F1 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST SWAP1 PUSH2 0x84E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x417 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43B SWAP2 SWAP1 PUSH2 0xC08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B2 SWAP2 SWAP1 PUSH2 0xC08 JUMP JUMPDEST GT PUSH2 0x4F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x10985B185B98D948125B9CDD59999A58DA595B9D PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x50E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP6 PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x53C SWAP2 PUSH2 0x223 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 CALLER SWAP1 PUSH32 0x1FD6EBB971D137ACF3F01670862B8A96758CFC7E39DCCB093E68DAF461B0262C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x598 SWAP1 DUP5 SWAP1 PUSH2 0xC21 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x5BC SWAP1 DUP5 SWAP1 PUSH2 0xC21 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 TIMESTAMP PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE PUSH1 0x3 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x5E9 SWAP1 DUP5 SWAP1 PUSH2 0xC21 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD SLOAD PUSH1 0x4 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x644 SWAP2 PUSH2 0x247 SWAP2 PUSH2 0x223 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 PUSH2 0x7F1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x662 PUSH2 0x3CA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP2 POP DUP2 GT PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x2 SLOAD PUSH2 0x6C1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x869 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD DUP2 GT PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 SLOAD PUSH2 0x76D SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x869 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x7D4 SWAP1 DUP5 SWAP1 PUSH2 0xBF1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7FD DUP3 DUP5 PUSH2 0xC39 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO DUP1 PUSH2 0x814 JUMPI POP DUP2 PUSH2 0x812 DUP5 DUP4 PUSH2 0xC58 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x82B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C3 DUP3 DUP5 PUSH2 0xC58 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x844 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C3 DUP3 DUP5 PUSH2 0xBF1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x85A DUP3 DUP5 PUSH2 0xC21 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x8CC SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x90F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x909 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x895 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x964 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9E1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x8CC JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x982 SWAP2 SWAP1 PUSH2 0xC7A JUMP JUMPDEST PUSH2 0x8CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9F0 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x9F8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xACC SWAP2 SWAP1 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB09 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB0E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xB1E DUP3 DUP3 DUP7 PUSH2 0xB29 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xB38 JUMPI POP DUP2 PUSH2 0x3C3 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xB48 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0xCE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x726577617264746F6B656E20496E73756666696369656E740000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC03 JUMPI PUSH2 0xC03 PUSH2 0xBDB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xC34 JUMPI PUSH2 0xC34 PUSH2 0xBDB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC53 JUMPI PUSH2 0xC53 PUSH2 0xBDB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC75 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCB7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC9F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x909 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xCDA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xD03 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0xCE 0xBF EQ DIV 0xEA AND AND SWAP9 MOD 0xB9 JUMPDEST PUSH9 0xB29B27734ABA7E0C3A BLOCKHASH 0xEF SWAP4 JUMPI 0xF8 0xC6 0xAF 0x49 SWAP16 PUSH7 0x64736F6C634300 ADDMOD 0xF STOP CALLER ",
							"sourceMap": "169:6418:5:-:0;;;1123:342;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1186:5;:18;;-1:-1:-1;;;;;;1186:18:5;1194:10;1186:18;;;-1:-1:-1;;;;;1223:25:5;;1215:53;;;;-1:-1:-1;;;1215:53:5;;696:2:6;1215:53:5;;;678:21:6;735:2;715:18;;;708:30;-1:-1:-1;;;754:18:6;;;747:46;810:18;;1215:53:5;;;;;;;;;-1:-1:-1;;;;;1287:22:5;;1279:50;;;;-1:-1:-1;;;1279:50:5;;696:2:6;1279:50:5;;;678:21:6;735:2;715:18;;;708:30;-1:-1:-1;;;754:18:6;;;747:46;810:18;;1279:50:5;494:340:6;1279:50:5;1363:8;-1:-1:-1;;;;;1348:23:5;:11;-1:-1:-1;;;;;1348:23:5;;1340:49;;;;-1:-1:-1;;;1340:49:5;;1041:2:6;1340:49:5;;;1023:21:6;1080:2;1060:18;;;1053:30;-1:-1:-1;;;1099:18:6;;;1092:44;1153:18;;1340:49:5;839:338:6;1340:49:5;1400:10;:24;;-1:-1:-1;;;;;1400:24:5;;;-1:-1:-1;;;;;;1400:24:5;;;;;;;1435:11;:22;;;;;;;;;;;169:6418;;14:177:6;93:13;;-1:-1:-1;;;;;135:31:6;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;839:338::-;169:6418:5;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@User_Map_868": {
									"entryPoint": null,
									"id": 868,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_callOptionalReturn_393": {
									"entryPoint": 2319,
									"id": 393,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@add_713": {
									"entryPoint": 2126,
									"id": 713,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@deposit_1044": {
									"entryPoint": 1089,
									"id": 1044,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@div_785": {
									"entryPoint": 2077,
									"id": 785,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@functionCallWithValue_553": {
									"entryPoint": 2552,
									"id": 553,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_483": {
									"entryPoint": 2529,
									"id": 483,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@harvest_1313": {
									"entryPoint": 492,
									"id": 1313,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@harvestwithDraw_1199": {
									"entryPoint": 1555,
									"id": 1199,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_412": {
									"entryPoint": null,
									"id": 412,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mul_763": {
									"entryPoint": 2033,
									"id": 763,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@newTotokenRatio_1361": {
									"entryPoint": 857,
									"id": 1361,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_830": {
									"entryPoint": null,
									"id": 830,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ratio_822": {
									"entryPoint": null,
									"id": 822,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rewardtoken_826": {
									"entryPoint": null,
									"id": 826,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_171": {
									"entryPoint": 2257,
									"id": 171,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_145": {
									"entryPoint": 2153,
									"id": 145,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@setratio_926": {
									"entryPoint": null,
									"id": 926,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@staketoken_824": {
									"entryPoint": null,
									"id": 824,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@staketotal_828": {
									"entryPoint": null,
									"id": 828,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@sub_735": {
									"entryPoint": 2101,
									"id": 735,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tokennumber_1381": {
									"entryPoint": 970,
									"id": 1381,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@verifyCallResult_688": {
									"entryPoint": 2857,
									"id": 688,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2939,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3194,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 2914,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 3080,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3272,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3300,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2980,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9be1f40e57c36cad304817e465a471f758cbc91162f0a9c1318089f897eaeb24__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3105,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3160,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3129,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3057,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3228,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 3035,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6265:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:6"
															},
															"nodeType": "YulIf",
															"src": "94:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:6",
														"type": ""
													}
												],
												"src": "14:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "294:92:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "304:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "327:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "312:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "312:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "304:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "346:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "371:6:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "364:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "364:14:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "357:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "357:22:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "339:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "339:41:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "339:41:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "263:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "274:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "285:4:6",
														"type": ""
													}
												],
												"src": "199:187:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "492:76:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "502:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "514:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "525:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "510:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "510:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "502:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "544:9:6"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "555:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "537:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "537:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "537:25:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "461:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "472:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "483:4:6",
														"type": ""
													}
												],
												"src": "391:177:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "674:102:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "684:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "696:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "707:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "692:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "692:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "684:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "726:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "741:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "757:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "762:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "753:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "753:11:6"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "766:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "749:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "749:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "737:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "737:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "719:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "719:51:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "719:51:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "643:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "654:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "665:4:6",
														"type": ""
													}
												],
												"src": "573:203:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "851:216:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "897:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "906:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "909:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "899:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "899:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "899:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "872:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "881:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "868:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "868:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "893:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "864:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "864:32:6"
															},
															"nodeType": "YulIf",
															"src": "861:52:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "922:36:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "948:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "935:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:23:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "926:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1021:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1030:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1023:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1023:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1023:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "980:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "991:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1006:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1011:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1002:3:6"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1002:11:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1015:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "998:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "998:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "987:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "987:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "977:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "977:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "970:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "970:50:6"
															},
															"nodeType": "YulIf",
															"src": "967:70:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1046:15:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1056:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1046:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "817:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "828:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "840:6:6",
														"type": ""
													}
												],
												"src": "781:286:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1285:250:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1295:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1307:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1318:3:6",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1303:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1303:19:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1295:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1338:9:6"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1349:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1331:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1331:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1331:25:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1376:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1387:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1372:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1372:18:6"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1392:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1365:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1365:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1365:34:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1419:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1430:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1415:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1415:18:6"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "1435:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1408:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1408:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1408:34:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1462:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1473:2:6",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1458:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1458:18:6"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "1478:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1451:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1451:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1451:34:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1505:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1516:3:6",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1501:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1501:19:6"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "1522:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1494:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:35:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1494:35:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1222:9:6",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "1233:6:6",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "1241:6:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1249:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1257:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1265:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1276:4:6",
														"type": ""
													}
												],
												"src": "1072:463:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1714:174:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1731:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1742:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1724:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1724:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1724:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1765:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1776:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1761:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1761:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1781:2:6",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1754:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1754:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1754:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1804:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1815:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1800:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1800:18:6"
																	},
																	{
																		"hexValue": "726577617264746f6b656e20496e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1820:26:6",
																		"type": "",
																		"value": "rewardtoken Insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1793:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1793:54:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1793:54:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1856:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1868:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1879:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1864:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1864:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1856:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1691:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1705:4:6",
														"type": ""
													}
												],
												"src": "1540:348:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1925:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1942:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1949:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1954:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1945:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1945:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1935:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1935:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1935:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1982:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1985:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1975:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1975:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1975:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2006:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2009:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1999:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1999:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1999:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1893:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2074:76:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2096:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2098:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2098:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2098:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2090:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2093:1:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2087:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2087:8:6"
															},
															"nodeType": "YulIf",
															"src": "2084:34:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2127:17:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2139:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2142:1:6"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2135:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2135:9:6"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "2127:4:6"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2056:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2059:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "2065:4:6",
														"type": ""
													}
												],
												"src": "2025:125:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2236:103:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2282:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2291:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2294:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2284:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2284:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2284:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2257:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2266:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2253:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2253:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2278:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2249:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2249:32:6"
															},
															"nodeType": "YulIf",
															"src": "2246:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2307:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2323:9:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2317:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2317:16:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2307:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2202:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2213:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2225:6:6",
														"type": ""
													}
												],
												"src": "2155:184:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2518:170:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2535:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2546:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2528:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2528:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2528:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2569:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2580:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2565:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2565:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2585:2:6",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2558:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2558:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2558:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2608:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2619:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2604:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2604:18:6"
																	},
																	{
																		"hexValue": "42616c616e636520496e73756666696369656e74",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2624:22:6",
																		"type": "",
																		"value": "Balance Insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2597:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2597:50:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2597:50:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2656:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2668:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2679:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2664:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2664:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2656:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9be1f40e57c36cad304817e465a471f758cbc91162f0a9c1318089f897eaeb24__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2495:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2509:4:6",
														"type": ""
													}
												],
												"src": "2344:344:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2741:80:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2768:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2770:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2770:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2770:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2757:1:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2764:1:6"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2760:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2760:6:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2754:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2754:13:6"
															},
															"nodeType": "YulIf",
															"src": "2751:39:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2799:16:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2810:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2813:1:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2806:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2806:9:6"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2799:3:6"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2724:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2727:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2733:3:6",
														"type": ""
													}
												],
												"src": "2693:128:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2878:116:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2937:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2939:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2939:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2939:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2909:1:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2902:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2902:9:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2895:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2895:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2917:1:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2928:1:6",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2924:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2924:6:6"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2932:1:6"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "2920:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2920:14:6"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2914:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2914:21:6"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2891:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2891:45:6"
															},
															"nodeType": "YulIf",
															"src": "2888:71:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2968:20:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2983:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2986:1:6"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2979:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2979:9:6"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2968:7:6"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2857:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2860:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2866:7:6",
														"type": ""
													}
												],
												"src": "2826:168:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3045:171:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3076:111:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3097:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3104:3:6",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3109:10:6",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3100:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3100:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3090:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3090:31:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3090:31:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3141:1:6",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3144:4:6",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3134:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3134:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3134:15:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3169:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3172:4:6",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3162:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3162:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3162:15:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3065:1:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3058:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3058:9:6"
															},
															"nodeType": "YulIf",
															"src": "3055:132:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3196:14:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3205:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3208:1:6"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3201:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3201:9:6"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3196:1:6"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3030:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3033:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3039:1:6",
														"type": ""
													}
												],
												"src": "2999:217:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3350:145:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3360:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3372:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3383:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3368:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3368:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3360:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3402:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3417:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3433:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3438:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3429:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3429:11:6"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3442:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3425:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3425:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3413:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3413:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3395:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3395:51:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3395:51:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3466:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3477:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3462:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3462:18:6"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3482:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3455:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3455:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3455:34:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3311:9:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3322:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3330:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3341:4:6",
														"type": ""
													}
												],
												"src": "3221:274:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3657:218:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3667:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3679:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3690:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3675:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3675:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3667:4:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3702:29:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3720:3:6",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3725:1:6",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3716:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3716:11:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3729:1:6",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3712:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3712:19:6"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3706:2:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3747:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3762:6:6"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3770:2:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3758:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3758:15:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3740:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3740:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3740:34:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3794:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3805:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3790:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3790:18:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3814:6:6"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3822:2:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3810:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3810:15:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3783:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3783:43:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3783:43:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3846:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3857:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3842:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3842:18:6"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3862:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3835:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3835:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3835:34:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3610:9:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3621:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3629:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3637:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3648:4:6",
														"type": ""
													}
												],
												"src": "3500:375:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3958:199:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4004:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4013:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4016:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4006:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4006:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4006:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3979:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3988:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3975:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3975:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4000:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3971:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3971:32:6"
															},
															"nodeType": "YulIf",
															"src": "3968:52:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4029:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4048:9:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4042:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4042:16:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4033:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4111:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4120:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4123:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4113:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4113:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4113:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4080:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "4101:5:6"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "4094:6:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4094:13:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4087:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4087:21:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4077:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4077:32:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4070:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4070:40:6"
															},
															"nodeType": "YulIf",
															"src": "4067:60:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4136:15:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4146:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4136:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3924:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3935:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3947:6:6",
														"type": ""
													}
												],
												"src": "3880:277:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4336:232:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4353:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4364:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4346:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4346:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4346:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4387:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4398:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4383:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4383:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4403:2:6",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4376:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4376:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4376:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4426:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4437:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4422:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4422:18:6"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4442:34:6",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4415:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4415:62:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4415:62:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4497:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4508:2:6",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4493:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4493:18:6"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4513:12:6",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4486:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4486:40:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4486:40:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4535:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4547:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4558:3:6",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4543:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4543:19:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4535:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4313:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4327:4:6",
														"type": ""
													}
												],
												"src": "4162:406:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4747:228:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4764:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4775:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4757:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4757:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4757:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4814:2:6",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4837:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4848:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4833:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4833:18:6"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4853:34:6",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4826:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4826:62:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4826:62:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4908:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4919:2:6",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4904:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4904:18:6"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4924:8:6",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4897:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4897:36:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4897:36:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4942:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4954:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4965:3:6",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4950:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4950:19:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4942:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4724:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4738:4:6",
														"type": ""
													}
												],
												"src": "4573:402:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5154:179:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5171:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5182:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5164:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5164:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5164:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5205:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5216:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5201:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5201:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5221:2:6",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5194:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5194:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5194:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5244:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5255:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5240:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5240:18:6"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5260:31:6",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5233:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5233:59:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5233:59:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5301:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5313:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5324:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5309:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5309:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5301:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5131:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5145:4:6",
														"type": ""
													}
												],
												"src": "4980:353:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5391:205:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5401:10:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5410:1:6",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5405:1:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5470:63:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "5495:3:6"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "5500:1:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5491:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5491:11:6"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "5514:3:6"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5519:1:6"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5510:3:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5510:11:6"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5504:5:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5504:18:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5484:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5484:39:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5484:39:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5431:1:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5434:6:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5428:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5428:13:6"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5442:19:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5444:15:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5453:1:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5456:2:6",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5449:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5449:10:6"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5444:1:6"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5424:3:6",
																"statements": []
															},
															"src": "5420:113:6"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5559:31:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "5572:3:6"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "5577:6:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5568:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5568:16:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5586:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5561:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5561:27:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5561:27:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5548:1:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5551:6:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5545:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5545:13:6"
															},
															"nodeType": "YulIf",
															"src": "5542:48:6"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "5369:3:6",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "5374:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5379:6:6",
														"type": ""
													}
												],
												"src": "5338:258:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5738:137:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5748:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5768:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5762:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5762:13:6"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5752:6:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5810:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5818:4:6",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5806:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5806:17:6"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5825:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5830:6:6"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "5784:21:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5784:53:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5784:53:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5846:23:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5857:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5862:6:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5853:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5853:16:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5846:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5714:3:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5719:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5730:3:6",
														"type": ""
													}
												],
												"src": "5601:274:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6001:262:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6018:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6029:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6011:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6011:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6011:21:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6041:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6061:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6055:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6055:13:6"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6045:6:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6088:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6099:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6084:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6084:18:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6104:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6077:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6077:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6077:34:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6146:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6154:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6142:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6142:15:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6163:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6174:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6159:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6159:18:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6179:6:6"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6120:21:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6120:66:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6120:66:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6195:62:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6211:9:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "6230:6:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6238:2:6",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "6226:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6226:15:6"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6247:2:6",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "6243:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6243:7:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "6222:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6222:29:6"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6207:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6207:45:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6254:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6203:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6203:54:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6195:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5970:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5981:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5992:4:6",
														"type": ""
													}
												],
												"src": "5880:383:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"rewardtoken Insufficient\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_9be1f40e57c36cad304817e465a471f758cbc91162f0a9c1318089f897eaeb24__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Balance Insufficient\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461019a5780639ba7d1ce146101ad578063b6b55f25146101b5578063dab2997b146101c8578063e8221917146101db578063fb5bca7a146101e457600080fd5b80631afaa6e8146100b95780634641257d146100ce578063529aca49146100eb5780636dff132e1461010157806371ca337d1461012c5780638c93ecff14610135575b600080fd5b6100cc6100c7366004610b62565b600055565b005b6100d66101ec565b60405190151581526020015b60405180910390f35b6100f3610359565b6040519081526020016100e2565b600254610114906001600160a01b031681565b6040516001600160a01b0390911681526020016100e2565b6100f360005481565b610172610143366004610b7b565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0016100e2565b600454610114906001600160a01b031681565b6100f36103ca565b6100d66101c3366004610b62565b610441565b600154610114906001600160a01b031681565b6100f360035481565b6100d6610613565b60008054338252600560205260408220546102609161024791610223916301e133809161021d9160649183916107f1565b9061081d565b33600090815260056020526040902060010154610241904290610835565b906107f1565b336000908152600560205260409020600201549061084e565b3360009081526005602052604081206003019190915561027e6103ca565b3360009081526005602052604090206003015490915081116102bb5760405162461bcd60e51b81526004016102b290610ba4565b60405180910390fd5b336000818152600560205260409020600301546002546102e6926001600160a01b0390911691610869565b336000818152600560209081526040918290206003015491519182527fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b910160405180910390a2505033600090815260056020526040812060038101829055600281019190915542600490910155600190565b3360009081526005602052604081206004015481906103789042610bf1565b33600090815260056020526040812060028101548254915493945091926103c392916103bd916103b6916301e133809161021d9160649183916107f1565b85906107f1565b9061084e565b9392505050565b6002546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610c08565b92915050565b6001546040516370a0823160e01b815233600482015260009183916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561048e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b29190610c08565b116104f65760405162461bcd60e51b815260206004820152601460248201527310985b185b98d948125b9cdd59999a58da595b9d60621b60448201526064016102b2565b60015461050e906001600160a01b03163330856108d1565b600080543382526005602052604082205461053c91610223916301e133809161021d916064918391906107f1565b604051848152909150309033907f1fd6ebb971d137acf3f01670862b8a96758cfc7e39dccb093e68daf461b0262c9060200160405180910390a33360009081526005602052604081206002018054839290610598908490610c21565b909155505033600090815260056020526040812080548592906105bc908490610c21565b909155505033600090815260056020526040812042600190910155600380548592906105e9908490610c21565b90915550503360009081526005602052604090206001808201546004909201919091559392505050565b60008054338252600560205260408220546106449161024791610223916301e133809161021d9160649183916107f1565b336000908152600560205260408120600301919091556106626103ca565b3360009081526005602052604090206003015490915081116106965760405162461bcd60e51b81526004016102b290610ba4565b336000818152600560205260409020600301546002546106c1926001600160a01b0390911691610869565b336000818152600560209081526040918290206003015491519182527fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b910160405180910390a23360009081526005602052604081206003810182905560028101919091555481116107455760405162461bcd60e51b81526004016102b290610ba4565b3360008181526005602052604090205460015461076d926001600160a01b0390911691610869565b336000818152600560209081526040918290205491519182527fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b910160405180910390a23360009081526005602052604081205460038054919290916107d4908490610bf1565b909155505033600090815260056020526040812055506001919050565b60006107fd8284610c39565b90508215806108145750816108128483610c58565b145b61043b57600080fd5b600080821161082b57600080fd5b6103c38284610c58565b60008282111561084457600080fd5b6103c38284610bf1565b600061085a8284610c21565b90508281101561043b57600080fd5b6040516001600160a01b0383166024820152604481018290526108cc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261090f565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526109099085906323b872dd60e01b90608401610895565b50505050565b6000610964826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109e19092919063ffffffff16565b8051909150156108cc57808060200190518101906109829190610c7a565b6108cc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102b2565b60606109f084846000856109f8565b949350505050565b606082471015610a595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102b2565b6001600160a01b0385163b610ab05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102b2565b600080866001600160a01b03168587604051610acc9190610cc8565b60006040518083038185875af1925050503d8060008114610b09576040519150601f19603f3d011682016040523d82523d6000602084013e610b0e565b606091505b5091509150610b1e828286610b29565b979650505050505050565b60608315610b385750816103c3565b825115610b485782518084602001fd5b8160405162461bcd60e51b81526004016102b29190610ce4565b600060208284031215610b7457600080fd5b5035919050565b600060208284031215610b8d57600080fd5b81356001600160a01b03811681146103c357600080fd5b60208082526018908201527f726577617264746f6b656e20496e73756666696369656e740000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610c0357610c03610bdb565b500390565b600060208284031215610c1a57600080fd5b5051919050565b60008219821115610c3457610c34610bdb565b500190565b6000816000190483118215151615610c5357610c53610bdb565b500290565b600082610c7557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c8c57600080fd5b815180151581146103c357600080fd5b60005b83811015610cb7578181015183820152602001610c9f565b838111156109095750506000910152565b60008251610cda818460208701610c9c565b9190910192915050565b6020815260008251806020840152610d03816040850160208701610c9c565b601f01601f1916919091016040019291505056fea2646970667358221220e2cebf1404ea16169806b95b68b29b27734aba7e0c3a40ef9357f8c6af499f6664736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x9BA7D1CE EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0xDAB2997B EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xE8221917 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xFB5BCA7A EQ PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1AFAA6E8 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x4641257D EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x529ACA49 EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x6DFF132E EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x71CA337D EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x8C93ECFF EQ PUSH2 0x135 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCC PUSH2 0xC7 CALLDATASIZE PUSH1 0x4 PUSH2 0xB62 JUMP JUMPDEST PUSH1 0x0 SSTORE JUMP JUMPDEST STOP JUMPDEST PUSH2 0xD6 PUSH2 0x1EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF3 PUSH2 0x359 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH2 0xF3 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x172 PUSH2 0x143 CALLDATASIZE PUSH1 0x4 PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x3CA JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB62 JUMP JUMPDEST PUSH2 0x441 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x114 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xF3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x613 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x260 SWAP2 PUSH2 0x247 SWAP2 PUSH2 0x223 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 PUSH2 0x7F1 JUMP JUMPDEST SWAP1 PUSH2 0x81D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x241 SWAP1 TIMESTAMP SWAP1 PUSH2 0x835 JUMP JUMPDEST SWAP1 PUSH2 0x7F1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 PUSH2 0x84E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x27E PUSH2 0x3CA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP2 POP DUP2 GT PUSH2 0x2BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x2 SLOAD PUSH2 0x2E6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x869 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE TIMESTAMP PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x4 ADD SLOAD DUP2 SWAP1 PUSH2 0x378 SWAP1 TIMESTAMP PUSH2 0xBF1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD DUP3 SLOAD SWAP2 SLOAD SWAP4 SWAP5 POP SWAP2 SWAP3 PUSH2 0x3C3 SWAP3 SWAP2 PUSH2 0x3BD SWAP2 PUSH2 0x3B6 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 PUSH2 0x7F1 JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST SWAP1 PUSH2 0x84E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x417 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43B SWAP2 SWAP1 PUSH2 0xC08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B2 SWAP2 SWAP1 PUSH2 0xC08 JUMP JUMPDEST GT PUSH2 0x4F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x10985B185B98D948125B9CDD59999A58DA595B9D PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x50E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP6 PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x53C SWAP2 PUSH2 0x223 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 CALLER SWAP1 PUSH32 0x1FD6EBB971D137ACF3F01670862B8A96758CFC7E39DCCB093E68DAF461B0262C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x598 SWAP1 DUP5 SWAP1 PUSH2 0xC21 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x5BC SWAP1 DUP5 SWAP1 PUSH2 0xC21 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 TIMESTAMP PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE PUSH1 0x3 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0x5E9 SWAP1 DUP5 SWAP1 PUSH2 0xC21 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD SLOAD PUSH1 0x4 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH2 0x644 SWAP2 PUSH2 0x247 SWAP2 PUSH2 0x223 SWAP2 PUSH4 0x1E13380 SWAP2 PUSH2 0x21D SWAP2 PUSH1 0x64 SWAP2 DUP4 SWAP2 PUSH2 0x7F1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x662 PUSH2 0x3CA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP2 POP DUP2 GT PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0x2 SLOAD PUSH2 0x6C1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x869 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD DUP2 GT PUSH2 0x745 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0xBA4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 SLOAD PUSH2 0x76D SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH2 0x869 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0xA9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x7D4 SWAP1 DUP5 SWAP1 PUSH2 0xBF1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7FD DUP3 DUP5 PUSH2 0xC39 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO DUP1 PUSH2 0x814 JUMPI POP DUP2 PUSH2 0x812 DUP5 DUP4 PUSH2 0xC58 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x82B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C3 DUP3 DUP5 PUSH2 0xC58 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x844 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C3 DUP3 DUP5 PUSH2 0xBF1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x85A DUP3 DUP5 PUSH2 0xC21 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x8CC SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x90F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x909 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x895 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x964 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x9E1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x8CC JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x982 SWAP2 SWAP1 PUSH2 0xC7A JUMP JUMPDEST PUSH2 0x8CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9F0 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x9F8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xACC SWAP2 SWAP1 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xB09 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB0E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xB1E DUP3 DUP3 DUP7 PUSH2 0xB29 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xB38 JUMPI POP DUP2 PUSH2 0x3C3 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xB48 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0xCE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x726577617264746F6B656E20496E73756666696369656E740000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC03 JUMPI PUSH2 0xC03 PUSH2 0xBDB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xC34 JUMPI PUSH2 0xC34 PUSH2 0xBDB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC53 JUMPI PUSH2 0xC53 PUSH2 0xBDB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC75 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC8C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCB7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC9F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x909 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xCDA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC9C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xD03 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE2 0xCE 0xBF EQ DIV 0xEA AND AND SWAP9 MOD 0xB9 JUMPDEST PUSH9 0xB29B27734ABA7E0C3A BLOCKHASH 0xEF SWAP4 JUMPI 0xF8 0xC6 0xAF 0x49 SWAP16 PUSH7 0x64736F6C634300 ADDMOD 0xF STOP CALLER ",
							"sourceMap": "169:6418:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1500:73;;;;;;:::i;:::-;1551:5;:14;1500:73;;;4666:1164;;;:::i;:::-;;;364:14:6;;357:22;339:41;;327:2;312:18;4666:1164:5;;;;;;;;5877:481;;;:::i;:::-;;;537:25:6;;;525:2;510:18;5877:481:5;391:177:6;378:26:5;;;;;-1:-1:-1;;;;;378:26:5;;;;;;-1:-1:-1;;;;;737:32:6;;;719:51;;707:2;692:18;378:26:5;573:203:6;279:17:5;;;;;;1074:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1331:25:6;;;1387:2;1372:18;;1365:34;;;;1415:18;;;1408:34;;;;1473:2;1458:18;;1451:34;1516:3;1501:19;;1494:35;1318:3;1303:19;1074:40:5;1072:463:6;461:20:5;;;;;-1:-1:-1;;;;;461:20:5;;;6405:177;;;:::i;1602:1299::-;;;;;;:::i;:::-;;:::i;325:25::-;;;;;-1:-1:-1;;;;;325:25:5;;;432:22;;;;;;2947:1680;;;:::i;4666:1164::-;4701:4;4979:5;;4951:10;4942:20;;:8;:20;;;;;:32;4812:200;;4866:145;;4941:68;;5000:8;;4942:52;;4990:3;;4942:52;;:36;:43::i;:::-;:47;;:52::i;4941:68::-;4896:10;4887:20;;;;:8;:20;;;;;:36;;;4867:57;;:15;;:19;:57::i;:::-;4866:73;;:145::i;:::-;4821:10;4812:20;;;;:8;:20;;;;;:39;;;;:53;:200::i;:::-;4786:10;4777:20;;;;:8;:20;;;;;:32;;:235;;;;5035:13;:11;:13::i;:::-;5081:10;5072:20;;;;:8;:20;;;;;:32;;;5025:23;;-1:-1:-1;5068:36:5;;5059:73;;;;-1:-1:-1;;;5059:73:5;;;;;;;:::i;:::-;;;;;;;;;5251:10;5263:20;;;;:8;:20;;;;;:32;;;5225:11;;5218:78;;-1:-1:-1;;;;;5225:11:5;;;;5218:32;:78::i;:::-;5334:10;5346:20;;;;:8;:20;;;;;;;;;:32;;;5325:54;;537:25:6;;;5325:54:5;;510:18:6;5325:54:5;;;;;;;-1:-1:-1;;5465:10:5;5491:1;5456:20;;;:8;:20;;;;;:32;;;:36;;;5579:39;;;:43;;;;5781:15;5740:38;;;;:56;-1:-1:-1;;4666:1164:5:o;5877:481::-;6054:10;5925:4;6045:20;;;:8;:20;;;;;:38;;;5925:4;;6027:56;;:15;:56;:::i;:::-;6282:10;6140:22;6273:20;;;:8;:20;;;;;:39;;;;6226:5;;6189:32;;6012:71;;-1:-1:-1;6140:22:5;;6165:148;;6273:39;6165:93;;6188:68;;6247:8;;6189:52;;6237:3;;6189:52;;:36;:43::i;6188:68::-;6165:7;;:21;:93::i;:::-;:107;;:148::i;:::-;6140:173;5877:481;-1:-1:-1;;;5877:481:5:o;6405:177::-;6500:11;;6493:44;;-1:-1:-1;;;6493:44:5;;6531:4;6493:44;;;719:51:6;6449:4:5;;;;-1:-1:-1;;;;;6500:11:5;;;;6493:29;;692:18:6;;6493:44:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6466:71;6405:177;-1:-1:-1;;6405:177:5:o;1602:1299::-;1736:10;;1729:40;;-1:-1:-1;;;1729:40:5;;1758:10;1729:40;;;719:51:6;1649:4:5;;1772:7;;-1:-1:-1;;;;;1736:10:5;;;;1729:28;;692:18:6;;1729:40:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:50;1721:83;;;;-1:-1:-1;;;1721:83:5;;2546:2:6;1721:83:5;;;2528:21:6;2585:2;2565:18;;;2558:30;-1:-1:-1;;;2604:18:6;;;2597:50;2664:18;;1721:83:5;2344:344:6;1721:83:5;1853:10;;1846:71;;-1:-1:-1;;;;;1853:10:5;1882;1902:4;1909:7;1846:35;:71::i;:::-;1986:32;2133:5;;2105:10;2096:20;;:8;:20;;;;;:32;2021:153;;2095:78;;2164:8;;2096:52;;2144:3;;2096:52;;:32;:36;:43::i;2021:153::-;2193:43;;537:25:6;;;1986:188:5;;-1:-1:-1;2221:4:5;;2201:10;;2193:43;;525:2:6;510:18;2193:43:5;;;;;;;2328:10;2319:20;;;;:8;:20;;;;;:39;;:70;;2362:27;;2319:20;:70;;2362:27;;2319:70;:::i;:::-;;;;-1:-1:-1;;2464:10:5;2455:20;;;;:8;:20;;;;;:43;;2491:7;;2455:20;:43;;2491:7;;2455:43;:::i;:::-;;;;-1:-1:-1;;2588:10:5;2579:20;;;;:8;:20;;;;;2618:15;2579:36;;;;:54;2696:10;:21;;2710:7;;2579:20;2696:21;;2710:7;;2696:21;:::i;:::-;;;;-1:-1:-1;;2842:10:5;2833:20;;;;:8;:20;;;;;:36;;;;;2792:38;;;;:77;;;;2833:36;1602:1299;-1:-1:-1;;;1602:1299:5:o;2947:1680::-;2990:4;3267:5;;3239:10;3230:20;;:8;:20;;;;;:32;3100:200;;3154:145;;3229:68;;3288:8;;3230:52;;3278:3;;3230:52;;:36;:43::i;3100:200::-;3074:10;3065:20;;;;:8;:20;;;;;:32;;:235;;;;3419:13;:11;:13::i;:::-;3465:10;3456:20;;;;:8;:20;;;;;:32;;;3409:23;;-1:-1:-1;3452:36:5;;3443:73;;;;-1:-1:-1;;;3443:73:5;;;;;;;:::i;:::-;3633:10;3645:20;;;;:8;:20;;;;;:32;;;3607:11;;3600:78;;-1:-1:-1;;;;;3607:11:5;;;;3600:32;:78::i;:::-;3706:10;3718:20;;;;:8;:20;;;;;;;;;:32;;;3697:54;;537:25:6;;;3697:54:5;;510:18:6;3697:54:5;;;;;;;3837:10;3863:1;3828:20;;;:8;:20;;;;;:32;;;:36;;;3950:39;;;:43;;;;4115:32;4111:36;;4102:73;;;;-1:-1:-1;;;4102:73:5;;;;;;;:::i;:::-;4273:10;4285:20;;;;:8;:20;;;;;:32;4248:10;;4241:77;;-1:-1:-1;;;;;4248:10:5;;;;4241:31;:77::i;:::-;4344:10;4356:20;;;;:8;:20;;;;;;;;;:32;4335:54;;537:25:6;;;4335:54:5;;510:18:6;4335:54:5;;;;;;;4483:10;4474:20;;;;:8;:20;;;;;:32;4460:10;:46;;4474:32;;4460:10;;:46;;4474:32;;4460:46;:::i;:::-;;;;-1:-1:-1;;4564:10:5;4590:1;4555:20;;;:8;:20;;;;;:36;-1:-1:-1;4615:4:5;;2947:1680;-1:-1:-1;2947:1680:5:o;327:128:4:-;379:6;402:5;406:1;402;:5;:::i;:::-;398:9;-1:-1:-1;426:6:4;;;:20;;-1:-1:-1;445:1:4;436:5;440:1;436;:5;:::i;:::-;:10;426:20;418:29;;;;;461:113;513:6;544:1;540;:5;532:14;;;;;;561:5;565:1;561;:5;:::i;207:114::-;259:6;291:1;286;:6;;278:15;;;;;;308:5;312:1;308;:5;:::i;87:114::-;139:6;162:5;166:1;162;:5;:::i;:::-;158:9;;191:1;186;:6;;178:15;;;;;763:205:2;902:58;;-1:-1:-1;;;;;3413:32:6;;902:58:2;;;3395:51:6;3462:18;;;3455:34;;;875:86:2;;895:5;;-1:-1:-1;;;925:23:2;3368:18:6;;902:58:2;;;;-1:-1:-1;;902:58:2;;;;;;;;;;;;;;-1:-1:-1;;;;;902:58:2;-1:-1:-1;;;;;;902:58:2;;;;;;;;;;875:19;:86::i;:::-;763:205;;;:::o;974:241::-;1139:68;;-1:-1:-1;;;;;3758:15:6;;;1139:68:2;;;3740:34:6;3810:15;;3790:18;;;3783:43;3842:18;;;3835:34;;;1112:96:2;;1132:5;;-1:-1:-1;;;1162:27:2;3675:18:6;;1139:68:2;3500:375:6;1112:96:2;974:241;;;;:::o;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:2;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:2;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:2;;4364:2:6;4351:85:2;;;4346:21:6;4403:2;4383:18;;;4376:30;4442:34;4422:18;;;4415:62;-1:-1:-1;;;4493:18:6;;;4486:40;4543:19;;4351:85:2;4162:406:6;3861:223:3;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;3861:223;-1:-1:-1;;;;3861:223:3:o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:3;;4775:2:6;5137:81:3;;;4757:21:6;4814:2;4794:18;;;4787:30;4853:34;4833:18;;;4826:62;-1:-1:-1;;;4904:18:6;;;4897:36;4950:19;;5137:81:3;4573:402:6;5137:81:3;-1:-1:-1;;;;;1465:19:3;;;5228:60;;;;-1:-1:-1;;;5228:60:3;;5182:2:6;5228:60:3;;;5164:21:6;5221:2;5201:18;;;5194:30;5260:31;5240:18;;;5233:59;5309:18;;5228:60:3;4980:353:6;5228:60:3;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:3;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:3:o;7561:742::-;7707:12;7735:7;7731:566;;;-1:-1:-1;7765:10:3;7758:17;;7731:566;7876:17;;:21;7872:415;;8120:10;8114:17;8180:15;8167:10;8163:2;8159:19;8152:44;7872:415;8259:12;8252:20;;-1:-1:-1;;;8252:20:3;;;;;;;;:::i;14:180:6:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:6;;14:180;-1:-1:-1;14:180:6:o;781:286::-;840:6;893:2;881:9;872:7;868:23;864:32;861:52;;;909:1;906;899:12;861:52;935:23;;-1:-1:-1;;;;;987:31:6;;977:42;;967:70;;1033:1;1030;1023:12;1540:348;1742:2;1724:21;;;1781:2;1761:18;;;1754:30;1820:26;1815:2;1800:18;;1793:54;1879:2;1864:18;;1540:348::o;1893:127::-;1954:10;1949:3;1945:20;1942:1;1935:31;1985:4;1982:1;1975:15;2009:4;2006:1;1999:15;2025:125;2065:4;2093:1;2090;2087:8;2084:34;;;2098:18;;:::i;:::-;-1:-1:-1;2135:9:6;;2025:125::o;2155:184::-;2225:6;2278:2;2266:9;2257:7;2253:23;2249:32;2246:52;;;2294:1;2291;2284:12;2246:52;-1:-1:-1;2317:16:6;;2155:184;-1:-1:-1;2155:184:6:o;2693:128::-;2733:3;2764:1;2760:6;2757:1;2754:13;2751:39;;;2770:18;;:::i;:::-;-1:-1:-1;2806:9:6;;2693:128::o;2826:168::-;2866:7;2932:1;2928;2924:6;2920:14;2917:1;2914:21;2909:1;2902:9;2895:17;2891:45;2888:71;;;2939:18;;:::i;:::-;-1:-1:-1;2979:9:6;;2826:168::o;2999:217::-;3039:1;3065;3055:132;;3109:10;3104:3;3100:20;3097:1;3090:31;3144:4;3141:1;3134:15;3172:4;3169:1;3162:15;3055:132;-1:-1:-1;3201:9:6;;2999:217::o;3880:277::-;3947:6;4000:2;3988:9;3979:7;3975:23;3971:32;3968:52;;;4016:1;4013;4006:12;3968:52;4048:9;4042:16;4101:5;4094:13;4087:21;4080:5;4077:32;4067:60;;4123:1;4120;4113:12;5338:258;5410:1;5420:113;5434:6;5431:1;5428:13;5420:113;;;5510:11;;;5504:18;5491:11;;;5484:39;5456:2;5449:10;5420:113;;;5551:6;5548:1;5545:13;5542:48;;;-1:-1:-1;;5586:1:6;5568:16;;5561:27;5338:258::o;5601:274::-;5730:3;5768:6;5762:13;5784:53;5830:6;5825:3;5818:4;5810:6;5806:17;5784:53;:::i;:::-;5853:16;;;;;5601:274;-1:-1:-1;;5601:274:6:o;5880:383::-;6029:2;6018:9;6011:21;5992:4;6061:6;6055:13;6104:6;6099:2;6088:9;6084:18;6077:34;6120:66;6179:6;6174:2;6163:9;6159:18;6154:2;6146:6;6142:15;6120:66;:::i;:::-;6247:2;6226:15;-1:-1:-1;;6222:29:6;6207:45;;;;6254:2;6203:54;;5880:383;-1:-1:-1;;5880:383:6:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "681000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"User_Map(address)": "11139",
								"deposit(uint256)": "infinite",
								"harvest()": "infinite",
								"harvestwithDraw()": "infinite",
								"newTotokenRatio()": "infinite",
								"owner()": "2337",
								"ratio()": "2384",
								"rewardtoken()": "2404",
								"setratio(uint256)": "22313",
								"staketoken()": "2403",
								"staketotal()": "2383",
								"tokennumber()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 1123,
									"end": 1465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1123,
									"end": 1465,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1186,
									"end": 1191,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1186,
									"end": 1204,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1186,
									"end": 1204,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1186,
									"end": 1204,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1194,
									"end": 1204,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 1186,
									"end": 1204,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 1186,
									"end": 1204,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1186,
									"end": 1204,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1223,
									"end": 1248,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1223,
									"end": 1248,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 696,
									"end": 698,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 678,
									"end": 699,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 735,
									"end": 737,
									"name": "PUSH",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 715,
									"end": 733,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 715,
									"end": 733,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 715,
									"end": 733,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 708,
									"end": 738,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E4F542C532030582041444452455353"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "80"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 754,
									"end": 772,
									"name": "PUSH",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 754,
									"end": 772,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 754,
									"end": 772,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 747,
									"end": 793,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 810,
									"end": 828,
									"name": "PUSH",
									"source": 6,
									"value": "64"
								},
								{
									"begin": 810,
									"end": 828,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "tag",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "tag",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 1215,
									"end": 1268,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1287,
									"end": 1309,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1287,
									"end": 1309,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "9"
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 696,
									"end": 698,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 678,
									"end": 699,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 735,
									"end": 737,
									"name": "PUSH",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 715,
									"end": 733,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 715,
									"end": 733,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 715,
									"end": 733,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 708,
									"end": 738,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E4F542C532030582041444452455353"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "80"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 754,
									"end": 772,
									"name": "PUSH",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 754,
									"end": 772,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 754,
									"end": 772,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 747,
									"end": 793,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 810,
									"end": 828,
									"name": "PUSH",
									"source": 6,
									"value": "64"
								},
								{
									"begin": 810,
									"end": 828,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 494,
									"end": 834,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "tag",
									"source": 5,
									"value": "9"
								},
								{
									"begin": 1279,
									"end": 1329,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1363,
									"end": 1371,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1348,
									"end": 1371,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1348,
									"end": 1359,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1348,
									"end": 1371,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1348,
									"end": 1371,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1041,
									"end": 1043,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1023,
									"end": 1044,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1080,
									"end": 1082,
									"name": "PUSH",
									"source": 6,
									"value": "E"
								},
								{
									"begin": 1060,
									"end": 1078,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 1060,
									"end": 1078,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1060,
									"end": 1078,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1053,
									"end": 1083,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "13915151081859DC99595B595B9D"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "92"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1099,
									"end": 1117,
									"name": "PUSH",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 1099,
									"end": 1117,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1099,
									"end": 1117,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1092,
									"end": 1136,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1153,
									"end": 1171,
									"name": "PUSH",
									"source": 6,
									"value": "64"
								},
								{
									"begin": 1153,
									"end": 1171,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 839,
									"end": 1177,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "tag",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 1340,
									"end": 1389,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1410,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "AND",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1400,
									"end": 1424,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1446,
									"name": "PUSH",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1435,
									"end": 1457,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "16"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 6,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 191,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 489,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 275,
									"end": 281,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 283,
									"end": 289,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 336,
									"end": 338,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 324,
									"end": 333,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 315,
									"end": 322,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 311,
									"end": 334,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 307,
									"end": 339,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 304,
									"end": 356,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 304,
									"end": 356,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 304,
									"end": 356,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 352,
									"end": 353,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 349,
									"end": 350,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 342,
									"end": 354,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 304,
									"end": 356,
									"name": "tag",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 304,
									"end": 356,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 375,
									"end": 415,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "21"
								},
								{
									"begin": 405,
									"end": 414,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 375,
									"end": 415,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 375,
									"end": 415,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 375,
									"end": 415,
									"name": "tag",
									"source": 6,
									"value": "21"
								},
								{
									"begin": 375,
									"end": 415,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 365,
									"end": 415,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 365,
									"end": 415,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 434,
									"end": 483,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "22"
								},
								{
									"begin": 479,
									"end": 481,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 468,
									"end": 477,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 464,
									"end": 482,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 434,
									"end": 483,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "15"
								},
								{
									"begin": 434,
									"end": 483,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 434,
									"end": 483,
									"name": "tag",
									"source": 6,
									"value": "22"
								},
								{
									"begin": 434,
									"end": 483,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 424,
									"end": 483,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 424,
									"end": 483,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 196,
									"end": 489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 839,
									"end": 1177,
									"name": "tag",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 839,
									"end": 1177,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 169,
									"end": 6587,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e2cebf1404ea16169806b95b68b29b27734aba7e0c3a40ef9357f8c6af499f6664736f6c634300080f0033",
									".code": [
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "9BA7D1CE"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "B6B55F25"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "DAB2997B"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "E8221917"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "FB5BCA7A"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "1AFAA6E8"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "4641257D"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "529ACA49"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "6DFF132E"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "71CA337D"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "8C93ECFF"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 6587,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 1500,
											"end": 1573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1551,
											"end": 1556,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1551,
											"end": 1565,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1500,
											"end": 1573,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 4666,
											"end": 5830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 364,
											"end": 378,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 364,
											"end": 378,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 357,
											"end": 379,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 339,
											"end": 380,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 339,
											"end": 380,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 327,
											"end": 329,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 312,
											"end": 330,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 5877,
											"end": 6358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 537,
											"end": 562,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 525,
											"end": 527,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 510,
											"end": 528,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 391,
											"end": 568,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 378,
											"end": 404,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 378,
											"end": 404,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 378,
											"end": 404,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 378,
											"end": 404,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 378,
											"end": 404,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 378,
											"end": 404,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 378,
											"end": 404,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 378,
											"end": 404,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 378,
											"end": 404,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 378,
											"end": 404,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 378,
											"end": 404,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 378,
											"end": 404,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 378,
											"end": 404,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 737,
											"end": 769,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 737,
											"end": 769,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 737,
											"end": 769,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 719,
											"end": 770,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 719,
											"end": 770,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 707,
											"end": 709,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 692,
											"end": 710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 378,
											"end": 404,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 573,
											"end": 776,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 279,
											"end": 296,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 279,
											"end": 296,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 279,
											"end": 296,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 279,
											"end": 296,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 279,
											"end": 296,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 279,
											"end": 296,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 279,
											"end": 296,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 1074,
											"end": 1114,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "tag",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "tag",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1331,
											"end": 1356,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1331,
											"end": 1356,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1331,
											"end": 1356,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1387,
											"end": 1389,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1372,
											"end": 1390,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1372,
											"end": 1390,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1365,
											"end": 1399,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1365,
											"end": 1399,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1365,
											"end": 1399,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1365,
											"end": 1399,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1415,
											"end": 1433,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1408,
											"end": 1442,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1408,
											"end": 1442,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1408,
											"end": 1442,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1408,
											"end": 1442,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1473,
											"end": 1475,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1458,
											"end": 1476,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1458,
											"end": 1476,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1451,
											"end": 1485,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1519,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1501,
											"end": 1520,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1501,
											"end": 1520,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1494,
											"end": 1529,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1318,
											"end": 1321,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 1303,
											"end": 1322,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1074,
											"end": 1114,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 1072,
											"end": 1535,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 461,
											"end": 481,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 461,
											"end": 481,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 461,
											"end": 481,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 461,
											"end": 481,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 461,
											"end": 481,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 461,
											"end": 481,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 461,
											"end": 481,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 461,
											"end": 481,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 461,
											"end": 481,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 6405,
											"end": 6582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 1602,
											"end": 2901,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "tag",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "49"
										},
										{
											"begin": 1602,
											"end": 2901,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 325,
											"end": 350,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 325,
											"end": 350,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 325,
											"end": 350,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 325,
											"end": 350,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 325,
											"end": 350,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 325,
											"end": 350,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 325,
											"end": 350,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 325,
											"end": 350,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 325,
											"end": 350,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 432,
											"end": 454,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 432,
											"end": 454,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 432,
											"end": 454,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 432,
											"end": 454,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 432,
											"end": 454,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 432,
											"end": 454,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 432,
											"end": 454,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 2947,
											"end": 4627,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 4666,
											"end": 5830,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4701,
											"end": 4705,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4979,
											"end": 4984,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4979,
											"end": 4984,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4951,
											"end": 4961,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4950,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4962,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4974,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 5012,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 4812,
											"end": 5012,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4866,
											"end": 5011,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 4866,
											"end": 5011,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4941,
											"end": 5009,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 4941,
											"end": 5009,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5000,
											"end": 5008,
											"name": "PUSH",
											"source": 5,
											"value": "1E13380"
										},
										{
											"begin": 5000,
											"end": 5008,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4994,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 4942,
											"end": 4994,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4990,
											"end": 4993,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 4990,
											"end": 4993,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4994,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4994,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 4942,
											"end": 4985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4985,
											"name": "tag",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 4942,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4989,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4942,
											"end": 4989,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 4942,
											"end": 4994,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4941,
											"end": 5009,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 4941,
											"end": 5009,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4896,
											"end": 4906,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4895,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4907,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4923,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4887,
											"end": 4923,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4887,
											"end": 4923,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4867,
											"end": 4924,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 4867,
											"end": 4924,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4867,
											"end": 4882,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 4867,
											"end": 4882,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4867,
											"end": 4886,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 4867,
											"end": 4924,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4867,
											"end": 4924,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 4867,
											"end": 4924,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4866,
											"end": 4939,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4866,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 4866,
											"end": 5011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4866,
											"end": 5011,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 4866,
											"end": 5011,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4821,
											"end": 4831,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4820,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4832,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4851,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 4812,
											"end": 4851,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4851,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4851,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4865,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 4812,
											"end": 5012,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 5012,
											"name": "tag",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 4812,
											"end": 5012,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4786,
											"end": 4796,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4785,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4797,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 4809,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4777,
											"end": 4809,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 5012,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 5012,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 5012,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4777,
											"end": 5012,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 5035,
											"end": 5048,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5035,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 5035,
											"end": 5048,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5035,
											"end": 5048,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 5035,
											"end": 5048,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5081,
											"end": 5091,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5080,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5092,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5104,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5072,
											"end": 5104,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5072,
											"end": 5104,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5025,
											"end": 5048,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5025,
											"end": 5048,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5068,
											"end": 5104,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5068,
											"end": 5104,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 5059,
											"end": 5132,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 5059,
											"end": 5132,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5251,
											"end": 5261,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5271,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5283,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5295,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5263,
											"end": 5295,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5263,
											"end": 5295,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5218,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 5218,
											"end": 5296,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5225,
											"end": 5236,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5218,
											"end": 5250,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 5218,
											"end": 5296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5218,
											"end": 5296,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 5218,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5334,
											"end": 5344,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5354,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5366,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5378,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5346,
											"end": 5378,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5346,
											"end": 5378,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 537,
											"end": 562,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B"
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 510,
											"end": 528,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5325,
											"end": 5379,
											"name": "LOG2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5465,
											"end": 5475,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5491,
											"end": 5492,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5464,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5476,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5488,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 5456,
											"end": 5488,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5488,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5492,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5492,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5456,
											"end": 5492,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 5579,
											"end": 5618,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 5579,
											"end": 5618,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5579,
											"end": 5618,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5579,
											"end": 5622,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5579,
											"end": 5622,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5579,
											"end": 5622,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5579,
											"end": 5622,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 5781,
											"end": 5796,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 5740,
											"end": 5778,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5740,
											"end": 5778,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5740,
											"end": 5778,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5740,
											"end": 5778,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5740,
											"end": 5796,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 4666,
											"end": 5830,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6054,
											"end": 6064,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5925,
											"end": 5929,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6053,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6065,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6083,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6045,
											"end": 6083,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6045,
											"end": 6083,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5925,
											"end": 5929,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5925,
											"end": 5929,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6027,
											"end": 6083,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 6027,
											"end": 6083,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6027,
											"end": 6042,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 6027,
											"end": 6083,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 6027,
											"end": 6083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6027,
											"end": 6083,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 6027,
											"end": 6083,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6282,
											"end": 6292,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6140,
											"end": 6162,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6281,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6293,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6312,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 6273,
											"end": 6312,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6312,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6312,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6226,
											"end": 6231,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6226,
											"end": 6231,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6189,
											"end": 6221,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6189,
											"end": 6221,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6012,
											"end": 6083,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 6012,
											"end": 6083,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6140,
											"end": 6162,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6140,
											"end": 6162,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6313,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 6165,
											"end": 6313,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 6273,
											"end": 6312,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6258,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 6165,
											"end": 6258,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6188,
											"end": 6256,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 6188,
											"end": 6256,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6247,
											"end": 6255,
											"name": "PUSH",
											"source": 5,
											"value": "1E13380"
										},
										{
											"begin": 6247,
											"end": 6255,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6189,
											"end": 6241,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 6189,
											"end": 6241,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6237,
											"end": 6240,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 6237,
											"end": 6240,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6189,
											"end": 6241,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6189,
											"end": 6241,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6189,
											"end": 6225,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 6189,
											"end": 6232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6188,
											"end": 6256,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 6188,
											"end": 6256,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6172,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6172,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6186,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 6165,
											"end": 6258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6258,
											"name": "tag",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 6165,
											"end": 6258,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6272,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6272,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 6165,
											"end": 6313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6165,
											"end": 6313,
											"name": "tag",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 6165,
											"end": 6313,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6140,
											"end": 6313,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 5877,
											"end": 6358,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5877,
											"end": 6358,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6500,
											"end": 6511,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 6500,
											"end": 6511,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6531,
											"end": 6535,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 719,
											"end": 770,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6449,
											"end": 6453,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6449,
											"end": 6453,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6449,
											"end": 6453,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6449,
											"end": 6453,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6500,
											"end": 6511,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6500,
											"end": 6511,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6500,
											"end": 6511,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6500,
											"end": 6511,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6522,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 6493,
											"end": 6522,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 692,
											"end": 710,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 692,
											"end": 710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "tag",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 6493,
											"end": 6537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "tag",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 6493,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6466,
											"end": 6537,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 6405,
											"end": 6582,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6405,
											"end": 6582,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "tag",
											"source": 5,
											"value": "49"
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1736,
											"end": 1746,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1736,
											"end": 1746,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1758,
											"end": 1768,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 719,
											"end": 770,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1649,
											"end": 1653,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1649,
											"end": 1653,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1772,
											"end": 1779,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1736,
											"end": 1746,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1736,
											"end": 1746,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1736,
											"end": 1746,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1736,
											"end": 1746,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1757,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 1729,
											"end": 1757,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 692,
											"end": 710,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 692,
											"end": 710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 1729,
											"end": 1769,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 1729,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1779,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2546,
											"end": 2548,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2528,
											"end": 2549,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2585,
											"end": 2587,
											"name": "PUSH",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 2565,
											"end": 2583,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2565,
											"end": 2583,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2565,
											"end": 2583,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2558,
											"end": 2588,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10985B185B98D948125B9CDD59999A58DA595B9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2604,
											"end": 2622,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2604,
											"end": 2622,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2604,
											"end": 2622,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2597,
											"end": 2647,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2664,
											"end": 2682,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2664,
											"end": 2682,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 2344,
											"end": 2688,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 1721,
											"end": 1804,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1853,
											"end": 1863,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1853,
											"end": 1863,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1846,
											"end": 1917,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 1846,
											"end": 1917,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1863,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1882,
											"end": 1892,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1902,
											"end": 1906,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1909,
											"end": 1916,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1846,
											"end": 1881,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 1846,
											"end": 1917,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1846,
											"end": 1917,
											"name": "tag",
											"source": 5,
											"value": "101"
										},
										{
											"begin": 1846,
											"end": 1917,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1986,
											"end": 2018,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2133,
											"end": 2138,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2133,
											"end": 2138,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2105,
											"end": 2115,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2104,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2116,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2128,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2174,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2021,
											"end": 2174,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2095,
											"end": 2173,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 2095,
											"end": 2173,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2164,
											"end": 2172,
											"name": "PUSH",
											"source": 5,
											"value": "1E13380"
										},
										{
											"begin": 2164,
											"end": 2172,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 2096,
											"end": 2148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2147,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 2144,
											"end": 2147,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2148,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2128,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2132,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 2096,
											"end": 2139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2174,
											"name": "tag",
											"source": 5,
											"value": "103"
										},
										{
											"begin": 2021,
											"end": 2174,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 537,
											"end": 562,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1986,
											"end": 2174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1986,
											"end": 2174,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2221,
											"end": 2225,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 2221,
											"end": 2225,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2201,
											"end": 2211,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2201,
											"end": 2211,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "PUSH",
											"source": 5,
											"value": "1FD6EBB971D137ACF3F01670862B8A96758CFC7E39DCCB093E68DAF461B0262C"
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 525,
											"end": 527,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 510,
											"end": 528,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2236,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 2328,
											"end": 2338,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2358,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2319,
											"end": 2358,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2362,
											"end": 2389,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2362,
											"end": 2389,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2362,
											"end": 2389,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2362,
											"end": 2389,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 2319,
											"end": 2389,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "tag",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2319,
											"end": 2389,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2464,
											"end": 2474,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2463,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2491,
											"end": 2498,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 2491,
											"end": 2498,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2475,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2491,
											"end": 2498,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2491,
											"end": 2498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 2455,
											"end": 2498,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "tag",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2455,
											"end": 2498,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2588,
											"end": 2598,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2587,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2618,
											"end": 2633,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2615,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2579,
											"end": 2615,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2615,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2615,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2633,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2706,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2717,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2717,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2599,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2717,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2710,
											"end": 2717,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "110"
										},
										{
											"begin": 2696,
											"end": 2717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "tag",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2696,
											"end": 2717,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2842,
											"end": 2852,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2841,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2853,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2869,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2833,
											"end": 2869,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2869,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2869,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2869,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2830,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2792,
											"end": 2830,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2830,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2830,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2869,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2869,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2869,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2792,
											"end": 2869,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 2833,
											"end": 2869,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1602,
											"end": 2901,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1602,
											"end": 2901,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "tag",
											"source": 5,
											"value": "58"
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2990,
											"end": 2994,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3267,
											"end": 3272,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3267,
											"end": 3272,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3239,
											"end": 3249,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3238,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3250,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3262,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3100,
											"end": 3300,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 3100,
											"end": 3300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3154,
											"end": 3299,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3154,
											"end": 3299,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3229,
											"end": 3297,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3229,
											"end": 3297,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3288,
											"end": 3296,
											"name": "PUSH",
											"source": 5,
											"value": "1E13380"
										},
										{
											"begin": 3288,
											"end": 3296,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3282,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 3230,
											"end": 3282,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3278,
											"end": 3281,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3278,
											"end": 3281,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3282,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3282,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3230,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 3230,
											"end": 3273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3100,
											"end": 3300,
											"name": "tag",
											"source": 5,
											"value": "114"
										},
										{
											"begin": 3100,
											"end": 3300,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3074,
											"end": 3084,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3073,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3085,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3097,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3065,
											"end": 3097,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3300,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3300,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3065,
											"end": 3300,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3419,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 3419,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 3419,
											"end": 3432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3419,
											"end": 3432,
											"name": "tag",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 3419,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3465,
											"end": 3475,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3464,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3476,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3488,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3456,
											"end": 3488,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3456,
											"end": 3488,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3409,
											"end": 3432,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3409,
											"end": 3432,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3452,
											"end": 3488,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3452,
											"end": 3488,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 3443,
											"end": 3516,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "tag",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 3443,
											"end": 3516,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3633,
											"end": 3643,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3653,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3665,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3677,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3645,
											"end": 3677,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3645,
											"end": 3677,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3618,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3607,
											"end": 3618,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3600,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 3600,
											"end": 3678,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3607,
											"end": 3618,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3618,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3618,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3607,
											"end": 3618,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3600,
											"end": 3632,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 3600,
											"end": 3678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3600,
											"end": 3678,
											"name": "tag",
											"source": 5,
											"value": "123"
										},
										{
											"begin": 3600,
											"end": 3678,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3706,
											"end": 3716,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3726,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3750,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3718,
											"end": 3750,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3718,
											"end": 3750,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 537,
											"end": 562,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B"
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 510,
											"end": 528,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3697,
											"end": 3751,
											"name": "LOG2",
											"source": 5
										},
										{
											"begin": 3837,
											"end": 3847,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3863,
											"end": 3864,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3836,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3848,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3860,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3828,
											"end": 3860,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3860,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3864,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3864,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3828,
											"end": 3864,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 3950,
											"end": 3989,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3950,
											"end": 3989,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3950,
											"end": 3989,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3950,
											"end": 3993,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3950,
											"end": 3993,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3950,
											"end": 3993,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3950,
											"end": 3993,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 4115,
											"end": 4147,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4111,
											"end": 4147,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4111,
											"end": 4147,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 4102,
											"end": 4175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 4102,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4273,
											"end": 4283,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4293,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4305,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4285,
											"end": 4317,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4248,
											"end": 4258,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4248,
											"end": 4258,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4241,
											"end": 4318,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 4241,
											"end": 4318,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4248,
											"end": 4258,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4248,
											"end": 4258,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4248,
											"end": 4258,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4248,
											"end": 4258,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4241,
											"end": 4272,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 4241,
											"end": 4318,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4241,
											"end": 4318,
											"name": "tag",
											"source": 5,
											"value": "127"
										},
										{
											"begin": 4241,
											"end": 4318,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4344,
											"end": 4354,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4364,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4376,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4356,
											"end": 4388,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 537,
											"end": 562,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 537,
											"end": 562,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "PUSH",
											"source": 5,
											"value": "A9059CBB2AB09EB219583F4A59A5D0623ADE346D962BCD4E46B11DA047C9049B"
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 510,
											"end": 528,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4335,
											"end": 4389,
											"name": "LOG2",
											"source": 5
										},
										{
											"begin": 4483,
											"end": 4493,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4482,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4494,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4506,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4470,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4506,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4506,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4470,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4470,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4506,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4474,
											"end": 4506,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 4460,
											"end": 4506,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4460,
											"end": 4506,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4564,
											"end": 4574,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4590,
											"end": 4591,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4555,
											"end": 4563,
											"name": "PUSH",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4555,
											"end": 4575,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4555,
											"end": 4591,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4615,
											"end": 4619,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4615,
											"end": 4619,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2947,
											"end": 4627,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2947,
											"end": 4627,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 327,
											"end": 455,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 327,
											"end": 455,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 379,
											"end": 385,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 402,
											"end": 407,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 406,
											"end": 407,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 402,
											"end": 403,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 402,
											"end": 407,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 402,
											"end": 407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 402,
											"end": 407,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 402,
											"end": 407,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 398,
											"end": 407,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 426,
											"end": 432,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 426,
											"end": 446,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 426,
											"end": 446,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 445,
											"end": 446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 436,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 440,
											"end": 441,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 436,
											"end": 437,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 436,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 436,
											"end": 441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 436,
											"end": 441,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 436,
											"end": 441,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 436,
											"end": 446,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 426,
											"end": 446,
											"name": "tag",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 426,
											"end": 446,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 418,
											"end": 447,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 418,
											"end": 447,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 461,
											"end": 574,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 461,
											"end": 574,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 513,
											"end": 519,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 544,
											"end": 545,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 540,
											"end": 541,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 540,
											"end": 545,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 532,
											"end": 546,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 532,
											"end": 546,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 532,
											"end": 546,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 546,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 532,
											"end": 546,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 532,
											"end": 546,
											"name": "tag",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 532,
											"end": 546,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 561,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 565,
											"end": 566,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 561,
											"end": 562,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 561,
											"end": 566,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 561,
											"end": 566,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 207,
											"end": 321,
											"name": "tag",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 207,
											"end": 321,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 259,
											"end": 265,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 291,
											"end": 292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 286,
											"end": 287,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 286,
											"end": 292,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 286,
											"end": 292,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 278,
											"end": 293,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 278,
											"end": 293,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "tag",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 278,
											"end": 293,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 308,
											"end": 313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 312,
											"end": 313,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 308,
											"end": 309,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 308,
											"end": 313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 308,
											"end": 313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 87,
											"end": 201,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 87,
											"end": 201,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 139,
											"end": 145,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 162,
											"end": 167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 166,
											"end": 167,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 162,
											"end": 163,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 162,
											"end": 167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 162,
											"end": 167,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 162,
											"end": 167,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 162,
											"end": 167,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 158,
											"end": 167,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 158,
											"end": 167,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 191,
											"end": 192,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 186,
											"end": 187,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 186,
											"end": 192,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 186,
											"end": 192,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 178,
											"end": 193,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 178,
											"end": 193,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3413,
											"end": 3445,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3413,
											"end": 3445,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3395,
											"end": 3446,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3480,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 3462,
											"end": 3480,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3480,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3455,
											"end": 3489,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3455,
											"end": 3489,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3455,
											"end": 3489,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 895,
											"end": 900,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3368,
											"end": 3386,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 3368,
											"end": 3386,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 902,
											"end": 960,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 875,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 875,
											"end": 961,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 763,
											"end": 968,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3758,
											"end": 3773,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3758,
											"end": 3773,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3758,
											"end": 3773,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3740,
											"end": 3774,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3810,
											"end": 3825,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3810,
											"end": 3825,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3790,
											"end": 3808,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 3790,
											"end": 3808,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3790,
											"end": 3808,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3783,
											"end": 3826,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3842,
											"end": 3860,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3835,
											"end": 3869,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3835,
											"end": 3869,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3835,
											"end": 3869,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3675,
											"end": 3693,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 3675,
											"end": 3693,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 3500,
											"end": 3875,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 974,
											"end": 1215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 2,
											"value": "150"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 4359,
											"end": 4389,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4364,
											"end": 4366,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4346,
											"end": 4367,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4403,
											"end": 4405,
											"name": "PUSH",
											"source": 6,
											"value": "2A"
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4383,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4376,
											"end": 4406,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4442,
											"end": 4476,
											"name": "PUSH",
											"source": 6,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 4422,
											"end": 4440,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 4422,
											"end": 4440,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4422,
											"end": 4440,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4415,
											"end": 4477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4493,
											"end": 4511,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 4493,
											"end": 4511,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4493,
											"end": 4511,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4486,
											"end": 4526,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4543,
											"end": 4562,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 4543,
											"end": 4562,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 4162,
											"end": 4568,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "165"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4025,
											"end": 4077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 3,
											"value": "165"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3861,
											"end": 4084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 3,
											"value": "166"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4775,
											"end": 4777,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4757,
											"end": 4778,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4814,
											"end": 4816,
											"name": "PUSH",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4787,
											"end": 4817,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4853,
											"end": 4887,
											"name": "PUSH",
											"source": 6,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4826,
											"end": 4888,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4904,
											"end": 4922,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 4904,
											"end": 4922,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4904,
											"end": 4922,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4897,
											"end": 4933,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4950,
											"end": 4969,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 4950,
											"end": 4969,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 4573,
											"end": 4975,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5184,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5164,
											"end": 5185,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5221,
											"end": 5223,
											"name": "PUSH",
											"source": 6,
											"value": "1D"
										},
										{
											"begin": 5201,
											"end": 5219,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 5201,
											"end": 5219,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5201,
											"end": 5219,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5194,
											"end": 5224,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5260,
											"end": 5291,
											"name": "PUSH",
											"source": 6,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 5240,
											"end": 5258,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 5240,
											"end": 5258,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5258,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5233,
											"end": 5292,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5309,
											"end": 5327,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 5309,
											"end": 5327,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 4980,
											"end": 5333,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 5341,
											"end": 5372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 5389,
											"end": 5440,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP8",
											"source": 3
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4948,
											"end": 5447,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7561,
											"end": 8303,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 7561,
											"end": 8303,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7731,
											"end": 8297,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7731,
											"end": 8297,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 7731,
											"end": 8297,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7731,
											"end": 8297,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 7731,
											"end": 8297,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7872,
											"end": 8287,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 7872,
											"end": 8287,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8120,
											"end": 8130,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8114,
											"end": 8131,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8180,
											"end": 8195,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8167,
											"end": 8177,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 8163,
											"end": 8165,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 8159,
											"end": 8178,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8152,
											"end": 8196,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7872,
											"end": 8287,
											"name": "tag",
											"source": 3,
											"value": "187"
										},
										{
											"begin": 7872,
											"end": 8287,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8259,
											"end": 8271,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8252,
											"end": 8272,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 8252,
											"end": 8272,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 781,
											"end": 1067,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 781,
											"end": 1067,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 840,
											"end": 846,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 893,
											"end": 895,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 881,
											"end": 890,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 872,
											"end": 879,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 868,
											"end": 891,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 864,
											"end": 896,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 861,
											"end": 913,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 861,
											"end": 913,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 861,
											"end": 913,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 909,
											"end": 910,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 906,
											"end": 907,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 899,
											"end": 911,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 861,
											"end": 913,
											"name": "tag",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 861,
											"end": 913,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 935,
											"end": 958,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 935,
											"end": 958,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 987,
											"end": 1018,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 987,
											"end": 1018,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 977,
											"end": 1019,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 977,
											"end": 1019,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 967,
											"end": 1037,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 967,
											"end": 1037,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1030,
											"end": 1031,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1023,
											"end": 1035,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1540,
											"end": 1888,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1540,
											"end": 1888,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1742,
											"end": 1744,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1724,
											"end": 1745,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1724,
											"end": 1745,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1724,
											"end": 1745,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1781,
											"end": 1783,
											"name": "PUSH",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1761,
											"end": 1779,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1761,
											"end": 1779,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1761,
											"end": 1779,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1754,
											"end": 1784,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1820,
											"end": 1846,
											"name": "PUSH",
											"source": 6,
											"value": "726577617264746F6B656E20496E73756666696369656E740000000000000000"
										},
										{
											"begin": 1815,
											"end": 1817,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1800,
											"end": 1818,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1800,
											"end": 1818,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1847,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1879,
											"end": 1881,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1864,
											"end": 1882,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1864,
											"end": 1882,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1540,
											"end": 1888,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1893,
											"end": 2020,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 1893,
											"end": 2020,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1954,
											"end": 1964,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 1949,
											"end": 1952,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1945,
											"end": 1965,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1942,
											"end": 1943,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1935,
											"end": 1966,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1985,
											"end": 1989,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1982,
											"end": 1983,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1975,
											"end": 1990,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2009,
											"end": 2013,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2006,
											"end": 2007,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1999,
											"end": 2014,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2025,
											"end": 2150,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 2025,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2065,
											"end": 2069,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2093,
											"end": 2094,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2090,
											"end": 2091,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2087,
											"end": 2095,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2084,
											"end": 2118,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2084,
											"end": 2118,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 2084,
											"end": 2118,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 2098,
											"end": 2116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2135,
											"end": 2144,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2135,
											"end": 2144,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2025,
											"end": 2150,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2155,
											"end": 2339,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 2155,
											"end": 2339,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2225,
											"end": 2231,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2278,
											"end": 2280,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2266,
											"end": 2275,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2257,
											"end": 2264,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2253,
											"end": 2276,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2249,
											"end": 2281,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2298,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2298,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 2246,
											"end": 2298,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2294,
											"end": 2295,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2291,
											"end": 2292,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2284,
											"end": 2296,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2246,
											"end": 2298,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 2246,
											"end": 2298,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2333,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2317,
											"end": 2333,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2155,
											"end": 2339,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2155,
											"end": 2339,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2693,
											"end": 2821,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 2693,
											"end": 2821,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 2736,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2764,
											"end": 2765,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2760,
											"end": 2766,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 2757,
											"end": 2758,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2754,
											"end": 2767,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2751,
											"end": 2790,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2751,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 2751,
											"end": 2790,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2770,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 2770,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 2770,
											"end": 2788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2770,
											"end": 2788,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 2770,
											"end": 2788,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2693,
											"end": 2821,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2826,
											"end": 2994,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 2826,
											"end": 2994,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2866,
											"end": 2873,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2932,
											"end": 2933,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2928,
											"end": 2929,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2924,
											"end": 2930,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 2920,
											"end": 2934,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2917,
											"end": 2918,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2914,
											"end": 2935,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2909,
											"end": 2910,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2902,
											"end": 2911,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2895,
											"end": 2912,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2891,
											"end": 2936,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2888,
											"end": 2959,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2888,
											"end": 2959,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 2888,
											"end": 2959,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2939,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 2939,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 2939,
											"end": 2957,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2939,
											"end": 2957,
											"name": "tag",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 2939,
											"end": 2957,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2979,
											"end": 2988,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 2979,
											"end": 2988,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2826,
											"end": 2994,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2999,
											"end": 3216,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 2999,
											"end": 3216,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3039,
											"end": 3040,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3065,
											"end": 3066,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3055,
											"end": 3187,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 3055,
											"end": 3187,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3109,
											"end": 3119,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 3104,
											"end": 3107,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 3100,
											"end": 3120,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3097,
											"end": 3098,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3090,
											"end": 3121,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3144,
											"end": 3148,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 3141,
											"end": 3142,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3134,
											"end": 3149,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3172,
											"end": 3176,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 3169,
											"end": 3170,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3162,
											"end": 3177,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3055,
											"end": 3187,
											"name": "tag",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 3055,
											"end": 3187,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3201,
											"end": 3210,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 3201,
											"end": 3210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2999,
											"end": 3216,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3880,
											"end": 4157,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 3880,
											"end": 4157,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3947,
											"end": 3953,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4000,
											"end": 4002,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3988,
											"end": 3997,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3979,
											"end": 3986,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3975,
											"end": 3998,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3971,
											"end": 4003,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 3968,
											"end": 4020,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3968,
											"end": 4020,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 3968,
											"end": 4020,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4016,
											"end": 4017,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4013,
											"end": 4014,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3968,
											"end": 4020,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 3968,
											"end": 4020,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4048,
											"end": 4057,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4042,
											"end": 4058,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4101,
											"end": 4106,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4094,
											"end": 4107,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4087,
											"end": 4108,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4080,
											"end": 4085,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4077,
											"end": 4109,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4067,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 4067,
											"end": 4127,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4123,
											"end": 4124,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4120,
											"end": 4121,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4113,
											"end": 4125,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5338,
											"end": 5596,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 5338,
											"end": 5596,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5410,
											"end": 5411,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "tag",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5434,
											"end": 5440,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5431,
											"end": 5432,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5428,
											"end": 5441,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5510,
											"end": 5521,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5510,
											"end": 5521,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5510,
											"end": 5521,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5504,
											"end": 5522,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5491,
											"end": 5502,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5491,
											"end": 5502,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5491,
											"end": 5502,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5484,
											"end": 5523,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5456,
											"end": 5458,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5449,
											"end": 5459,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "228"
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "tag",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 5420,
											"end": 5533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5551,
											"end": 5557,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5548,
											"end": 5549,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5545,
											"end": 5558,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5542,
											"end": 5590,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5542,
											"end": 5590,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 5542,
											"end": 5590,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5586,
											"end": 5587,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5568,
											"end": 5584,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5584,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5561,
											"end": 5588,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5338,
											"end": 5596,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5601,
											"end": 5875,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 5601,
											"end": 5875,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5730,
											"end": 5733,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5768,
											"end": 5774,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5762,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5784,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 5830,
											"end": 5836,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5825,
											"end": 5828,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5818,
											"end": 5822,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5810,
											"end": 5816,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5806,
											"end": 5823,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5784,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 5784,
											"end": 5837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5784,
											"end": 5837,
											"name": "tag",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 5784,
											"end": 5837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5853,
											"end": 5869,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5853,
											"end": 5869,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5853,
											"end": 5869,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5853,
											"end": 5869,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5853,
											"end": 5869,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5601,
											"end": 5875,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5601,
											"end": 5875,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5880,
											"end": 6263,
											"name": "tag",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 5880,
											"end": 6263,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6029,
											"end": 6031,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6018,
											"end": 6027,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6011,
											"end": 6032,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5992,
											"end": 5996,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6061,
											"end": 6067,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6055,
											"end": 6068,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6104,
											"end": 6110,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6101,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6088,
											"end": 6097,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6084,
											"end": 6102,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6077,
											"end": 6111,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6120,
											"end": 6186,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 6179,
											"end": 6185,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6174,
											"end": 6176,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6163,
											"end": 6172,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6159,
											"end": 6177,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6154,
											"end": 6156,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6146,
											"end": 6152,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 6142,
											"end": 6157,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6120,
											"end": 6186,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 6120,
											"end": 6186,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6120,
											"end": 6186,
											"name": "tag",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 6120,
											"end": 6186,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6247,
											"end": 6249,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 6226,
											"end": 6241,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6222,
											"end": 6251,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6207,
											"end": 6252,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6207,
											"end": 6252,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6207,
											"end": 6252,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6207,
											"end": 6252,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6254,
											"end": 6256,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6203,
											"end": 6257,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6203,
											"end": 6257,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5880,
											"end": 6263,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5880,
											"end": 6263,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"定息矿池-进阶.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"User_Map(address)": "8c93ecff",
							"deposit(uint256)": "b6b55f25",
							"harvest()": "4641257d",
							"harvestwithDraw()": "fb5bca7a",
							"newTotokenRatio()": "529aca49",
							"owner()": "8da5cb5b",
							"ratio()": "71ca337d",
							"rewardtoken()": "6dff132e",
							"setratio(uint256)": "1afaa6e8",
							"staketoken()": "dab2997b",
							"staketotal()": "e8221917",
							"tokennumber()": "9ba7d1ce"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staketoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_totoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amout\",\"type\":\"uint256\"}],\"name\":\"Approveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amout\",\"type\":\"uint256\"}],\"name\":\"Trasfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amout\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"User_Map\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_Stake_Time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_totoken_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whole_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_totoken_Time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestwithDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTotokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setratio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staketoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staketotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokennumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"\\u5b9a\\u606f\\u77ff\\u6c60-\\u8fdb\\u9636.sol\":\"StakeContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6\",\"dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"safeMath/safemath.sol\":{\"keccak256\":\"0x97fc4ad193b2a914edb17b5e2e6ca80c5afb817413db1da916fc00694960325a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6018ff050520f0291861aa0b68d6e9369a1e46e55cdd7fe95afac6eae3ff8274\",\"dweb:/ipfs/QmYaYCoStbzohrcbL4qdL4h93DJ8UTyhwJCinnKSb7KUBr\"]},\"\\u5b9a\\u606f\\u77ff\\u6c60-\\u8fdb\\u9636.sol\":{\"keccak256\":\"0x90006c0fb90aaccc1b42fe6db31d42d4c949afb90d2d342ecc0461d3cf0d24c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d1bbfc1fb46e5509d41fc70d34c4bbd09dc9696b2557c5fc80bc6c1fc80b28db\",\"dweb:/ipfs/QmdhVwhHjwXjDvJxysqQdQqfBjw7FdsG1gEKTzWDDs66Sd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 822,
								"contract": "定息矿池-进阶.sol:StakeContract",
								"label": "ratio",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 824,
								"contract": "定息矿池-进阶.sol:StakeContract",
								"label": "staketoken",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 826,
								"contract": "定息矿池-进阶.sol:StakeContract",
								"label": "rewardtoken",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 828,
								"contract": "定息矿池-进阶.sol:StakeContract",
								"label": "staketotal",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 830,
								"contract": "定息矿池-进阶.sol:StakeContract",
								"label": "owner",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 868,
								"contract": "定息矿池-进阶.sol:StakeContract",
								"label": "User_Map",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(User)841_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_struct(User)841_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct StakeContract.User)",
								"numberOfBytes": "32",
								"value": "t_struct(User)841_storage"
							},
							"t_struct(User)841_storage": {
								"encoding": "inplace",
								"label": "struct StakeContract.User",
								"members": [
									{
										"astId": 832,
										"contract": "定息矿池-进阶.sol:StakeContract",
										"label": "stakeNumber",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 834,
										"contract": "定息矿池-进阶.sol:StakeContract",
										"label": "last_Stake_Time",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 836,
										"contract": "定息矿池-进阶.sol:StakeContract",
										"label": "last_totoken_ratio",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 838,
										"contract": "定息矿池-进阶.sol:StakeContract",
										"label": "whole_ratio",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 840,
										"contract": "定息矿池-进阶.sol:StakeContract",
										"label": "last_totoken_Time",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> safeMath/safemath.sol:27:5:\n   |\n27 |     function matha(uint _a, uint _b) public view returns (uint)  {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 754,
					"file": "safeMath/safemath.sol",
					"start": 636
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2677:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2699:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2719:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2758:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:0"
									},
									"scope": 77,
									"src": "2646:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2564:0",
							"usedErrors": []
						}
					],
					"src": "106:2661:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							113
						]
					},
					"id": 114,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 80,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:1",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:1",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 98,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1471:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1494:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1519:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1542:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 88,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1568:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 90,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1585:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 92,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1604:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:1"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:1"
									},
									"scope": 113,
									"src": "1446:183:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:1",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1950:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:1"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1988:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:1"
									},
									"scope": 113,
									"src": "1934:63:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:1",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2240:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:1"
									},
									"scope": 113,
									"src": "2189:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 114,
							"src": "620:1631:1",
							"usedErrors": []
						}
					],
					"src": "114:2138:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							689
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"SafeERC20": [
							394
						]
					},
					"id": 395,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 78,
							"src": "140:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 114,
							"src": "164:46:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 118,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 690,
							"src": "211:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 119,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:2",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 394,
							"linearizedBaseContracts": [
								394
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 122,
									"libraryName": {
										"id": 120,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "737:7:2"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:2",
									"typeName": {
										"id": 121,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "865:103:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 133,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 125,
															"src": "895:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 136,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 125,
																			"src": "925:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 44,
																		"src": "925:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 138,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 139,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "950:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 140,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 129,
																	"src": "954:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 134,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 132,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "875:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "875:86:2"
											}
										]
									},
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "794:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 124,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 123,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "794:6:2"
													},
													"referencedDeclaration": 77,
													"src": "794:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "816:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "836:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:2"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:2"
									},
									"scope": 394,
									"src": "763:205:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 170,
										"nodeType": "Block",
										"src": "1102:113:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "1132:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 161,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 148,
																			"src": "1162:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 76,
																		"src": "1162:18:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 164,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 150,
																	"src": "1191:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 165,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 152,
																	"src": "1197:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 166,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 154,
																	"src": "1201:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 159,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 157,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "1112:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 169,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:2"
											}
										]
									},
									"id": 171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1009:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 147,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 146,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1009:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1009:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1031:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1053:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1073:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:2"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:2"
									},
									"scope": 394,
									"src": "974:241:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "1581:497:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 185,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 183,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 179,
																			"src": "1830:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 184,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 186,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 191,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$394",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$394",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 190,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 189,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:2",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 192,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 193,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 177,
																					"src": "1877:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 187,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 175,
																					"src": "1846:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 188,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 54,
																				"src": "1846:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 197,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 182,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 201,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 203,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "2001:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 206,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 175,
																			"src": "2031:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 207,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2031:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 209,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 177,
																	"src": "2055:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 210,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "2064:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 204,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 205,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 202,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "1981:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 213,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:2"
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:2",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "1505:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 173,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1505:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1505:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "1527:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "1552:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:2"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:2"
									},
									"scope": 394,
									"src": "1475:603:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 250,
										"nodeType": "Block",
										"src": "2200:194:2",
										"statements": [
											{
												"assignments": [
													226
												],
												"declarations": [
													{
														"constant": false,
														"id": 226,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 250,
														"src": "2210:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 225,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 237,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 231,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$394",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$394",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 229,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 232,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 233,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 220,
																"src": "2264:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 227,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 218,
																"src": "2233:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																}
															},
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 54,
															"src": "2233:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 234,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 235,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 222,
														"src": "2275:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 239,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "2310:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 242,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 218,
																			"src": "2340:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 243,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2340:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 245,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 220,
																	"src": "2364:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 246,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 226,
																	"src": "2373:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 240,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 238,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "2290:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 249,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:2"
											}
										]
									},
									"id": 251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "2124:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 217,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 216,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2124:6:2"
													},
													"referencedDeclaration": 77,
													"src": "2124:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "2146:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "2171:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:2"
									},
									"scope": 394,
									"src": "2084:310:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "2516:370:2",
										"statements": [
											{
												"id": 297,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:2",
												"statements": [
													{
														"assignments": [
															262
														],
														"declarations": [
															{
																"constant": false,
																"id": 262,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:2",
																"nodeType": "VariableDeclaration",
																"scope": 297,
																"src": "2550:20:2",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 261,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 271,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 267,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$394",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$394",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 265,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 269,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 256,
																	"src": "2604:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 263,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "2573:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 54,
																"src": "2573:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 273,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 262,
																		"src": "2634:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 274,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "2650:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 272,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 278,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:2"
													},
													{
														"assignments": [
															280
														],
														"declarations": [
															{
																"constant": false,
																"id": 280,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:2",
																"nodeType": "VariableDeclaration",
																"scope": 297,
																"src": "2715:20:2",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 279,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 284,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 281,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 262,
																"src": "2738:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 282,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "2753:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 286,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "2792:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 289,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 254,
																					"src": "2822:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 290,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 64,
																				"src": "2822:13:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 291,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 292,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "2846:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 293,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 280,
																			"src": "2855:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 287,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 285,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 393,
																"src": "2772:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 296,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:2"
													}
												]
											}
										]
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "2440:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 253,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 252,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2440:6:2"
													},
													"referencedDeclaration": 77,
													"src": "2440:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "2462:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "2487:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:2"
									},
									"returnParameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:2"
									},
									"scope": 394,
									"src": "2400:486:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "3107:257:2",
										"statements": [
											{
												"assignments": [
													320
												],
												"declarations": [
													{
														"constant": false,
														"id": 320,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 354,
														"src": "3117:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 319,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 325,
												"initialValue": {
													"arguments": [
														{
															"id": 323,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3152:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 321,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3139:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 322,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "3139:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 329,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3181:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 330,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "3188:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 308,
															"src": "3197:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 332,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 310,
															"src": "3204:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 333,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "3214:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 334,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "3217:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 335,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "3220:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 326,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3168:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 328,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 98,
														"src": "3168:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:2"
											},
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 354,
														"src": "3232:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 344,
												"initialValue": {
													"arguments": [
														{
															"id": 342,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3266:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 340,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3253:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "3253:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 346,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 339,
																"src": "3290:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 347,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 320,
																	"src": "3304:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 345,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 353,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:2"
											}
										]
									},
									"id": 355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2921:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$113",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 301,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 300,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 113,
														"src": "2921:12:2"
													},
													"referencedDeclaration": 113,
													"src": "2921:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$113",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2949:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2972:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2997:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3020:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3046:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 311,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3063:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 313,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3082:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 315,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:2"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:2"
									},
									"scope": 394,
									"src": "2892:472:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 392,
										"nodeType": "Block",
										"src": "3817:636:2",
										"statements": [
											{
												"assignments": [
													365
												],
												"declarations": [
													{
														"constant": false,
														"id": 365,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 392,
														"src": "4166:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 364,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 374,
												"initialValue": {
													"arguments": [
														{
															"id": 371,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "4220:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 372,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 368,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "4200:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 366,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 483,
														"src": "4192:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 375,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "4275:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 377,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 391,
												"nodeType": "IfStatement",
												"src": "4271:176:2",
												"trueBody": {
													"id": 390,
													"nodeType": "Block",
													"src": "4298:149:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 382,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 365,
																				"src": "4370:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 384,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 383,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:2",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 385,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 380,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 381,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 379,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 389,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:2",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 393,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "3776:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 358,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 357,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "3776:6:2"
													},
													"referencedDeclaration": 77,
													"src": "3776:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "3790:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 360,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:2"
									},
									"scope": 394,
									"src": "3747:706:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 395,
							"src": "707:3748:2",
							"usedErrors": []
						}
					],
					"src": "115:4341:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							689
						]
					},
					"id": 690,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 396,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 397,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 689,
							"linearizedBaseContracts": [
								689
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "1241:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 405,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "1465:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 404,
												"id": 410,
												"nodeType": "Return",
												"src": "1458:30:3"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "1195:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "1235:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 402,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:3"
									},
									"scope": 689,
									"src": "1175:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 445,
										"nodeType": "Block",
										"src": "2483:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 423,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		],
																		"id": 422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 421,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 426,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 417,
																"src": "2526:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 428,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 420,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:3"
											},
											{
												"assignments": [
													432,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 432,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 445,
														"src": "2578:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 431,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 439,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 433,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 415,
																"src": "2596:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 434,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 436,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 435,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 417,
																"src": "2618:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 441,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "2647:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 440,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 444,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:3"
											}
										]
									},
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "2431:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "2458:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:3"
									},
									"scope": 689,
									"src": "2412:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 462,
										"nodeType": "Block",
										"src": "3555:84:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 457,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "3585:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 458,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 451,
															"src": "3593:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 459,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 456,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															463,
															483
														],
														"referencedDeclaration": 483,
														"src": "3572:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 455,
												"id": 461,
												"nodeType": "Return",
												"src": "3565:67:3"
											}
										]
									},
									"documentation": {
										"id": 447,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3488:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3504:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 450,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:3"
									},
									"returnParameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3541:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 453,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:3"
									},
									"scope": 689,
									"src": "3466:173:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 482,
										"nodeType": "Block",
										"src": "4008:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 476,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 466,
															"src": "4047:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 477,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 468,
															"src": "4055:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 478,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 479,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 470,
															"src": "4064:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 475,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															503,
															553
														],
														"referencedDeclaration": 553,
														"src": "4025:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 474,
												"id": 481,
												"nodeType": "Return",
												"src": "4018:59:3"
											}
										]
									},
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3892:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3916:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 467,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3943:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 469,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:3"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3994:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 472,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:3"
									},
									"scope": 689,
									"src": "3861:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 502,
										"nodeType": "Block",
										"src": "4589:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 496,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 486,
															"src": "4628:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "4636:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 498,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 490,
															"src": "4642:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 495,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															503,
															553
														],
														"referencedDeclaration": 553,
														"src": "4606:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 494,
												"id": 501,
												"nodeType": "Return",
												"src": "4599:94:3"
											}
										]
									},
									"documentation": {
										"id": 484,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4486:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4510:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 487,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4537:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 489,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:3"
									},
									"returnParameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4575:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 492,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:3"
									},
									"scope": 689,
									"src": "4446:254:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "5127:320:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 520,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		],
																		"id": 519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 518,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 522,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 523,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 510,
																"src": "5170:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 517,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 530,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 506,
																	"src": "5247:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 529,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "5236:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 528,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 534,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:3"
											},
											{
												"assignments": [
													536,
													538
												],
												"declarations": [
													{
														"constant": false,
														"id": 536,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 552,
														"src": "5300:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 535,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 538,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 552,
														"src": "5314:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 537,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 545,
												"initialValue": {
													"arguments": [
														{
															"id": 543,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "5367:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 539,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "5341:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 542,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 541,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 510,
																"src": "5360:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 547,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "5406:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 548,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "5415:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 549,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "5427:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 546,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "5389:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 516,
												"id": 551,
												"nodeType": "Return",
												"src": "5382:58:3"
											}
										]
									},
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4988:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5012:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 507,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 509,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5062:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 511,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:3"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5113:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 514,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:3"
									},
									"scope": 689,
									"src": "4948:499:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 569,
										"nodeType": "Block",
										"src": "5724:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 564,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "5760:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 565,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "5768:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 563,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															570,
															605
														],
														"referencedDeclaration": 605,
														"src": "5741:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 562,
												"id": 568,
												"nodeType": "Return",
												"src": "5734:80:3"
											}
										]
									},
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 570,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "5652:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "5668:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 557,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:3"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "5710:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 560,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:3"
									},
									"scope": 689,
									"src": "5624:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "6163:228:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 584,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "6192:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 583,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "6181:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 586,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 588,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:3"
											},
											{
												"assignments": [
													590,
													592
												],
												"declarations": [
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "6252:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 589,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 592,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "6266:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 591,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "6311:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 593,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "6293:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "6350:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "6359:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "6371:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "6333:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 581,
												"id": 603,
												"nodeType": "Return",
												"src": "6326:58:3"
											}
										]
									},
									"documentation": {
										"id": 571,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6042:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6066:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6093:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 576,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:3"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6149:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 579,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:3"
									},
									"scope": 689,
									"src": "6005:386:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "6667:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "6705:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "6713:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 615,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "6684:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "6677:84:3"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "6600:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "6616:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:3"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "6653:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:3"
									},
									"scope": 689,
									"src": "6570:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "7109:232:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "7138:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "7127:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:3"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "7200:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "7214:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7261:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "7241:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "7300:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "7309:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7321:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "7283:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "7276:58:3"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6993:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "7017:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "7044:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:3"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "7095:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:3"
									},
									"scope": 689,
									"src": "6954:387:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "7721:582:3",
										"statements": [
											{
												"condition": {
													"id": 669,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 660,
													"src": "7735:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 685,
													"nodeType": "Block",
													"src": "7792:505:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 673,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "7876:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 683,
																"nodeType": "Block",
																"src": "8234:53:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 680,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 664,
																					"src": "8259:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 679,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8252:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 681,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8252:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 682,
																		"nodeType": "ExpressionStatement",
																		"src": "8252:20:3"
																	}
																]
															},
															"id": 684,
															"nodeType": "IfStatement",
															"src": "7872:415:3",
															"trueBody": {
																"id": 678,
																"nodeType": "Block",
																"src": "7899:329:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8069:145:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8091:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8120:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8114:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8114:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8095:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8163:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8167:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8159:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8159:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8180:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8152:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8152:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8152:44:3"
																				}
																			]
																		},
																		"documentation": "@solidity memory-safe-assembly",
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 662,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8120:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 662,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8167:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 677,
																		"nodeType": "InlineAssembly",
																		"src": "8060:154:3"
																	}
																]
															}
														}
													]
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "7731:566:3",
												"trueBody": {
													"id": 672,
													"nodeType": "Block",
													"src": "7744:42:3",
													"statements": [
														{
															"expression": {
																"id": 670,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 662,
																"src": "7765:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 668,
															"id": 671,
															"nodeType": "Return",
															"src": "7758:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:3",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7596:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 659,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7618:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7651:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 663,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:3"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7707:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 666,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:3"
									},
									"scope": 689,
									"src": "7561:742:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 690,
							"src": "194:8111:3",
							"usedErrors": []
						}
					],
					"src": "101:8205:3"
				},
				"id": 3
			},
			"safeMath/safemath.sol": {
				"ast": {
					"absolutePath": "safeMath/safemath.sol",
					"exportedSymbols": {
						"SafeMath": [
							786
						],
						"math": [
							809
						]
					},
					"id": 810,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 691,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 786,
							"linearizedBaseContracts": [
								786
							],
							"name": "SafeMath",
							"nameLocation": "71:8:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 712,
										"nodeType": "Block",
										"src": "147:54:4",
										"statements": [
											{
												"expression": {
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 700,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "158:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 703,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 701,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "162:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 702,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "166:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "162:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "158:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 705,
												"nodeType": "ExpressionStatement",
												"src": "158:9:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 707,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 698,
																"src": "186:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 708,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "191:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "186:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 706,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "178:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "178:15:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "178:15:4"
											}
										]
									},
									"id": 713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "96:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "105:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "100:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "100:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "113:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "108:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "108:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "99:16:4"
									},
									"returnParameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "144:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "139:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 697,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "139:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "138:8:4"
									},
									"scope": 786,
									"src": "87:114:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "267:54:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 723,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 717,
																"src": "286:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 724,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 715,
																"src": "291:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "286:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 722,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "278:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "278:15:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 727,
												"nodeType": "ExpressionStatement",
												"src": "278:15:4"
											},
											{
												"expression": {
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 728,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "304:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 729,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 715,
															"src": "308:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 730,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 717,
															"src": "312:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "308:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "304:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 733,
												"nodeType": "ExpressionStatement",
												"src": "304:9:4"
											}
										]
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "216:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "225:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "220:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "220:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "233:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "228:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "228:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "219:16:4"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "264:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "259:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "259:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "258:8:4"
									},
									"scope": 786,
									"src": "207:114:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 762,
										"nodeType": "Block",
										"src": "387:68:4",
										"statements": [
											{
												"expression": {
													"id": 748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 744,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "398:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 747,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 745,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "402:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 746,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "406:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "402:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "398:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 749,
												"nodeType": "ExpressionStatement",
												"src": "398:9:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 751,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 737,
																	"src": "426:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "431:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "426:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 758,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 754,
																		"name": "c",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 742,
																		"src": "436:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 755,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 737,
																		"src": "440:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "436:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 757,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 739,
																	"src": "445:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "436:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "426:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 750,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "418:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "418:29:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 761,
												"nodeType": "ExpressionStatement",
												"src": "418:29:4"
											}
										]
									},
									"id": 763,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "336:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "345:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "340:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 736,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "340:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "353:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "348:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 738,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "348:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "339:16:4"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "384:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "379:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "379:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "378:8:4"
									},
									"scope": 786,
									"src": "327:128:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 784,
										"nodeType": "Block",
										"src": "521:53:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 773,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "540:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "544:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "540:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 772,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "532:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "532:14:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 777,
												"nodeType": "ExpressionStatement",
												"src": "532:14:4"
											},
											{
												"expression": {
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 778,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 770,
														"src": "557:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 779,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "561:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 780,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "565:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "561:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "557:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 783,
												"nodeType": "ExpressionStatement",
												"src": "557:9:4"
											}
										]
									},
									"id": 785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "470:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "479:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "474:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 764,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "474:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "487:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "482:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "473:16:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "518:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "513:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 769,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "513:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "512:8:4"
									},
									"scope": 786,
									"src": "461:113:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 810,
							"src": "63:514:4",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "math",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 809,
							"linearizedBaseContracts": [
								809
							],
							"name": "math",
							"nameLocation": "592:4:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 789,
									"libraryName": {
										"id": 787,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 786,
										"src": "610:8:4"
									},
									"nodeType": "UsingForDirective",
									"src": "604:24:4",
									"typeName": {
										"id": 788,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "623:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "697:57:4",
										"statements": [
											{
												"assignments": [
													799
												],
												"declarations": [
													{
														"constant": false,
														"id": 799,
														"mutability": "mutable",
														"name": "c",
														"nameLocation": "713:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "708:6:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 798,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "708:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 804,
												"initialValue": {
													"arguments": [
														{
															"id": 802,
															"name": "_b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "724:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 800,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "717:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 713,
														"src": "717:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "717:10:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "708:19:4"
											},
											{
												"expression": {
													"id": 805,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 799,
													"src": "745:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 797,
												"id": 806,
												"nodeType": "Return",
												"src": "738:8:4"
											}
										]
									},
									"functionSelector": "803ab3a9",
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "matha",
									"nameLocation": "645:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "656:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "651:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 790,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "651:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "_b",
												"nameLocation": "665:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "660:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 792,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "660:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:18:4"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "690:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 795,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "690:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "689:6:4"
									},
									"scope": 809,
									"src": "636:118:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 810,
							"src": "583:174:4",
							"usedErrors": []
						}
					],
					"src": "36:721:4"
				},
				"id": 4
			},
			"定息矿池-进阶.sol": {
				"ast": {
					"absolutePath": "定息矿池-进阶.sol",
					"exportedSymbols": {
						"Address": [
							689
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"SafeERC20": [
							394
						],
						"SafeMath": [
							786
						],
						"StakeContract": [
							1382
						],
						"math": [
							809
						]
					},
					"id": 1383,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 811,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:5"
						},
						{
							"absolutePath": "safeMath/safemath.sol",
							"file": "./safeMath/safemath.sol",
							"id": 812,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1383,
							"sourceUnit": 810,
							"src": "63:33:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 813,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1383,
							"sourceUnit": 395,
							"src": "98:65:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StakeContract",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1382,
							"linearizedBaseContracts": [
								1382
							],
							"name": "StakeContract",
							"nameLocation": "178:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 816,
									"libraryName": {
										"id": 814,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 786,
										"src": "205:8:5"
									},
									"nodeType": "UsingForDirective",
									"src": "199:24:5",
									"typeName": {
										"id": 815,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "218:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"global": false,
									"id": 820,
									"libraryName": {
										"id": 817,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 394,
										"src": "235:9:5"
									},
									"nodeType": "UsingForDirective",
									"src": "229:27:5",
									"typeName": {
										"id": 819,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 818,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "249:6:5"
										},
										"referencedDeclaration": 77,
										"src": "249:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "71ca337d",
									"id": 822,
									"mutability": "mutable",
									"name": "ratio",
									"nameLocation": "291:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 1382,
									"src": "279:17:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 821,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "279:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dab2997b",
									"id": 824,
									"mutability": "mutable",
									"name": "staketoken",
									"nameLocation": "340:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 1382,
									"src": "325:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 823,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "325:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "6dff132e",
									"id": 826,
									"mutability": "mutable",
									"name": "rewardtoken",
									"nameLocation": "393:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 1382,
									"src": "378:26:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 825,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "378:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e8221917",
									"id": 828,
									"mutability": "mutable",
									"name": "staketotal",
									"nameLocation": "444:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 1382,
									"src": "432:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 827,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "432:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 830,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "476:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 1382,
									"src": "461:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 829,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "461:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "StakeContract.User",
									"id": 841,
									"members": [
										{
											"constant": false,
											"id": 832,
											"mutability": "mutable",
											"name": "stakeNumber",
											"nameLocation": "549:11:5",
											"nodeType": "VariableDeclaration",
											"scope": 841,
											"src": "544:16:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 831,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "544:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 834,
											"mutability": "mutable",
											"name": "last_Stake_Time",
											"nameLocation": "607:15:5",
											"nodeType": "VariableDeclaration",
											"scope": 841,
											"src": "602:20:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 833,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "602:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 836,
											"mutability": "mutable",
											"name": "last_totoken_ratio",
											"nameLocation": "690:18:5",
											"nodeType": "VariableDeclaration",
											"scope": 841,
											"src": "685:23:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 835,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "685:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 838,
											"mutability": "mutable",
											"name": "whole_ratio",
											"nameLocation": "772:11:5",
											"nodeType": "VariableDeclaration",
											"scope": 841,
											"src": "767:16:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 837,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "767:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 840,
											"mutability": "mutable",
											"name": "last_totoken_Time",
											"nameLocation": "830:17:5",
											"nodeType": "VariableDeclaration",
											"scope": 841,
											"src": "825:22:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 839,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "825:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "User",
									"nameLocation": "497:4:5",
									"nodeType": "StructDefinition",
									"scope": 1382,
									"src": "490:365:5",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "1fd6ebb971d137acf3f01670862b8a96758cfc7e39dccb093e68daf461b0262c",
									"id": 849,
									"name": "Trasfer",
									"nameLocation": "869:7:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "877:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "877:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "915:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "899:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "899:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 847,
												"indexed": false,
												"mutability": "mutable",
												"name": "amout",
												"nameLocation": "924:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "919:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 846,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "919:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:54:5"
									},
									"src": "863:68:5"
								},
								{
									"anonymous": false,
									"eventSelector": "cb5c1016bb7399d39f0ec8e1cda736e7b512f85cd9449083de61a54db3c338ad",
									"id": 857,
									"name": "Approveal",
									"nameLocation": "943:9:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "969:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "953:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "953:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "992:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "976:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 852,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 855,
												"indexed": false,
												"mutability": "mutable",
												"name": "amout",
												"nameLocation": "1006:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "1001:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 854,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1001:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "952:60:5"
									},
									"src": "937:76:5"
								},
								{
									"anonymous": false,
									"eventSelector": "a9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b",
									"id": 863,
									"name": "transfer",
									"nameLocation": "1025:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1050:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "1034:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 858,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1034:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 861,
												"indexed": false,
												"mutability": "mutable",
												"name": "amout",
												"nameLocation": "1059:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "1054:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 860,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1054:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1033:32:5"
									},
									"src": "1019:47:5"
								},
								{
									"constant": false,
									"functionSelector": "8c93ecff",
									"id": 868,
									"mutability": "mutable",
									"name": "User_Map",
									"nameLocation": "1106:8:5",
									"nodeType": "VariableDeclaration",
									"scope": 1382,
									"src": "1074:40:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
										"typeString": "mapping(address => struct StakeContract.User)"
									},
									"typeName": {
										"id": 867,
										"keyType": {
											"id": 864,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1082:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1074:24:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
											"typeString": "mapping(address => struct StakeContract.User)"
										},
										"valueType": {
											"id": 866,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 865,
												"name": "User",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 841,
												"src": "1093:4:5"
											},
											"referencedDeclaration": 841,
											"src": "1093:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_User_$841_storage_ptr",
												"typeString": "struct StakeContract.User"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 915,
										"nodeType": "Block",
										"src": "1175:290:5",
										"statements": [
											{
												"expression": {
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 875,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 830,
														"src": "1186:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 876,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1194:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1194:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1186:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 879,
												"nodeType": "ExpressionStatement",
												"src": "1186:18:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 886,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 881,
																"name": "_staketoken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "1223:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 884,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1246:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 883,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1238:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 882,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1238:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1238:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1223:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e4f542c532030582041444452455353",
															"id": 887,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1249:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7",
																"typeString": "literal_string \"NOT,S 0X ADDRESS\""
															},
															"value": "NOT,S 0X ADDRESS"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7",
																"typeString": "literal_string \"NOT,S 0X ADDRESS\""
															}
														],
														"id": 880,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1215:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 888,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1215:53:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 889,
												"nodeType": "ExpressionStatement",
												"src": "1215:53:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 891,
																"name": "_totoken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 872,
																"src": "1287:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 894,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1307:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 893,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1299:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 892,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1299:7:5",
																		"typeDescriptions": {}
																	}
																},
																"id": 895,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1299:10:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1287:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e4f542c532030582041444452455353",
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1310:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7",
																"typeString": "literal_string \"NOT,S 0X ADDRESS\""
															},
															"value": "NOT,S 0X ADDRESS"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc8656ae6be26b3789f6ff5b051a4227e239fc2e3a6e0fd8e7e964dc474c29e7",
																"typeString": "literal_string \"NOT,S 0X ADDRESS\""
															}
														],
														"id": 890,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1279:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1279:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 899,
												"nodeType": "ExpressionStatement",
												"src": "1279:50:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 903,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 901,
																"name": "_staketoken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "1348:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 902,
																"name": "_totoken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 872,
																"src": "1363:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1348:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e4545442061677265656d656e74",
															"id": 904,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1372:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c53404d4246b0640c5d546a4b55fb182a6f0c9ba5aa404eb9d02e6863598390c",
																"typeString": "literal_string \"NEED agreement\""
															},
															"value": "NEED agreement"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c53404d4246b0640c5d546a4b55fb182a6f0c9ba5aa404eb9d02e6863598390c",
																"typeString": "literal_string \"NEED agreement\""
															}
														],
														"id": 900,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1340:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1340:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 906,
												"nodeType": "ExpressionStatement",
												"src": "1340:49:5"
											},
											{
												"expression": {
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 907,
														"name": "staketoken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 824,
														"src": "1400:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 908,
														"name": "_staketoken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 870,
														"src": "1413:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1400:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 910,
												"nodeType": "ExpressionStatement",
												"src": "1400:24:5"
											},
											{
												"expression": {
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 911,
														"name": "rewardtoken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 826,
														"src": "1435:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 912,
														"name": "_totoken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 872,
														"src": "1449:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1435:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 914,
												"nodeType": "ExpressionStatement",
												"src": "1435:22:5"
											}
										]
									},
									"id": 916,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "_staketoken",
												"nameLocation": "1144:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1136:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1136:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "_totoken",
												"nameLocation": "1165:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "1157:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1135:39:5"
									},
									"returnParameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1175:0:5"
									},
									"scope": 1382,
									"src": "1123:342:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 925,
										"nodeType": "Block",
										"src": "1540:33:5",
										"statements": [
											{
												"expression": {
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 921,
														"name": "ratio",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "1551:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 922,
														"name": "_ratio",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "1559:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1551:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "1551:14:5"
											}
										]
									},
									"functionSelector": "1afaa6e8",
									"id": 926,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setratio",
									"nameLocation": "1509:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "_ratio",
												"nameLocation": "1523:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "1518:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1518:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1517:13:5"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1540:0:5"
									},
									"scope": 1382,
									"src": "1500:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1043,
										"nodeType": "Block",
										"src": "1655:1246:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 938,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1758:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1758:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 935,
																				"name": "staketoken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 824,
																				"src": "1736:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 934,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 77,
																			"src": "1729:6:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 936,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1729:18:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 937,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 34,
																	"src": "1729:28:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 940,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1729:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 941,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 928,
																"src": "1772:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1729:50:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "42616c616e636520496e73756666696369656e74",
															"id": 943,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1781:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9be1f40e57c36cad304817e465a471f758cbc91162f0a9c1318089f897eaeb24",
																"typeString": "literal_string \"Balance Insufficient\""
															},
															"value": "Balance Insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9be1f40e57c36cad304817e465a471f758cbc91162f0a9c1318089f897eaeb24",
																"typeString": "literal_string \"Balance Insufficient\""
															}
														],
														"id": 933,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1721:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1721:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 945,
												"nodeType": "ExpressionStatement",
												"src": "1721:83:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 950,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1882:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 951,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1882:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 954,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1902:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakeContract_$1382",
																		"typeString": "contract StakeContract"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakeContract_$1382",
																		"typeString": "contract StakeContract"
																	}
																],
																"id": 953,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1894:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 952,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1894:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1894:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 956,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 928,
															"src": "1909:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 947,
																	"name": "staketoken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "1853:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 946,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "1846:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 948,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1846:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 949,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 171,
														"src": "1846:35:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1846:71:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 958,
												"nodeType": "ExpressionStatement",
												"src": "1846:71:5"
											},
											{
												"assignments": [
													960
												],
												"declarations": [
													{
														"constant": false,
														"id": 960,
														"mutability": "mutable",
														"name": "unClime_Reward_Token_Number",
														"nameLocation": "1991:27:5",
														"nodeType": "VariableDeclaration",
														"scope": 1043,
														"src": "1986:32:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 959,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1986:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 988,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "3331353336303030",
																	"id": 985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2164:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_31536000_by_1",
																		"typeString": "int_const 31536000"
																	},
																	"value": "31536000"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_31536000_by_1",
																		"typeString": "int_const 31536000"
																	}
																],
																"expression": {
																	"components": [
																		{
																			"arguments": [
																				{
																					"hexValue": "313030",
																					"id": 981,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2144:3:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_100_by_1",
																						"typeString": "int_const 100"
																					},
																					"value": "100"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_100_by_1",
																						"typeString": "int_const 100"
																					}
																				],
																				"expression": {
																					"arguments": [
																						{
																							"id": 978,
																							"name": "ratio",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 822,
																							"src": "2133:5:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"expression": {
																							"expression": {
																								"baseExpression": {
																									"id": 972,
																									"name": "User_Map",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 868,
																									"src": "2096:8:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																										"typeString": "mapping(address => struct StakeContract.User storage ref)"
																									}
																								},
																								"id": 975,
																								"indexExpression": {
																									"expression": {
																										"id": 973,
																										"name": "msg",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967281,
																										"src": "2105:3:5",
																										"typeDescriptions": {
																											"typeIdentifier": "t_magic_message",
																											"typeString": "msg"
																										}
																									},
																									"id": 974,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "sender",
																									"nodeType": "MemberAccess",
																									"src": "2105:10:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "2096:20:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_User_$841_storage",
																									"typeString": "struct StakeContract.User storage ref"
																								}
																							},
																							"id": 976,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "stakeNumber",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 832,
																							"src": "2096:32:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 977,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "mul",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 763,
																						"src": "2096:36:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																							"typeString": "function (uint256,uint256) pure returns (uint256)"
																						}
																					},
																					"id": 979,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2096:43:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 980,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "div",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 785,
																				"src": "2096:47:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 982,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2096:52:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 983,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2095:54:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "div",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 785,
																"src": "2095:68:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 986,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2095:78:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"components": [
																{
																	"arguments": [
																		{
																			"expression": {
																				"baseExpression": {
																					"id": 964,
																					"name": "User_Map",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 868,
																					"src": "2042:8:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																						"typeString": "mapping(address => struct StakeContract.User storage ref)"
																					}
																				},
																				"id": 967,
																				"indexExpression": {
																					"expression": {
																						"id": 965,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "2051:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 966,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "2051:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2042:20:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_User_$841_storage",
																					"typeString": "struct StakeContract.User storage ref"
																				}
																			},
																			"id": 968,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "last_Stake_Time",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 834,
																			"src": "2042:36:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"expression": {
																				"id": 961,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "2022:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 962,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "2022:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 963,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 735,
																		"src": "2022:19:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2022:57:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 970,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2021:59:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 763,
														"src": "2021:73:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2021:153:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1986:188:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 990,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2201:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2201:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 994,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2221:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakeContract_$1382",
																		"typeString": "contract StakeContract"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakeContract_$1382",
																		"typeString": "contract StakeContract"
																	}
																],
																"id": 993,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2213:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 992,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2213:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 995,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2213:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 996,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 928,
															"src": "2228:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 989,
														"name": "Trasfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 849,
														"src": "2193:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2193:43:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 998,
												"nodeType": "EmitStatement",
												"src": "2188:48:5"
											},
											{
												"expression": {
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 999,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2319:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1002,
															"indexExpression": {
																"expression": {
																	"id": 1000,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2328:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2328:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2319:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1003,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "last_totoken_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 836,
														"src": "2319:39:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1004,
														"name": "unClime_Reward_Token_Number",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 960,
														"src": "2362:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2319:70:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1006,
												"nodeType": "ExpressionStatement",
												"src": "2319:70:5"
											},
											{
												"expression": {
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1007,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2455:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1010,
															"indexExpression": {
																"expression": {
																	"id": 1008,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2464:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1009,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2464:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2455:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1011,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stakeNumber",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 832,
														"src": "2455:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1012,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "2491:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:43:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1014,
												"nodeType": "ExpressionStatement",
												"src": "2455:43:5"
											},
											{
												"expression": {
													"id": 1022,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1015,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2579:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1018,
															"indexExpression": {
																"expression": {
																	"id": 1016,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2588:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2588:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2579:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1019,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "last_Stake_Time",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 834,
														"src": "2579:36:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1020,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2618:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1021,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "2618:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2579:54:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1023,
												"nodeType": "ExpressionStatement",
												"src": "2579:54:5"
											},
											{
												"expression": {
													"id": 1026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1024,
														"name": "staketotal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 828,
														"src": "2696:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1025,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "2710:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2696:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1027,
												"nodeType": "ExpressionStatement",
												"src": "2696:21:5"
											},
											{
												"expression": {
													"id": 1038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1028,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2792:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1031,
															"indexExpression": {
																"expression": {
																	"id": 1029,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2801:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1030,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2801:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2792:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1032,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "last_totoken_Time",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 840,
														"src": "2792:38:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1033,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2833:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1036,
															"indexExpression": {
																"expression": {
																	"id": 1034,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2842:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1035,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2842:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2833:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1037,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "last_Stake_Time",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 834,
														"src": "2833:36:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2792:77:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1039,
												"nodeType": "ExpressionStatement",
												"src": "2792:77:5"
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2888:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"id": 1041,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2887:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 932,
												"id": 1042,
												"nodeType": "Return",
												"src": "2880:13:5"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 1044,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "1611:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1624:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "1619:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 927,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1619:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1618:14:5"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1044,
												"src": "1649:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 930,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1649:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1648:6:5"
									},
									"scope": 1382,
									"src": "1602:1299:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1198,
										"nodeType": "Block",
										"src": "2996:1631:5",
										"statements": [
											{
												"expression": {
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1049,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "3065:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1052,
															"indexExpression": {
																"expression": {
																	"id": 1050,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3074:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3074:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3065:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1053,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "whole_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 838,
														"src": "3065:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"components": [
																			{
																				"arguments": [
																					{
																						"hexValue": "3331353336303030",
																						"id": 1084,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3288:8:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_31536000_by_1",
																							"typeString": "int_const 31536000"
																						},
																						"value": "31536000"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_rational_31536000_by_1",
																							"typeString": "int_const 31536000"
																						}
																					],
																					"expression": {
																						"components": [
																							{
																								"arguments": [
																									{
																										"hexValue": "313030",
																										"id": 1080,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3278:3:5",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_100_by_1",
																											"typeString": "int_const 100"
																										},
																										"value": "100"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_100_by_1",
																											"typeString": "int_const 100"
																										}
																									],
																									"expression": {
																										"arguments": [
																											{
																												"id": 1077,
																												"name": "ratio",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 822,
																												"src": "3267:5:5",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											],
																											"expression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1071,
																														"name": "User_Map",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 868,
																														"src": "3230:8:5",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																															"typeString": "mapping(address => struct StakeContract.User storage ref)"
																														}
																													},
																													"id": 1074,
																													"indexExpression": {
																														"expression": {
																															"id": 1072,
																															"name": "msg",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 4294967281,
																															"src": "3239:3:5",
																															"typeDescriptions": {
																																"typeIdentifier": "t_magic_message",
																																"typeString": "msg"
																															}
																														},
																														"id": 1073,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"memberName": "sender",
																														"nodeType": "MemberAccess",
																														"src": "3239:10:5",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "3230:20:5",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_User_$841_storage",
																														"typeString": "struct StakeContract.User storage ref"
																													}
																												},
																												"id": 1075,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "stakeNumber",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 832,
																												"src": "3230:32:5",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"id": 1076,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberName": "mul",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 763,
																											"src": "3230:36:5",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																												"typeString": "function (uint256,uint256) pure returns (uint256)"
																											}
																										},
																										"id": 1078,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "3230:43:5",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"id": 1079,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "div",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 785,
																									"src": "3230:47:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																										"typeString": "function (uint256,uint256) pure returns (uint256)"
																									}
																								},
																								"id": 1081,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "3230:52:5",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1082,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3229:54:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1083,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "div",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 785,
																					"src": "3229:58:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1085,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3229:68:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1086,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3228:70:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"components": [
																			{
																				"arguments": [
																					{
																						"expression": {
																							"baseExpression": {
																								"id": 1063,
																								"name": "User_Map",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 868,
																								"src": "3175:8:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																									"typeString": "mapping(address => struct StakeContract.User storage ref)"
																								}
																							},
																							"id": 1066,
																							"indexExpression": {
																								"expression": {
																									"id": 1064,
																									"name": "msg",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967281,
																									"src": "3184:3:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_magic_message",
																										"typeString": "msg"
																									}
																								},
																								"id": 1065,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "sender",
																								"nodeType": "MemberAccess",
																								"src": "3184:10:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "3175:20:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_User_$841_storage",
																								"typeString": "struct StakeContract.User storage ref"
																							}
																						},
																						"id": 1067,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "last_Stake_Time",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 834,
																						"src": "3175:36:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"expression": {
																							"id": 1060,
																							"name": "block",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967292,
																							"src": "3155:5:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_block",
																								"typeString": "block"
																							}
																						},
																						"id": 1061,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "timestamp",
																						"nodeType": "MemberAccess",
																						"src": "3155:15:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1062,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sub",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 735,
																					"src": "3155:19:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1068,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3155:57:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1069,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3154:59:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1070,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 763,
																	"src": "3154:73:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1087,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3154:145:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 1054,
																		"name": "User_Map",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 868,
																		"src": "3100:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																			"typeString": "mapping(address => struct StakeContract.User storage ref)"
																		}
																	},
																	"id": 1057,
																	"indexExpression": {
																		"expression": {
																			"id": 1055,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3109:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1056,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3109:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3100:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_User_$841_storage",
																		"typeString": "struct StakeContract.User storage ref"
																	}
																},
																"id": 1058,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "last_totoken_ratio",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 836,
																"src": "3100:39:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 713,
															"src": "3100:53:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1088,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3100:200:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3065:235:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1090,
												"nodeType": "ExpressionStatement",
												"src": "3065:235:5"
											},
											{
												"assignments": [
													1092
												],
												"declarations": [
													{
														"constant": false,
														"id": 1092,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "3414:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 1198,
														"src": "3409:6:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1091,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3409:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1095,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1093,
														"name": "tokennumber",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1381,
														"src": "3419:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3419:13:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3409:23:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1097,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1092,
																"src": "3452:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1098,
																		"name": "User_Map",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 868,
																		"src": "3456:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																			"typeString": "mapping(address => struct StakeContract.User storage ref)"
																		}
																	},
																	"id": 1101,
																	"indexExpression": {
																		"expression": {
																			"id": 1099,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3465:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1100,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3465:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3456:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_User_$841_storage",
																		"typeString": "struct StakeContract.User storage ref"
																	}
																},
																"id": 1102,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "whole_ratio",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 838,
																"src": "3456:32:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3452:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "726577617264746f6b656e20496e73756666696369656e74",
															"id": 1104,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3489:26:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd",
																"typeString": "literal_string \"rewardtoken Insufficient\""
															},
															"value": "rewardtoken Insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd",
																"typeString": "literal_string \"rewardtoken Insufficient\""
															}
														],
														"id": 1096,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3443:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3443:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1106,
												"nodeType": "ExpressionStatement",
												"src": "3443:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1111,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3633:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3633:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1113,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "3645:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1116,
																"indexExpression": {
																	"expression": {
																		"id": 1114,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3654:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1115,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3654:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3645:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1117,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "whole_ratio",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 838,
															"src": "3645:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1108,
																	"name": "rewardtoken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 826,
																	"src": "3607:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1107,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "3600:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3600:19:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "3600:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3600:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1119,
												"nodeType": "ExpressionStatement",
												"src": "3600:78:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1121,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3706:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3706:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1123,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "3718:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1126,
																"indexExpression": {
																	"expression": {
																		"id": 1124,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3727:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3727:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3718:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1127,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "whole_ratio",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 838,
															"src": "3718:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1120,
														"name": "transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 863,
														"src": "3697:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3697:54:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1129,
												"nodeType": "EmitStatement",
												"src": "3692:59:5"
											},
											{
												"expression": {
													"id": 1136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1130,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "3828:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1133,
															"indexExpression": {
																"expression": {
																	"id": 1131,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3837:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3837:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3828:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1134,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "whole_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 838,
														"src": "3828:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1135,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3863:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3828:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1137,
												"nodeType": "ExpressionStatement",
												"src": "3828:36:5"
											},
											{
												"expression": {
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1138,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "3950:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1141,
															"indexExpression": {
																"expression": {
																	"id": 1139,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3959:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1140,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3959:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3950:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1142,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "last_totoken_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 836,
														"src": "3950:39:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1143,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3992:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3950:43:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1145,
												"nodeType": "ExpressionStatement",
												"src": "3950:43:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1147,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1092,
																"src": "4111:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1148,
																		"name": "User_Map",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 868,
																		"src": "4115:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																			"typeString": "mapping(address => struct StakeContract.User storage ref)"
																		}
																	},
																	"id": 1151,
																	"indexExpression": {
																		"expression": {
																			"id": 1149,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4124:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4124:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4115:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_User_$841_storage",
																		"typeString": "struct StakeContract.User storage ref"
																	}
																},
																"id": 1152,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "stakeNumber",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 832,
																"src": "4115:32:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4111:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "726577617264746f6b656e20496e73756666696369656e74",
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4148:26:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd",
																"typeString": "literal_string \"rewardtoken Insufficient\""
															},
															"value": "rewardtoken Insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd",
																"typeString": "literal_string \"rewardtoken Insufficient\""
															}
														],
														"id": 1146,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4102:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4102:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1156,
												"nodeType": "ExpressionStatement",
												"src": "4102:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1161,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4273:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4273:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1163,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "4285:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1166,
																"indexExpression": {
																	"expression": {
																		"id": 1164,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4294:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1165,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4294:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4285:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1167,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stakeNumber",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 832,
															"src": "4285:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1158,
																	"name": "staketoken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "4248:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1157,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "4241:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4241:18:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "4241:31:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4241:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1169,
												"nodeType": "ExpressionStatement",
												"src": "4241:77:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1171,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4344:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4344:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1173,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "4356:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1176,
																"indexExpression": {
																	"expression": {
																		"id": 1174,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4365:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4365:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4356:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1177,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stakeNumber",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 832,
															"src": "4356:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1170,
														"name": "transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 863,
														"src": "4335:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4335:54:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1179,
												"nodeType": "EmitStatement",
												"src": "4330:59:5"
											},
											{
												"expression": {
													"id": 1186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1180,
														"name": "staketotal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 828,
														"src": "4460:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1181,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "4474:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1184,
															"indexExpression": {
																"expression": {
																	"id": 1182,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4483:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4483:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4474:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "stakeNumber",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 832,
														"src": "4474:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4460:46:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1187,
												"nodeType": "ExpressionStatement",
												"src": "4460:46:5"
											},
											{
												"expression": {
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1188,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "4555:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1191,
															"indexExpression": {
																"expression": {
																	"id": 1189,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4564:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4564:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4555:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1192,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "stakeNumber",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 832,
														"src": "4555:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1193,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4590:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4555:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "4555:36:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1196,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4615:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1048,
												"id": 1197,
												"nodeType": "Return",
												"src": "4608:11:5"
											}
										]
									},
									"functionSelector": "fb5bca7a",
									"id": 1199,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "harvestwithDraw",
									"nameLocation": "2956:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2971:2:5"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1199,
												"src": "2990:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1046,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2990:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2989:6:5"
									},
									"scope": 1382,
									"src": "2947:1680:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1312,
										"nodeType": "Block",
										"src": "4707:1123:5",
										"statements": [
											{
												"expression": {
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1204,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "4777:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1207,
															"indexExpression": {
																"expression": {
																	"id": 1205,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4786:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1206,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4786:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4777:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1208,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "whole_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 838,
														"src": "4777:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"components": [
																			{
																				"arguments": [
																					{
																						"hexValue": "3331353336303030",
																						"id": 1239,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5000:8:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_31536000_by_1",
																							"typeString": "int_const 31536000"
																						},
																						"value": "31536000"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_rational_31536000_by_1",
																							"typeString": "int_const 31536000"
																						}
																					],
																					"expression": {
																						"components": [
																							{
																								"arguments": [
																									{
																										"hexValue": "313030",
																										"id": 1235,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "4990:3:5",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_100_by_1",
																											"typeString": "int_const 100"
																										},
																										"value": "100"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_100_by_1",
																											"typeString": "int_const 100"
																										}
																									],
																									"expression": {
																										"arguments": [
																											{
																												"id": 1232,
																												"name": "ratio",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 822,
																												"src": "4979:5:5",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											],
																											"expression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1226,
																														"name": "User_Map",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 868,
																														"src": "4942:8:5",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																															"typeString": "mapping(address => struct StakeContract.User storage ref)"
																														}
																													},
																													"id": 1229,
																													"indexExpression": {
																														"expression": {
																															"id": 1227,
																															"name": "msg",
																															"nodeType": "Identifier",
																															"overloadedDeclarations": [],
																															"referencedDeclaration": 4294967281,
																															"src": "4951:3:5",
																															"typeDescriptions": {
																																"typeIdentifier": "t_magic_message",
																																"typeString": "msg"
																															}
																														},
																														"id": 1228,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"memberName": "sender",
																														"nodeType": "MemberAccess",
																														"src": "4951:10:5",
																														"typeDescriptions": {
																															"typeIdentifier": "t_address",
																															"typeString": "address"
																														}
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "4942:20:5",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_User_$841_storage",
																														"typeString": "struct StakeContract.User storage ref"
																													}
																												},
																												"id": 1230,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberName": "stakeNumber",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 832,
																												"src": "4942:32:5",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"id": 1231,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberName": "mul",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 763,
																											"src": "4942:36:5",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																												"typeString": "function (uint256,uint256) pure returns (uint256)"
																											}
																										},
																										"id": 1233,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "4942:43:5",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"id": 1234,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberName": "div",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 785,
																									"src": "4942:47:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																										"typeString": "function (uint256,uint256) pure returns (uint256)"
																									}
																								},
																								"id": 1236,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4942:52:5",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1237,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "4941:54:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1238,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "div",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 785,
																					"src": "4941:58:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1240,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4941:68:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1241,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4940:70:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"components": [
																			{
																				"arguments": [
																					{
																						"expression": {
																							"baseExpression": {
																								"id": 1218,
																								"name": "User_Map",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 868,
																								"src": "4887:8:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																									"typeString": "mapping(address => struct StakeContract.User storage ref)"
																								}
																							},
																							"id": 1221,
																							"indexExpression": {
																								"expression": {
																									"id": 1219,
																									"name": "msg",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967281,
																									"src": "4896:3:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_magic_message",
																										"typeString": "msg"
																									}
																								},
																								"id": 1220,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "sender",
																								"nodeType": "MemberAccess",
																								"src": "4896:10:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "4887:20:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_User_$841_storage",
																								"typeString": "struct StakeContract.User storage ref"
																							}
																						},
																						"id": 1222,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "last_Stake_Time",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 834,
																						"src": "4887:36:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"expression": {
																							"id": 1215,
																							"name": "block",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967292,
																							"src": "4867:5:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_block",
																								"typeString": "block"
																							}
																						},
																						"id": 1216,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "timestamp",
																						"nodeType": "MemberAccess",
																						"src": "4867:15:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1217,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sub",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 735,
																					"src": "4867:19:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																						"typeString": "function (uint256,uint256) pure returns (uint256)"
																					}
																				},
																				"id": 1223,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "4867:57:5",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1224,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4866:59:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "mul",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 763,
																	"src": "4866:73:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																		"typeString": "function (uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 1242,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4866:145:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 1209,
																		"name": "User_Map",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 868,
																		"src": "4812:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																			"typeString": "mapping(address => struct StakeContract.User storage ref)"
																		}
																	},
																	"id": 1212,
																	"indexExpression": {
																		"expression": {
																			"id": 1210,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4821:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4821:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4812:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_User_$841_storage",
																		"typeString": "struct StakeContract.User storage ref"
																	}
																},
																"id": 1213,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "last_totoken_ratio",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 836,
																"src": "4812:39:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 713,
															"src": "4812:53:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1243,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4812:200:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4777:235:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1245,
												"nodeType": "ExpressionStatement",
												"src": "4777:235:5"
											},
											{
												"assignments": [
													1247
												],
												"declarations": [
													{
														"constant": false,
														"id": 1247,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "5030:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 1312,
														"src": "5025:6:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1246,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "5025:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1250,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1248,
														"name": "tokennumber",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1381,
														"src": "5035:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5035:13:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5025:23:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1258,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1252,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1247,
																"src": "5068:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1253,
																		"name": "User_Map",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 868,
																		"src": "5072:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																			"typeString": "mapping(address => struct StakeContract.User storage ref)"
																		}
																	},
																	"id": 1256,
																	"indexExpression": {
																		"expression": {
																			"id": 1254,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5081:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5081:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5072:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_User_$841_storage",
																		"typeString": "struct StakeContract.User storage ref"
																	}
																},
																"id": 1257,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "whole_ratio",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 838,
																"src": "5072:32:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5068:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "726577617264746f6b656e20496e73756666696369656e74",
															"id": 1259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5105:26:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd",
																"typeString": "literal_string \"rewardtoken Insufficient\""
															},
															"value": "rewardtoken Insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7fc68cf9298db26b1dda4a4d696aa5107c30f1832986b8680c628bbb4cbbd6bd",
																"typeString": "literal_string \"rewardtoken Insufficient\""
															}
														],
														"id": 1251,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5059:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5059:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1261,
												"nodeType": "ExpressionStatement",
												"src": "5059:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1266,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5251:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5251:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1268,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "5263:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1271,
																"indexExpression": {
																	"expression": {
																		"id": 1269,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5272:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1270,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5272:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5263:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1272,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "whole_ratio",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 838,
															"src": "5263:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1263,
																	"name": "rewardtoken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 826,
																	"src": "5225:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1262,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "5218:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1264,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5218:19:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 145,
														"src": "5218:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5218:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1274,
												"nodeType": "ExpressionStatement",
												"src": "5218:78:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1276,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5334:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5334:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1278,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "5346:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1281,
																"indexExpression": {
																	"expression": {
																		"id": 1279,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "5355:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "5355:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5346:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1282,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "whole_ratio",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 838,
															"src": "5346:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1275,
														"name": "transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 863,
														"src": "5325:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5325:54:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1284,
												"nodeType": "EmitStatement",
												"src": "5320:59:5"
											},
											{
												"expression": {
													"id": 1291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1285,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "5456:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1288,
															"indexExpression": {
																"expression": {
																	"id": 1286,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5465:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1287,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5465:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5456:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1289,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "whole_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 838,
														"src": "5456:32:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1290,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5491:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5456:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1292,
												"nodeType": "ExpressionStatement",
												"src": "5456:36:5"
											},
											{
												"expression": {
													"id": 1299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1293,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "5579:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1296,
															"indexExpression": {
																"expression": {
																	"id": 1294,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5588:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5588:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5579:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1297,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "last_totoken_ratio",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 836,
														"src": "5579:39:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1298,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5621:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5579:43:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1300,
												"nodeType": "ExpressionStatement",
												"src": "5579:43:5"
											},
											{
												"expression": {
													"id": 1308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1301,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "5740:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1304,
															"indexExpression": {
																"expression": {
																	"id": 1302,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5749:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5749:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5740:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1305,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "last_totoken_Time",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 840,
														"src": "5740:38:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1306,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "5781:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "5781:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5740:56:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1309,
												"nodeType": "ExpressionStatement",
												"src": "5740:56:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5814:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1203,
												"id": 1311,
												"nodeType": "Return",
												"src": "5807:11:5"
											}
										]
									},
									"functionSelector": "4641257d",
									"id": 1313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "harvest",
									"nameLocation": "4675:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4682:2:5"
									},
									"returnParameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "4701:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1201,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4701:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4700:6:5"
									},
									"scope": 1382,
									"src": "4666:1164:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "5931:427:5",
										"statements": [
											{
												"assignments": [
													1319
												],
												"declarations": [
													{
														"constant": false,
														"id": 1319,
														"mutability": "mutable",
														"name": "newtime",
														"nameLocation": "6017:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1360,
														"src": "6012:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1318,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6012:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1328,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1320,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6027:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1321,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6027:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"expression": {
															"baseExpression": {
																"id": 1322,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "6045:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																	"typeString": "mapping(address => struct StakeContract.User storage ref)"
																}
															},
															"id": 1325,
															"indexExpression": {
																"expression": {
																	"id": 1323,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6054:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6054:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6045:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$841_storage",
																"typeString": "struct StakeContract.User storage ref"
															}
														},
														"id": 1326,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "last_totoken_Time",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 840,
														"src": "6045:38:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6027:56:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6012:71:5"
											},
											{
												"assignments": [
													1330
												],
												"declarations": [
													{
														"constant": false,
														"id": 1330,
														"mutability": "mutable",
														"name": "newTotokenRatione",
														"nameLocation": "6145:17:5",
														"nodeType": "VariableDeclaration",
														"scope": 1360,
														"src": "6140:22:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1329,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6140:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1357,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1351,
																	"name": "User_Map",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "6273:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																		"typeString": "mapping(address => struct StakeContract.User storage ref)"
																	}
																},
																"id": 1354,
																"indexExpression": {
																	"expression": {
																		"id": 1352,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "6282:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "6282:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6273:20:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_User_$841_storage",
																	"typeString": "struct StakeContract.User storage ref"
																}
															},
															"id": 1355,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "last_totoken_ratio",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 836,
															"src": "6273:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"components": [
																		{
																			"arguments": [
																				{
																					"hexValue": "3331353336303030",
																					"id": 1346,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6247:8:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_31536000_by_1",
																						"typeString": "int_const 31536000"
																					},
																					"value": "31536000"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_31536000_by_1",
																						"typeString": "int_const 31536000"
																					}
																				],
																				"expression": {
																					"components": [
																						{
																							"arguments": [
																								{
																									"hexValue": "313030",
																									"id": 1342,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "6237:3:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_100_by_1",
																										"typeString": "int_const 100"
																									},
																									"value": "100"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_100_by_1",
																										"typeString": "int_const 100"
																									}
																								],
																								"expression": {
																									"arguments": [
																										{
																											"id": 1339,
																											"name": "ratio",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 822,
																											"src": "6226:5:5",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										],
																										"expression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1333,
																													"name": "User_Map",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 868,
																													"src": "6189:8:5",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$841_storage_$",
																														"typeString": "mapping(address => struct StakeContract.User storage ref)"
																													}
																												},
																												"id": 1336,
																												"indexExpression": {
																													"expression": {
																														"id": 1334,
																														"name": "msg",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 4294967281,
																														"src": "6198:3:5",
																														"typeDescriptions": {
																															"typeIdentifier": "t_magic_message",
																															"typeString": "msg"
																														}
																													},
																													"id": 1335,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": false,
																													"lValueRequested": false,
																													"memberName": "sender",
																													"nodeType": "MemberAccess",
																													"src": "6198:10:5",
																													"typeDescriptions": {
																														"typeIdentifier": "t_address",
																														"typeString": "address"
																													}
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "6189:20:5",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_User_$841_storage",
																													"typeString": "struct StakeContract.User storage ref"
																												}
																											},
																											"id": 1337,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberName": "stakeNumber",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 832,
																											"src": "6189:32:5",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"id": 1338,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "mul",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 763,
																										"src": "6189:36:5",
																										"typeDescriptions": {
																											"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																											"typeString": "function (uint256,uint256) pure returns (uint256)"
																										}
																									},
																									"id": 1340,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "functionCall",
																									"lValueRequested": false,
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "6189:43:5",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 1341,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "div",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 785,
																								"src": "6189:47:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																									"typeString": "function (uint256,uint256) pure returns (uint256)"
																								}
																							},
																							"id": 1343,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6189:52:5",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1344,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "6188:54:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 1345,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "div",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 785,
																				"src": "6188:58:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 1347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6188:68:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1348,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6187:70:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1331,
																	"name": "newtime",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1319,
																	"src": "6165:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1332,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 763,
																"src": "6165:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6165:93:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 713,
														"src": "6165:107:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6165:148:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6140:173:5"
											},
											{
												"expression": {
													"id": 1358,
													"name": "newTotokenRatione",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1330,
													"src": "6331:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1317,
												"id": 1359,
												"nodeType": "Return",
												"src": "6324:24:5"
											}
										]
									},
									"functionSelector": "529aca49",
									"id": 1361,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "newTotokenRatio",
									"nameLocation": "5886:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5901:2:5"
									},
									"returnParameters": {
										"id": 1317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1316,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1361,
												"src": "5925:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1315,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5925:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5924:6:5"
									},
									"scope": 1382,
									"src": "5877:481:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1380,
										"nodeType": "Block",
										"src": "6455:127:5",
										"statements": [
											{
												"assignments": [
													1367
												],
												"declarations": [
													{
														"constant": false,
														"id": 1367,
														"mutability": "mutable",
														"name": "_rewardtokennumber",
														"nameLocation": "6471:18:5",
														"nodeType": "VariableDeclaration",
														"scope": 1380,
														"src": "6466:23:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1366,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6466:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1377,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1374,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6531:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_StakeContract_$1382",
																		"typeString": "contract StakeContract"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_StakeContract_$1382",
																		"typeString": "contract StakeContract"
																	}
																],
																"id": 1373,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6523:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1372,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6523:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6523:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1369,
																	"name": "rewardtoken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 826,
																	"src": "6500:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1368,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "6493:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6493:19:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1371,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 34,
														"src": "6493:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6493:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6466:71:5"
											},
											{
												"expression": {
													"id": 1378,
													"name": "_rewardtokennumber",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1367,
													"src": "6556:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1365,
												"id": 1379,
												"nodeType": "Return",
												"src": "6549:25:5"
											}
										]
									},
									"functionSelector": "9ba7d1ce",
									"id": 1381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokennumber",
									"nameLocation": "6414:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1362,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6425:2:5"
									},
									"returnParameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1381,
												"src": "6449:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1363,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6449:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6448:6:5"
									},
									"scope": 1382,
									"src": "6405:177:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1383,
							"src": "169:6418:5",
							"usedErrors": []
						}
					],
					"src": "36:6551:5"
				},
				"id": 5
			}
		}
	}
}