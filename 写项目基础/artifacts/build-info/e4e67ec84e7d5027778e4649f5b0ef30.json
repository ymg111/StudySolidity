{
	"id": "e4e67ec84e7d5027778e4649f5b0ef30",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.15",
	"solcLongVersion": "0.8.15+commit.e14f2714",
	"input": {
		"language": "Solidity",
		"sources": {
			"写项目基础/写个蓝图计划.sol": {
				"content": " // SPDX-License-Identifier: MIT  \r\n\r\npragma solidity ^0.8.7;  \r\nimport \"../safeMath/safemath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract BluePlan {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // 每秒产出利息\r\n    uint public interest;\r\n    address public rewardToken;\r\n    address public owner;\r\n    address[] public rewarduser;\r\n    \r\n    struct User{\r\n        uint userReward;\r\n        bool userState;\r\n        uint userRewardStartTime;\r\n    }\r\n\r\n    mapping(address => User) public User_Map;\r\n\r\n    constructor (uint _interest, address _rewardToken) {\r\n        interest = _interest;\r\n        rewardToken = _rewardToken;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function SetReward(address[] memory _rewarduser) public returns (bool) {\r\n        rewarduser = _rewarduser;\r\n        for (uint i; i < rewarduser.length; i++){\r\n            User_Map[_rewarduser[i]].userState = true;\r\n            User_Map[_rewarduser[i]].userRewardStartTime = block.timestamp;\r\n        }\r\n        return(true);\r\n    }\r\n\r\n    function GetRewardUser() public view returns (address[] memory) {\r\n        return rewarduser;\r\n    }\r\n\r\n    function SetUserReward() public  returns (uint) {\r\n        uint _userReward = (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest);\r\n        User_Map[msg.sender].userReward = _userReward;\r\n        return _userReward;\r\n\r\n    }\r\n\r\n    function getUserReward() public view returns(uint) {\r\n        uint _getuserReward = (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest);\r\n\r\n    }\r\n\r\n\r\n}\r\n// 5208333333333\r\n// [\"0x70bbEa39652CA42C63F70531f8526B35575615A0\"]"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"safeMath/safemath.sol": {
				"content": " // SPDX-License-Identifier: MIT  \r\npragma solidity ^0.8.6;\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract math {\r\n    using SafeMath for uint;\r\n\r\n    function matha(uint _a, uint _b) public view returns (uint)  {\r\n        uint c = _a.add(_b);\r\n        return c;\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xB2 0xE2 0xE2 CALLVALUE 0xE9 SWAP4 PUSH32 0x11FBD7B24B6F5ACB84E9934EE08829F0A74702ECE334AEE64736F6C63430008 0xF STOP CALLER ",
							"sourceMap": "707:3748:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:2;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MUL 0xB2 0xE2 0xE2 CALLVALUE 0xE9 SWAP4 PUSH32 0x11FBD7B24B6F5ACB84E9934EE08829F0A74702ECE334AEE64736F6C63430008 0xF STOP CALLER ",
							"sourceMap": "707:3748:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122002b2e2e234e9937f011fbd7b24b6f5acb84e9934ee08829f0a74702ece334aee64736f6c634300080f0033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"写项目基础/写个蓝图计划.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6\",\"dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8305  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8305  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 DIV 0xB8 BALANCE 0xAA 0xC6 DUP10 ADDMOD DUP14 0xED DUP7 EXTCODEHASH EQ DUP6 CREATE CREATE2 RETURN 0xC6 DUP15 0xFC 0xC3 SWAP16 0xD7 PUSH21 0xC35C7D3466935D9164736F6C634300080F00330000 ",
							"sourceMap": "194:8111:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8111:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 DIV 0xB8 BALANCE 0xAA 0xC6 DUP10 ADDMOD DUP14 0xED DUP7 EXTCODEHASH EQ DUP6 CREATE CREATE2 RETURN 0xC6 DUP15 0xFC 0xC3 SWAP16 0xD7 PUSH21 0xC35C7D3466935D9164736F6C634300080F00330000 ",
							"sourceMap": "194:8111:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8305,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209c04b831aac689088ded863f1485f0f5f3c68efcc39fd774c35c7d3466935d9164736f6c634300080f0033",
									".code": [
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8305,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"写项目基础/写个蓝图计划.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"safeMath/safemath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"safeMath/safemath.sol\":63:577  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"safeMath/safemath.sol\":63:577  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0x4C 0xCA PUSH18 0xDD0FD40E7FD306B93D7B5BB17B40D498C21B 0xD5 ADD SAR 0xBF 0xDF 0x2C SELFBALANCE 0xE9 0x5C 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "63:514:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;63:514:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0x4C 0xCA PUSH18 0xDD0FD40E7FD306B93D7B5BB17B40D498C21B 0xD5 ADD SAR 0xBF 0xDF 0x2C SELFBALANCE 0xE9 0x5C 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
							"sourceMap": "63:514:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 63,
									"end": 577,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b44cca71dd0fd40e7fd306b93d7b5bb17b40d498c21bd5011dbfdf2c47e95cb264736f6c634300080f0033",
									".code": [
										{
											"begin": 63,
											"end": 577,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 63,
											"end": 577,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 63,
											"end": 577,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 63,
											"end": 577,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 63,
											"end": 577,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"写项目基础/写个蓝图计划.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"safeMath/safemath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"safeMath/safemath.sol\":{\"keccak256\":\"0x97fc4ad193b2a914edb17b5e2e6ca80c5afb817413db1da916fc00694960325a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6018ff050520f0291861aa0b68d6e9369a1e46e55cdd7fe95afac6eae3ff8274\",\"dweb:/ipfs/QmYaYCoStbzohrcbL4qdL4h93DJ8UTyhwJCinnKSb7KUBr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"math": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_a",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_b",
									"type": "uint256"
								}
							],
							"name": "matha",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"safeMath/safemath.sol\":583:757  contract math {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"safeMath/safemath.sol\":583:757  contract math {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x803ab3a9\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"safeMath/safemath.sol\":636:754  function matha(uint _a, uint _b) public view returns (uint)  {... */\n    tag_3:\n      tag_4\n      tag_5\n      calldatasize\n      0x04\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n        /* \"#utility.yul\":413:438   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":401:403   */\n      0x20\n        /* \"#utility.yul\":386:404   */\n      add\n        /* \"safeMath/safemath.sol\":636:754  function matha(uint _a, uint _b) public view returns (uint)  {... */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"safeMath/safemath.sol\":690:694  uint */\n      0x00\n      dup1\n        /* \"safeMath/safemath.sol\":717:727  _a.add(_b) */\n      tag_11\n        /* \"safeMath/safemath.sol\":717:719  _a */\n      dup5\n        /* \"safeMath/safemath.sol\":724:726  _b */\n      dup5\n        /* \"safeMath/safemath.sol\":717:723  _a.add */\n      tag_12\n        /* \"safeMath/safemath.sol\":717:727  _a.add(_b) */\n      jump\t// in\n    tag_11:\n        /* \"safeMath/safemath.sol\":708:727  uint c = _a.add(_b) */\n      swap2\n      pop\n      pop\n        /* \"safeMath/safemath.sol\":636:754  function matha(uint _a, uint _b) public view returns (uint)  {... */\n    tag_10:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"safeMath/safemath.sol\":87:201  function add(uint a, uint b) internal pure returns (uint c) {... */\n    tag_12:\n        /* \"safeMath/safemath.sol\":139:145  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":162:167  a + b */\n      tag_14\n        /* \"safeMath/safemath.sol\":166:167  b */\n      dup3\n        /* \"safeMath/safemath.sol\":162:163  a */\n      dup5\n        /* \"safeMath/safemath.sol\":162:167  a + b */\n      tag_15\n      jump\t// in\n    tag_14:\n        /* \"safeMath/safemath.sol\":158:167  c = a + b */\n      swap1\n      pop\n        /* \"safeMath/safemath.sol\":191:192  a */\n      dup3\n        /* \"safeMath/safemath.sol\":186:187  c */\n      dup2\n        /* \"safeMath/safemath.sol\":186:192  c >= a */\n      lt\n      iszero\n        /* \"safeMath/safemath.sol\":178:193  require(c >= a) */\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n        /* \"#utility.yul\":14:262   */\n    tag_6:\n        /* \"#utility.yul\":82:88   */\n      0x00\n        /* \"#utility.yul\":90:96   */\n      dup1\n        /* \"#utility.yul\":143:145   */\n      0x40\n        /* \"#utility.yul\":131:140   */\n      dup4\n        /* \"#utility.yul\":122:129   */\n      dup6\n        /* \"#utility.yul\":118:141   */\n      sub\n        /* \"#utility.yul\":114:146   */\n      slt\n        /* \"#utility.yul\":111:163   */\n      iszero\n      tag_19\n      jumpi\n        /* \"#utility.yul\":159:160   */\n      0x00\n        /* \"#utility.yul\":156:157   */\n      dup1\n        /* \"#utility.yul\":149:161   */\n      revert\n        /* \"#utility.yul\":111:163   */\n    tag_19:\n      pop\n      pop\n        /* \"#utility.yul\":182:205   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":252:254   */\n      0x20\n        /* \"#utility.yul\":237:255   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":224:256   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":14:262   */\n      jump\t// out\n        /* \"#utility.yul\":449:674   */\n    tag_15:\n        /* \"#utility.yul\":489:492   */\n      0x00\n        /* \"#utility.yul\":520:521   */\n      dup3\n        /* \"#utility.yul\":516:522   */\n      not\n        /* \"#utility.yul\":513:514   */\n      dup3\n        /* \"#utility.yul\":510:523   */\n      gt\n        /* \"#utility.yul\":507:643   */\n      iszero\n      tag_22\n      jumpi\n        /* \"#utility.yul\":565:575   */\n      0x4e487b71\n        /* \"#utility.yul\":560:563   */\n      0xe0\n        /* \"#utility.yul\":556:576   */\n      shl\n        /* \"#utility.yul\":553:554   */\n      0x00\n        /* \"#utility.yul\":546:577   */\n      mstore\n        /* \"#utility.yul\":600:604   */\n      0x11\n        /* \"#utility.yul\":597:598   */\n      0x04\n        /* \"#utility.yul\":590:605   */\n      mstore\n        /* \"#utility.yul\":628:632   */\n      0x24\n        /* \"#utility.yul\":625:626   */\n      0x00\n        /* \"#utility.yul\":618:633   */\n      revert\n        /* \"#utility.yul\":507:643   */\n    tag_22:\n      pop\n        /* \"#utility.yul\":659:668   */\n      add\n      swap1\n        /* \"#utility.yul\":449:674   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063803ab3a914602d575b600080fd5b603c6038366004607b565b604e565b60405190815260200160405180910390f35b600080605984846063565b9150505b92915050565b6000606d8284609c565b905082811015605d57600080fd5b60008060408385031215608d57600080fd5b50508035926020909101359150565b6000821982111560bc57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF7 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x803AB3A9 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x38 CALLDATASIZE PUSH1 0x4 PUSH1 0x7B JUMP JUMPDEST PUSH1 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x59 DUP5 DUP5 PUSH1 0x63 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D DUP3 DUP5 PUSH1 0x9C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH1 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH1 0xBC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 0xD6 0x4C 0xDB 0x2A 0xBD MUL JUMPI SSTORE GT SWAP12 SWAP1 JUMPI SMOD NUMBER POP 0xBF 0xD3 CALLDATACOPY 0xF8 0xB3 0xB3 ADDMOD 0x24 PUSH10 0x59218283E4B82864736F PUSH13 0x634300080F0033000000000000 ",
							"sourceMap": "583:174:4:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@add_713": {
									"entryPoint": 99,
									"id": 713,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@matha_808": {
									"entryPoint": 78,
									"id": 808,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 123,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 156,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:676:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "101:161:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "147:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "156:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "159:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "149:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "149:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "149:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "122:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "131:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "118:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "118:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "143:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "114:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:32:6"
															},
															"nodeType": "YulIf",
															"src": "111:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "172:33:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "195:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "182:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "182:23:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "172:6:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "214:42:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "241:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "252:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "237:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "237:18:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "224:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "224:32:6"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "214:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "59:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "70:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "82:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "90:6:6",
														"type": ""
													}
												],
												"src": "14:248:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "368:76:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "378:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "390:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "401:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "386:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "386:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "378:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "420:9:6"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "431:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "413:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "413:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "413:25:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "337:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "348:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "359:4:6",
														"type": ""
													}
												],
												"src": "267:177:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "497:177:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "532:111:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "553:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "560:3:6",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "565:10:6",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "556:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "556:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "546:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "546:31:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "546:31:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "597:1:6",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "600:4:6",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "590:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "590:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "590:15:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "625:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "628:4:6",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "618:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "618:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "618:15:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "513:1:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "520:1:6"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "516:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "516:6:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "510:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "510:13:6"
															},
															"nodeType": "YulIf",
															"src": "507:136:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "652:16:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "663:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "666:1:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "659:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "659:9:6"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "652:3:6"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "480:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "483:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "489:3:6",
														"type": ""
													}
												],
												"src": "449:225:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063803ab3a914602d575b600080fd5b603c6038366004607b565b604e565b60405190815260200160405180910390f35b600080605984846063565b9150505b92915050565b6000606d8284609c565b905082811015605d57600080fd5b60008060408385031215608d57600080fd5b50508035926020909101359150565b6000821982111560bc57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x803AB3A9 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3C PUSH1 0x38 CALLDATASIZE PUSH1 0x4 PUSH1 0x7B JUMP JUMPDEST PUSH1 0x4E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x59 DUP5 DUP5 PUSH1 0x63 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D DUP3 DUP5 PUSH1 0x9C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH1 0x5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH1 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH1 0xBC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 0xD6 0x4C 0xDB 0x2A 0xBD MUL JUMPI SSTORE GT SWAP12 SWAP1 JUMPI SMOD NUMBER POP 0xBF 0xD3 CALLDATACOPY 0xF8 0xB3 0xB3 ADDMOD 0x24 PUSH10 0x59218283E4B82864736F PUSH13 0x634300080F0033000000000000 ",
							"sourceMap": "583:174:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;636:118;;;;;;:::i;:::-;;:::i;:::-;;;413:25:6;;;401:2;386:18;636:118:4;;;;;;;;690:4;;717:10;:2;724;717:6;:10::i;:::-;708:19;-1:-1:-1;;636:118:4;;;;;:::o;87:114::-;139:6;162:5;166:1;162;:5;:::i;:::-;158:9;;191:1;186;:6;;178:15;;;;;14:248:6;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:6;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:6:o;449:225::-;489:3;520:1;516:6;513:1;510:13;507:136;;;565:10;560:3;556:20;553:1;546:31;600:4;597:1;590:15;628:4;625:1;618:15;507:136;-1:-1:-1;659:9:6;;449:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "49400",
								"executionCost": "99",
								"totalCost": "49499"
							},
							"external": {
								"matha(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 583,
									"end": 757,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 583,
									"end": 757,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a8d64cdb2abd025755119b9057074350bfd337f8b3b308246959218283e4b82864736f6c634300080f0033",
									".code": [
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "803AB3A9"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 583,
											"end": 757,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 583,
											"end": 757,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 636,
											"end": 754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 636,
											"end": 754,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 413,
											"end": 438,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 413,
											"end": 438,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 413,
											"end": 438,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 401,
											"end": 403,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 386,
											"end": 404,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 636,
											"end": 754,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 690,
											"end": 694,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 690,
											"end": 694,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 717,
											"end": 727,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 717,
											"end": 719,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 724,
											"end": 726,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 717,
											"end": 723,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 717,
											"end": 727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 717,
											"end": 727,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 717,
											"end": 727,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 708,
											"end": 727,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 636,
											"end": 754,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 636,
											"end": 754,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 636,
											"end": 754,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 87,
											"end": 201,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 87,
											"end": 201,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 139,
											"end": 145,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 162,
											"end": 167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 166,
											"end": 167,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 162,
											"end": 163,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 162,
											"end": 167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 162,
											"end": 167,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 162,
											"end": 167,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 162,
											"end": 167,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 158,
											"end": 167,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 158,
											"end": 167,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 191,
											"end": 192,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 186,
											"end": 187,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 186,
											"end": 192,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 186,
											"end": 192,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 178,
											"end": 193,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 178,
											"end": 193,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 178,
											"end": 193,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 14,
											"end": 262,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 14,
											"end": 262,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 82,
											"end": 88,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 90,
											"end": 96,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 143,
											"end": 145,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 131,
											"end": 140,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 122,
											"end": 129,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 118,
											"end": 141,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 114,
											"end": 146,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 111,
											"end": 163,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 111,
											"end": 163,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 111,
											"end": 163,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 159,
											"end": 160,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 156,
											"end": 157,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 149,
											"end": 161,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 111,
											"end": 163,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 111,
											"end": 163,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 182,
											"end": 205,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 182,
											"end": 205,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 182,
											"end": 205,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 252,
											"end": 254,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 237,
											"end": 255,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 237,
											"end": 255,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 237,
											"end": 255,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 224,
											"end": 256,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 224,
											"end": 256,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 262,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 449,
											"end": 674,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 449,
											"end": 674,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 489,
											"end": 492,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 520,
											"end": 521,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 516,
											"end": 522,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 513,
											"end": 514,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 510,
											"end": 523,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 507,
											"end": 643,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 507,
											"end": 643,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 507,
											"end": 643,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 565,
											"end": 575,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 560,
											"end": 563,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 556,
											"end": 576,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 553,
											"end": 554,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 546,
											"end": 577,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 600,
											"end": 604,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 597,
											"end": 598,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 590,
											"end": 605,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 628,
											"end": 632,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 625,
											"end": 626,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 618,
											"end": 633,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 507,
											"end": 643,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 507,
											"end": 643,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 659,
											"end": 668,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 659,
											"end": 668,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 449,
											"end": 674,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"写项目基础/写个蓝图计划.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"matha(uint256,uint256)": "803ab3a9"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"matha\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"safeMath/safemath.sol\":\"math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"safeMath/safemath.sol\":{\"keccak256\":\"0x97fc4ad193b2a914edb17b5e2e6ca80c5afb817413db1da916fc00694960325a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6018ff050520f0291861aa0b68d6e9369a1e46e55cdd7fe95afac6eae3ff8274\",\"dweb:/ipfs/QmYaYCoStbzohrcbL4qdL4h93DJ8UTyhwJCinnKSb7KUBr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"写项目基础/写个蓝图计划.sol": {
				"BluePlan": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_interest",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_rewardToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "GetRewardUser",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_rewarduser",
									"type": "address[]"
								}
							],
							"name": "SetReward",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "SetUserReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "User_Map",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "userReward",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "userState",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "userRewardStartTime",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getUserReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "interest",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardToken",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "rewarduser",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":170:1626  contract BluePlan {... */\n  mstore(0x40, 0x80)\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":578:734  constructor (uint _interest, address _rewardToken) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":640:648  interest */\n  0x00\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":640:660  interest = _interest */\n  swap2\n  swap1\n  swap2\n  sstore\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":671:682  rewardToken */\n  0x01\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":671:697  rewardToken = _rewardToken */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  swap3\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap3\n  dup4\n  and\n  or\n  swap1\n  sstore\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":708:713  owner */\n  0x02\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":708:726  owner = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":716:726  msg.sender */\n  caller\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":708:726  owner = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":170:1626  contract BluePlan {... */\n  jump(tag_7)\n    /* \"#utility.yul\":14:365   */\ntag_3:\n    /* \"#utility.yul\":93:99   */\n  0x00\n    /* \"#utility.yul\":101:107   */\n  dup1\n    /* \"#utility.yul\":154:156   */\n  0x40\n    /* \"#utility.yul\":142:151   */\n  dup4\n    /* \"#utility.yul\":133:140   */\n  dup6\n    /* \"#utility.yul\":129:152   */\n  sub\n    /* \"#utility.yul\":125:157   */\n  slt\n    /* \"#utility.yul\":122:174   */\n  iszero\n  tag_9\n  jumpi\n    /* \"#utility.yul\":170:171   */\n  0x00\n    /* \"#utility.yul\":167:168   */\n  dup1\n    /* \"#utility.yul\":160:172   */\n  revert\n    /* \"#utility.yul\":122:174   */\ntag_9:\n    /* \"#utility.yul\":193:209   */\n  dup3\n  mload\n    /* \"#utility.yul\":252:254   */\n  0x20\n    /* \"#utility.yul\":237:255   */\n  dup5\n  add\n    /* \"#utility.yul\":231:256   */\n  mload\n    /* \"#utility.yul\":193:209   */\n  swap1\n  swap3\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":285:316   */\n  dup2\n  and\n    /* \"#utility.yul\":275:317   */\n  dup2\n  eq\n    /* \"#utility.yul\":265:335   */\n  tag_10\n  jumpi\n    /* \"#utility.yul\":331:332   */\n  0x00\n    /* \"#utility.yul\":328:329   */\n  dup1\n    /* \"#utility.yul\":321:333   */\n  revert\n    /* \"#utility.yul\":265:335   */\ntag_10:\n    /* \"#utility.yul\":354:359   */\n  dup1\n    /* \"#utility.yul\":344:359   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":14:365   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\ntag_7:\n    /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":170:1626  contract BluePlan {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":170:1626  contract BluePlan {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_12\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xc392f766\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd793d83e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf41185b8\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf7c618c1\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      dup1\n      0x16c3f92c\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x3b7d10c1\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5a42b7a0\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x8c93ecff\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":376:403  address[] public rewarduser */\n    tag_3:\n      tag_13\n      tag_14\n      calldatasize\n      0x04\n      tag_15\n      jump\t// in\n    tag_14:\n      tag_16\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":363:395   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":345:396   */\n      dup2\n      mstore\n        /* \"#utility.yul\":333:335   */\n      0x20\n        /* \"#utility.yul\":318:336   */\n      add\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":376:403  address[] public rewarduser */\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1190:1440  function SetUserReward() public  returns (uint) {... */\n    tag_4:\n      tag_19\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":553:578   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":541:543   */\n      0x20\n        /* \"#utility.yul\":526:544   */\n      add\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1190:1440  function SetUserReward() public  returns (uint) {... */\n      tag_17\n        /* \"#utility.yul\":407:584   */\n      jump\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1082:1182  function GetRewardUser() public view returns (address[] memory) {... */\n    tag_5:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":529:569  mapping(address => User) public User_Map */\n    tag_6:\n      tag_27\n      tag_28\n      calldatasize\n      0x04\n      tag_29\n      jump\t// in\n    tag_28:\n      mstore(0x20, 0x04)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      0xff\n      and\n      swap1\n      dup4\n      jump\n    tag_27:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1817:1842   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":1885:1899   */\n      swap2\n      iszero\n        /* \"#utility.yul\":1878:1900   */\n      iszero\n        /* \"#utility.yul\":1873:1875   */\n      0x20\n        /* \"#utility.yul\":1858:1876   */\n      dup5\n      add\n        /* \"#utility.yul\":1851:1901   */\n      mstore\n        /* \"#utility.yul\":1917:1935   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":1910:1944   */\n      mstore\n        /* \"#utility.yul\":1805:1807   */\n      0x60\n        /* \"#utility.yul\":1790:1808   */\n      add\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":529:569  mapping(address => User) public User_Map */\n      tag_17\n        /* \"#utility.yul\":1621:1950   */\n      jump\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":349:369  address public owner */\n    tag_7:\n      sload(0x02)\n      tag_13\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":289:309  uint public interest */\n    tag_8:\n      tag_19\n      sload(0x00)\n      dup2\n      jump\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1448:1619  function getUserReward() public view returns(uint) {... */\n    tag_9:\n      tag_19\n      tag_40\n      jump\t// in\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":742:1074  function SetReward(address[] memory _rewarduser) public returns (bool) {... */\n    tag_10:\n      tag_42\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n        /* \"#utility.yul\":3378:3392   */\n      swap1\n      iszero\n        /* \"#utility.yul\":3371:3393   */\n      iszero\n        /* \"#utility.yul\":3353:3394   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3341:3343   */\n      0x20\n        /* \"#utility.yul\":3326:3344   */\n      add\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":742:1074  function SetReward(address[] memory _rewarduser) public returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":3213:3400   */\n      jump\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":316:342  address public rewardToken */\n    tag_11:\n      sload(0x01)\n      tag_13\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":376:403  address[] public rewarduser */\n    tag_16:\n      0x03\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_51\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1190:1440  function SetUserReward() public  returns (uint) {... */\n    tag_20:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1232:1236  uint */\n      0x00\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1336:1344  interest */\n      dup1\n      sload\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1298:1308  msg.sender */\n      caller\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1289:1309  User_Map[msg.sender] */\n      dup3\n      mstore\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1289:1297  User_Map */\n      0x04\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1289:1309  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1289:1329  User_Map[msg.sender].userRewardStartTime */\n      0x02\n      add\n      sload\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1232:1236  uint */\n      dup3\n      swap2\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1268:1345  (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest) */\n      tag_54\n      swap2\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1269:1330  block.timestamp.sub(User_Map[msg.sender].userRewardStartTime) */\n      tag_55\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1269:1284  block.timestamp */\n      timestamp\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1269:1288  block.timestamp.sub */\n      tag_56\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1269:1330  block.timestamp.sub(User_Map[msg.sender].userRewardStartTime) */\n      jump\t// in\n    tag_55:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1268:1335  (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul */\n      swap1\n      tag_57\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1268:1345  (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest) */\n      jump\t// in\n    tag_54:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1365:1375  msg.sender */\n      caller\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1356:1376  User_Map[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1356:1364  User_Map */\n      0x04\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1356:1376  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1356:1401  User_Map[msg.sender].userReward = _userReward */\n      dup2\n      swap1\n      sstore\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1249:1345  uint _userReward = (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest) */\n      swap3\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1190:1440  function SetUserReward() public  returns (uint) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1082:1182  function GetRewardUser() public view returns (address[] memory) {... */\n    tag_24:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1128:1144  address[] memory */\n      0x60\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1164:1174  rewarduser */\n      0x03\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1157:1174  return rewarduser */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_59\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_60:\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_60\n      jumpi\n    tag_59:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1082:1182  function GetRewardUser() public view returns (address[] memory) {... */\n      swap1\n      jump\t// out\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1448:1619  function getUserReward() public view returns(uint) {... */\n    tag_40:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1493:1497  uint */\n      0x00\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1600:1608  interest */\n      dup1\n      sload\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1562:1572  msg.sender */\n      caller\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1553:1573  User_Map[msg.sender] */\n      dup3\n      mstore\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1553:1561  User_Map */\n      0x04\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1553:1573  User_Map[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup3\n      keccak256\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1553:1593  User_Map[msg.sender].userRewardStartTime */\n      0x02\n      add\n      sload\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1493:1497  uint */\n      dup3\n      swap2\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1532:1609  (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest) */\n      tag_62\n      swap2\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1533:1594  block.timestamp.sub(User_Map[msg.sender].userRewardStartTime) */\n      tag_55\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1533:1548  block.timestamp */\n      timestamp\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1533:1552  block.timestamp.sub */\n      tag_56\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1533:1594  block.timestamp.sub(User_Map[msg.sender].userRewardStartTime) */\n      jump\t// in\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1532:1609  (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest) */\n    tag_62:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1510:1609  uint _getuserReward = (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest) */\n      swap1\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1499:1619  {... */\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1448:1619  function getUserReward() public view returns(uint) {... */\n      swap1\n      jump\t// out\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":742:1074  function SetReward(address[] memory _rewarduser) public returns (bool) {... */\n    tag_45:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":824:848  rewarduser = _rewarduser */\n      dup1\n      mload\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":807:811  bool */\n      0x00\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":824:848  rewarduser = _rewarduser */\n      tag_65\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":824:834  rewarduser */\n      0x03\n      swap1\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":824:848  rewarduser = _rewarduser */\n      0x20\n      dup6\n      add\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":864:870  uint i */\n      0x00\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":859:1044  for (uint i; i < rewarduser.length; i++){... */\n    tag_67:\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":876:886  rewarduser */\n      0x03\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":876:893  rewarduser.length */\n      sload\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":872:893  i < rewarduser.length */\n      dup2\n      lt\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":859:1044  for (uint i; i < rewarduser.length; i++){... */\n      iszero\n      tag_68\n      jumpi\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":951:955  true */\n      0x01\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":914:922  User_Map */\n      0x04\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":914:938  User_Map[_rewarduser[i]] */\n      0x00\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":923:934  _rewarduser */\n      dup6\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":935:936  i */\n      dup5\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":923:937  _rewarduser[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_71\n      jumpi\n      tag_71\n      tag_72\n      jump\t// in\n    tag_71:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":914:938  User_Map[_rewarduser[i]] */\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":914:948  User_Map[_rewarduser[i]].userState */\n      0x01\n      add\n      0x00\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":914:955  User_Map[_rewarduser[i]].userState = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1017:1032  block.timestamp */\n      timestamp\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":970:978  User_Map */\n      0x04\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":970:994  User_Map[_rewarduser[i]] */\n      0x00\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":979:990  _rewarduser */\n      dup6\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":991:992  i */\n      dup5\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":979:993  _rewarduser[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_74\n      jumpi\n      tag_74\n      tag_72\n      jump\t// in\n    tag_74:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":970:994  User_Map[_rewarduser[i]] */\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":970:1014  User_Map[_rewarduser[i]].userRewardStartTime */\n      0x02\n      add\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":970:1032  User_Map[_rewarduser[i]].userRewardStartTime = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":895:898  i++ */\n      dup1\n      dup1\n      tag_75\n      swap1\n      tag_76\n      jump\t// in\n    tag_75:\n      swap2\n      pop\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":859:1044  for (uint i; i < rewarduser.length; i++){... */\n      jump(tag_67)\n    tag_68:\n      pop\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":1061:1065  true */\n      0x01\n      swap3\n        /* \"\\xe5\\x86\\x99\\xe9\\xa1\\xb9\\xe7\\x9b\\xae\\xe5\\x9f\\xba\\xe7\\xa1\\x80/\\xe5\\x86\\x99\\xe4\\xb8\\xaa\\xe8\\x93\\x9d\\xe5\\x9b\\xbe\\xe8\\xae\\xa1\\xe5\\x88\\x92.sol\":742:1074  function SetReward(address[] memory _rewarduser) public returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"safeMath/safemath.sol\":207:321  function sub(uint a, uint b) internal pure returns (uint c) {... */\n    tag_56:\n        /* \"safeMath/safemath.sol\":259:265  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":291:292  a */\n      dup3\n        /* \"safeMath/safemath.sol\":286:287  b */\n      dup3\n        /* \"safeMath/safemath.sol\":286:292  b <= a */\n      gt\n      iszero\n        /* \"safeMath/safemath.sol\":278:293  require(b <= a) */\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_78:\n        /* \"safeMath/safemath.sol\":308:313  a - b */\n      tag_79\n        /* \"safeMath/safemath.sol\":312:313  b */\n      dup3\n        /* \"safeMath/safemath.sol\":308:309  a */\n      dup5\n        /* \"safeMath/safemath.sol\":308:313  a - b */\n      tag_80\n      jump\t// in\n    tag_79:\n        /* \"safeMath/safemath.sol\":304:313  c = a - b */\n      swap4\n        /* \"safeMath/safemath.sol\":207:321  function sub(uint a, uint b) internal pure returns (uint c) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"safeMath/safemath.sol\":327:455  function mul(uint a, uint b) internal pure returns (uint c) {... */\n    tag_57:\n        /* \"safeMath/safemath.sol\":379:385  uint c */\n      0x00\n        /* \"safeMath/safemath.sol\":402:407  a * b */\n      tag_82\n        /* \"safeMath/safemath.sol\":406:407  b */\n      dup3\n        /* \"safeMath/safemath.sol\":402:403  a */\n      dup5\n        /* \"safeMath/safemath.sol\":402:407  a * b */\n      tag_83\n      jump\t// in\n    tag_82:\n        /* \"safeMath/safemath.sol\":398:407  c = a * b */\n      swap1\n      pop\n        /* \"safeMath/safemath.sol\":426:432  a == 0 */\n      dup3\n      iszero\n      dup1\n        /* \"safeMath/safemath.sol\":426:446  a == 0 || c / a == b */\n      tag_84\n      jumpi\n      pop\n        /* \"safeMath/safemath.sol\":445:446  b */\n      dup2\n        /* \"safeMath/safemath.sol\":436:441  c / a */\n      tag_85\n        /* \"safeMath/safemath.sol\":440:441  a */\n      dup5\n        /* \"safeMath/safemath.sol\":436:437  c */\n      dup4\n        /* \"safeMath/safemath.sol\":436:441  c / a */\n      tag_86\n      jump\t// in\n    tag_85:\n        /* \"safeMath/safemath.sol\":436:446  c / a == b */\n      eq\n        /* \"safeMath/safemath.sol\":426:446  a == 0 || c / a == b */\n    tag_84:\n        /* \"safeMath/safemath.sol\":418:447  require(a == 0 || c / a == b) */\n      tag_87\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_87:\n        /* \"safeMath/safemath.sol\":327:455  function mul(uint a, uint b) internal pure returns (uint c) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    tag_66:\n      dup3\n      dup1\n      sload\n      dup3\n      dup3\n      sstore\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap3\n      dup3\n      iszero\n      tag_90\n      jumpi\n      swap2\n      0x20\n      mul\n      dup3\n      add\n    tag_89:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_90\n      jumpi\n      dup3\n      mload\n      dup3\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      or\n      dup3\n      sstore\n      0x20\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      jump(tag_89)\n    tag_90:\n      pop\n      tag_91\n      swap3\n      swap2\n      pop\n      tag_92\n      jump\t// in\n    tag_91:\n      pop\n      swap1\n      jump\t// out\n    tag_92:\n    tag_93:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_93)\n        /* \"#utility.yul\":14:194   */\n    tag_15:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_100\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_100:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":589:1247   */\n    tag_26:\n        /* \"#utility.yul\":760:762   */\n      0x20\n        /* \"#utility.yul\":812:833   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":882:895   */\n      dup3\n      mload\n        /* \"#utility.yul\":785:803   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":904:926   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":731:735   */\n      0x00\n      swap2\n        /* \"#utility.yul\":760:762   */\n      swap1\n        /* \"#utility.yul\":983:998   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":957:959   */\n      0x40\n        /* \"#utility.yul\":942:960   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":731:735   */\n      dup5\n        /* \"#utility.yul\":1026:1221   */\n    tag_104:\n        /* \"#utility.yul\":1040:1046   */\n      dup2\n        /* \"#utility.yul\":1037:1038   */\n      dup2\n        /* \"#utility.yul\":1034:1047   */\n      lt\n        /* \"#utility.yul\":1026:1221   */\n      iszero\n      tag_106\n      jumpi\n        /* \"#utility.yul\":1105:1118   */\n      dup4\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1101:1140   */\n      and\n        /* \"#utility.yul\":1089:1141   */\n      dup4\n      mstore\n        /* \"#utility.yul\":1196:1211   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":1161:1173   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":1137:1138   */\n      0x01\n        /* \"#utility.yul\":1055:1064   */\n      add\n        /* \"#utility.yul\":1026:1221   */\n      jump(tag_104)\n    tag_106:\n      pop\n        /* \"#utility.yul\":1238:1241   */\n      swap1\n      swap7\n        /* \"#utility.yul\":589:1247   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1252:1425   */\n    tag_95:\n        /* \"#utility.yul\":1320:1340   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1369:1400   */\n      dup2\n      and\n        /* \"#utility.yul\":1359:1401   */\n      dup2\n      eq\n        /* \"#utility.yul\":1349:1419   */\n      tag_108\n      jumpi\n        /* \"#utility.yul\":1415:1416   */\n      0x00\n        /* \"#utility.yul\":1412:1413   */\n      dup1\n        /* \"#utility.yul\":1405:1417   */\n      revert\n        /* \"#utility.yul\":1349:1419   */\n    tag_108:\n        /* \"#utility.yul\":1252:1425   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1430:1616   */\n    tag_29:\n        /* \"#utility.yul\":1489:1495   */\n      0x00\n        /* \"#utility.yul\":1542:1544   */\n      0x20\n        /* \"#utility.yul\":1530:1539   */\n      dup3\n        /* \"#utility.yul\":1521:1528   */\n      dup5\n        /* \"#utility.yul\":1517:1540   */\n      sub\n        /* \"#utility.yul\":1513:1545   */\n      slt\n        /* \"#utility.yul\":1510:1562   */\n      iszero\n      tag_110\n      jumpi\n        /* \"#utility.yul\":1558:1559   */\n      0x00\n        /* \"#utility.yul\":1555:1556   */\n      dup1\n        /* \"#utility.yul\":1548:1560   */\n      revert\n        /* \"#utility.yul\":1510:1562   */\n    tag_110:\n        /* \"#utility.yul\":1581:1610   */\n      tag_79\n        /* \"#utility.yul\":1600:1609   */\n      dup3\n        /* \"#utility.yul\":1581:1610   */\n      tag_95\n      jump\t// in\n        /* \"#utility.yul\":1955:2082   */\n    tag_96:\n        /* \"#utility.yul\":2016:2026   */\n      0x4e487b71\n        /* \"#utility.yul\":2011:2014   */\n      0xe0\n        /* \"#utility.yul\":2007:2027   */\n      shl\n        /* \"#utility.yul\":2004:2005   */\n      0x00\n        /* \"#utility.yul\":1997:2028   */\n      mstore\n        /* \"#utility.yul\":2047:2051   */\n      0x41\n        /* \"#utility.yul\":2044:2045   */\n      0x04\n        /* \"#utility.yul\":2037:2052   */\n      mstore\n        /* \"#utility.yul\":2071:2075   */\n      0x24\n        /* \"#utility.yul\":2068:2069   */\n      0x00\n        /* \"#utility.yul\":2061:2076   */\n      revert\n        /* \"#utility.yul\":2087:3208   */\n    tag_44:\n        /* \"#utility.yul\":2171:2177   */\n      0x00\n        /* \"#utility.yul\":2202:2204   */\n      0x20\n        /* \"#utility.yul\":2245:2247   */\n      dup1\n        /* \"#utility.yul\":2233:2242   */\n      dup4\n        /* \"#utility.yul\":2224:2231   */\n      dup6\n        /* \"#utility.yul\":2220:2243   */\n      sub\n        /* \"#utility.yul\":2216:2248   */\n      slt\n        /* \"#utility.yul\":2213:2265   */\n      iszero\n      tag_115\n      jumpi\n        /* \"#utility.yul\":2261:2262   */\n      0x00\n        /* \"#utility.yul\":2258:2259   */\n      dup1\n        /* \"#utility.yul\":2251:2263   */\n      revert\n        /* \"#utility.yul\":2213:2265   */\n    tag_115:\n        /* \"#utility.yul\":2301:2310   */\n      dup3\n        /* \"#utility.yul\":2288:2311   */\n      calldataload\n        /* \"#utility.yul\":2330:2348   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2371:2373   */\n      dup1\n        /* \"#utility.yul\":2363:2369   */\n      dup3\n        /* \"#utility.yul\":2360:2374   */\n      gt\n        /* \"#utility.yul\":2357:2391   */\n      iszero\n      tag_116\n      jumpi\n        /* \"#utility.yul\":2387:2388   */\n      0x00\n        /* \"#utility.yul\":2384:2385   */\n      dup1\n        /* \"#utility.yul\":2377:2389   */\n      revert\n        /* \"#utility.yul\":2357:2391   */\n    tag_116:\n        /* \"#utility.yul\":2425:2431   */\n      dup2\n        /* \"#utility.yul\":2414:2423   */\n      dup6\n        /* \"#utility.yul\":2410:2432   */\n      add\n        /* \"#utility.yul\":2400:2432   */\n      swap2\n      pop\n        /* \"#utility.yul\":2470:2477   */\n      dup6\n        /* \"#utility.yul\":2463:2467   */\n      0x1f\n        /* \"#utility.yul\":2459:2461   */\n      dup4\n        /* \"#utility.yul\":2455:2468   */\n      add\n        /* \"#utility.yul\":2451:2478   */\n      slt\n        /* \"#utility.yul\":2441:2496   */\n      tag_117\n      jumpi\n        /* \"#utility.yul\":2492:2493   */\n      0x00\n        /* \"#utility.yul\":2489:2490   */\n      dup1\n        /* \"#utility.yul\":2482:2494   */\n      revert\n        /* \"#utility.yul\":2441:2496   */\n    tag_117:\n        /* \"#utility.yul\":2528:2530   */\n      dup2\n        /* \"#utility.yul\":2515:2531   */\n      calldataload\n        /* \"#utility.yul\":2550:2552   */\n      dup2\n        /* \"#utility.yul\":2546:2548   */\n      dup2\n        /* \"#utility.yul\":2543:2553   */\n      gt\n        /* \"#utility.yul\":2540:2576   */\n      iszero\n      tag_119\n      jumpi\n        /* \"#utility.yul\":2556:2574   */\n      tag_119\n      tag_96\n      jump\t// in\n    tag_119:\n        /* \"#utility.yul\":2602:2604   */\n      dup1\n        /* \"#utility.yul\":2599:2600   */\n      0x05\n        /* \"#utility.yul\":2595:2605   */\n      shl\n        /* \"#utility.yul\":2634:2636   */\n      0x40\n        /* \"#utility.yul\":2628:2637   */\n      mload\n        /* \"#utility.yul\":2697:2699   */\n      0x1f\n        /* \"#utility.yul\":2693:2700   */\n      not\n        /* \"#utility.yul\":2688:2690   */\n      0x3f\n        /* \"#utility.yul\":2684:2686   */\n      dup4\n        /* \"#utility.yul\":2680:2691   */\n      add\n        /* \"#utility.yul\":2676:2701   */\n      and\n        /* \"#utility.yul\":2668:2674   */\n      dup2\n        /* \"#utility.yul\":2664:2702   */\n      add\n        /* \"#utility.yul\":2752:2758   */\n      dup2\n        /* \"#utility.yul\":2740:2750   */\n      dup2\n        /* \"#utility.yul\":2737:2759   */\n      lt\n        /* \"#utility.yul\":2732:2734   */\n      dup6\n        /* \"#utility.yul\":2720:2730   */\n      dup3\n        /* \"#utility.yul\":2717:2735   */\n      gt\n        /* \"#utility.yul\":2714:2760   */\n      or\n        /* \"#utility.yul\":2711:2783   */\n      iszero\n      tag_121\n      jumpi\n        /* \"#utility.yul\":2763:2781   */\n      tag_121\n      tag_96\n      jump\t// in\n    tag_121:\n        /* \"#utility.yul\":2799:2801   */\n      0x40\n        /* \"#utility.yul\":2792:2814   */\n      mstore\n        /* \"#utility.yul\":2849:2867   */\n      swap2\n      dup3\n      mstore\n        /* \"#utility.yul\":2883:2898   */\n      dup5\n      dup3\n      add\n      swap3\n      pop\n        /* \"#utility.yul\":2925:2936   */\n      dup4\n      dup2\n      add\n        /* \"#utility.yul\":2921:2941   */\n      dup6\n      add\n      swap2\n        /* \"#utility.yul\":2953:2972   */\n      dup9\n      dup4\n      gt\n        /* \"#utility.yul\":2950:2989   */\n      iszero\n      tag_122\n      jumpi\n        /* \"#utility.yul\":2985:2986   */\n      0x00\n        /* \"#utility.yul\":2982:2983   */\n      dup1\n        /* \"#utility.yul\":2975:2987   */\n      revert\n        /* \"#utility.yul\":2950:2989   */\n    tag_122:\n        /* \"#utility.yul\":3009:3020   */\n      swap4\n      dup6\n      add\n      swap4\n        /* \"#utility.yul\":3029:3177   */\n    tag_123:\n        /* \"#utility.yul\":3045:3051   */\n      dup3\n        /* \"#utility.yul\":3040:3043   */\n      dup6\n        /* \"#utility.yul\":3037:3052   */\n      lt\n        /* \"#utility.yul\":3029:3177   */\n      iszero\n      tag_125\n      jumpi\n        /* \"#utility.yul\":3111:3134   */\n      tag_126\n        /* \"#utility.yul\":3130:3133   */\n      dup6\n        /* \"#utility.yul\":3111:3134   */\n      tag_95\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":3099:3135   */\n      dup5\n      mstore\n        /* \"#utility.yul\":3062:3074   */\n      swap4\n      dup6\n      add\n      swap4\n        /* \"#utility.yul\":3155:3167   */\n      swap3\n      dup6\n      add\n      swap3\n        /* \"#utility.yul\":3029:3177   */\n      jump(tag_123)\n    tag_125:\n        /* \"#utility.yul\":3196:3202   */\n      swap9\n        /* \"#utility.yul\":2087:3208   */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3405:3532   */\n    tag_72:\n        /* \"#utility.yul\":3466:3476   */\n      0x4e487b71\n        /* \"#utility.yul\":3461:3464   */\n      0xe0\n        /* \"#utility.yul\":3457:3477   */\n      shl\n        /* \"#utility.yul\":3454:3455   */\n      0x00\n        /* \"#utility.yul\":3447:3478   */\n      mstore\n        /* \"#utility.yul\":3497:3501   */\n      0x32\n        /* \"#utility.yul\":3494:3495   */\n      0x04\n        /* \"#utility.yul\":3487:3502   */\n      mstore\n        /* \"#utility.yul\":3521:3525   */\n      0x24\n        /* \"#utility.yul\":3518:3519   */\n      0x00\n        /* \"#utility.yul\":3511:3526   */\n      revert\n        /* \"#utility.yul\":3537:3664   */\n    tag_97:\n        /* \"#utility.yul\":3598:3608   */\n      0x4e487b71\n        /* \"#utility.yul\":3593:3596   */\n      0xe0\n        /* \"#utility.yul\":3589:3609   */\n      shl\n        /* \"#utility.yul\":3586:3587   */\n      0x00\n        /* \"#utility.yul\":3579:3610   */\n      mstore\n        /* \"#utility.yul\":3629:3633   */\n      0x11\n        /* \"#utility.yul\":3626:3627   */\n      0x04\n        /* \"#utility.yul\":3619:3634   */\n      mstore\n        /* \"#utility.yul\":3653:3657   */\n      0x24\n        /* \"#utility.yul\":3650:3651   */\n      0x00\n        /* \"#utility.yul\":3643:3658   */\n      revert\n        /* \"#utility.yul\":3669:3804   */\n    tag_76:\n        /* \"#utility.yul\":3708:3711   */\n      0x00\n        /* \"#utility.yul\":3729:3746   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":3726:3769   */\n      tag_132\n      jumpi\n        /* \"#utility.yul\":3749:3767   */\n      tag_132\n      tag_97\n      jump\t// in\n    tag_132:\n      pop\n        /* \"#utility.yul\":3796:3797   */\n      0x01\n        /* \"#utility.yul\":3785:3798   */\n      add\n      swap1\n        /* \"#utility.yul\":3669:3804   */\n      jump\t// out\n        /* \"#utility.yul\":3809:3934   */\n    tag_80:\n        /* \"#utility.yul\":3849:3853   */\n      0x00\n        /* \"#utility.yul\":3877:3878   */\n      dup3\n        /* \"#utility.yul\":3874:3875   */\n      dup3\n        /* \"#utility.yul\":3871:3879   */\n      lt\n        /* \"#utility.yul\":3868:3902   */\n      iszero\n      tag_135\n      jumpi\n        /* \"#utility.yul\":3882:3900   */\n      tag_135\n      tag_97\n      jump\t// in\n    tag_135:\n      pop\n        /* \"#utility.yul\":3919:3928   */\n      sub\n      swap1\n        /* \"#utility.yul\":3809:3934   */\n      jump\t// out\n        /* \"#utility.yul\":3939:4107   */\n    tag_83:\n        /* \"#utility.yul\":3979:3986   */\n      0x00\n        /* \"#utility.yul\":4045:4046   */\n      dup2\n        /* \"#utility.yul\":4041:4042   */\n      0x00\n        /* \"#utility.yul\":4037:4043   */\n      not\n        /* \"#utility.yul\":4033:4047   */\n      div\n        /* \"#utility.yul\":4030:4031   */\n      dup4\n        /* \"#utility.yul\":4027:4048   */\n      gt\n        /* \"#utility.yul\":4022:4023   */\n      dup3\n        /* \"#utility.yul\":4015:4024   */\n      iszero\n        /* \"#utility.yul\":4008:4025   */\n      iszero\n        /* \"#utility.yul\":4004:4049   */\n      and\n        /* \"#utility.yul\":4001:4072   */\n      iszero\n      tag_138\n      jumpi\n        /* \"#utility.yul\":4052:4070   */\n      tag_138\n      tag_97\n      jump\t// in\n    tag_138:\n      pop\n        /* \"#utility.yul\":4092:4101   */\n      mul\n      swap1\n        /* \"#utility.yul\":3939:4107   */\n      jump\t// out\n        /* \"#utility.yul\":4112:4329   */\n    tag_86:\n        /* \"#utility.yul\":4152:4153   */\n      0x00\n        /* \"#utility.yul\":4178:4179   */\n      dup3\n        /* \"#utility.yul\":4168:4300   */\n      tag_140\n      jumpi\n        /* \"#utility.yul\":4222:4232   */\n      0x4e487b71\n        /* \"#utility.yul\":4217:4220   */\n      0xe0\n        /* \"#utility.yul\":4213:4233   */\n      shl\n        /* \"#utility.yul\":4210:4211   */\n      0x00\n        /* \"#utility.yul\":4203:4234   */\n      mstore\n        /* \"#utility.yul\":4257:4261   */\n      0x12\n        /* \"#utility.yul\":4254:4255   */\n      0x04\n        /* \"#utility.yul\":4247:4262   */\n      mstore\n        /* \"#utility.yul\":4285:4289   */\n      0x24\n        /* \"#utility.yul\":4282:4283   */\n      0x00\n        /* \"#utility.yul\":4275:4290   */\n      revert\n        /* \"#utility.yul\":4168:4300   */\n    tag_140:\n      pop\n        /* \"#utility.yul\":4314:4323   */\n      div\n      swap1\n        /* \"#utility.yul\":4112:4329   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212200ca5507870eaa8dadfd39aee3aa844d67ec4655bf49d43dde07d4c9a1372aa8564736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_862": {
									"entryPoint": null,
									"id": 862,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_uint256t_address_fromMemory": {
									"entryPoint": 99,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:367:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "112:253:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "158:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "167:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "170:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "160:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "160:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "160:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "133:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "142:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "129:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "129:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "154:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "125:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "125:32:6"
															},
															"nodeType": "YulIf",
															"src": "122:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "183:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "199:9:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "193:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "193:16:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "183:6:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "218:38:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "241:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "252:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "237:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "237:18:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "231:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "231:25:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "222:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "319:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "328:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "331:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "321:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "321:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "321:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "278:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "289:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "304:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "309:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "300:3:6"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "300:11:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "313:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "296:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "296:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "285:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "285:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "275:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "275:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "268:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "268:50:6"
															},
															"nodeType": "YulIf",
															"src": "265:70:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "344:15:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "354:5:6"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "344:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "70:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "81:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "93:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "101:6:6",
														"type": ""
													}
												],
												"src": "14:351:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value1 := value\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161073a38038061073a83398101604081905261002f91610063565b600091909155600180546001600160a01b039092166001600160a01b031992831617905560028054909116331790556100a0565b6000806040838503121561007657600080fd5b825160208401519092506001600160a01b038116811461009557600080fd5b809150509250929050565b61068b806100af6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610140578063c392f76614610153578063d793d83e1461015c578063f41185b814610164578063f7c618c11461018757600080fd5b806316c3f92c146100985780633b7d10c1146100c85780635a42b7a0146100de5780638c93ecff146100f3575b600080fd5b6100ab6100a6366004610440565b61019a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06101c4565b6040519081526020016100bf565b6100e6610207565b6040516100bf9190610459565b6101256101013660046104c2565b600460205260009081526040902080546001820154600290920154909160ff169083565b604080519384529115156020840152908201526060016100bf565b6002546100ab906001600160a01b031681565b6100d060005481565b6100d0610269565b6101776101723660046104f3565b610294565b60405190151581526020016100bf565b6001546100ab906001600160a01b031681565b600381815481106101aa57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080543382526004602052604082206002015482916101ef916101e9904290610374565b90610394565b33600090815260046020526040902081905592915050565b6060600380548060200260200160405190810160405280929190818152602001828054801561025f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610241575b5050505050905090565b6000805433825260046020526040822060020154829161028e916101e9904290610374565b90505090565b80516000906102aa9060039060208501906103c6565b5060005b60035481101561036b576001600460008584815181106102d0576102d06105b8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a81548160ff0219169083151502179055504260046000858481518110610329576103296105b8565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201819055508080610363906105e4565b9150506102ae565b50600192915050565b60008282111561038357600080fd5b61038d82846105fd565b9392505050565b60006103a08284610614565b90508215806103b75750816103b58483610633565b145b6103c057600080fd5b92915050565b82805482825590600052602060002090810192821561041b579160200282015b8281111561041b57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906103e6565b5061042792915061042b565b5090565b5b80821115610427576000815560010161042c565b60006020828403121561045257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561049a5783516001600160a01b031683529284019291840191600101610475565b50909695505050505050565b80356001600160a01b03811681146104bd57600080fd5b919050565b6000602082840312156104d457600080fd5b61038d826104a6565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561050657600080fd5b823567ffffffffffffffff8082111561051e57600080fd5b818501915085601f83011261053257600080fd5b813581811115610544576105446104dd565b8060051b604051601f19603f83011681018181108582111715610569576105696104dd565b60405291825284820192508381018501918883111561058757600080fd5b938501935b828510156105ac5761059d856104a6565b8452938501939285019261058c565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016105f6576105f66105ce565b5060010190565b60008282101561060f5761060f6105ce565b500390565b600081600019048311821515161561062e5761062e6105ce565b500290565b60008261065057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200ca5507870eaa8dadfd39aee3aa844d67ec4655bf49d43dde07d4c9a1372aa8564736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x73A CODESIZE SUB DUP1 PUSH2 0x73A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x63 JUMP JUMPDEST PUSH1 0x0 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH2 0xA0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x68B DUP1 PUSH2 0xAF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0xC392F766 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xD793D83E EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xF41185B8 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x16C3F92C EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x3B7D10C1 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x5A42B7A0 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x8C93ECFF EQ PUSH2 0xF3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD0 PUSH2 0x1C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBF JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x207 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 PUSH1 0xFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xAB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xD0 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x269 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xAB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 ADD SLOAD DUP3 SWAP2 PUSH2 0x1EF SWAP2 PUSH2 0x1E9 SWAP1 TIMESTAMP SWAP1 PUSH2 0x374 JUMP JUMPDEST SWAP1 PUSH2 0x394 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x241 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 ADD SLOAD DUP3 SWAP2 PUSH2 0x28E SWAP2 PUSH2 0x1E9 SWAP1 TIMESTAMP SWAP1 PUSH2 0x374 JUMP JUMPDEST SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2AA SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x3C6 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x36B JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2D0 JUMPI PUSH2 0x2D0 PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x4 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x329 JUMPI PUSH2 0x329 PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x363 SWAP1 PUSH2 0x5E4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2AE JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38D DUP3 DUP5 PUSH2 0x5FD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP3 DUP5 PUSH2 0x614 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO DUP1 PUSH2 0x3B7 JUMPI POP DUP2 PUSH2 0x3B5 DUP5 DUP4 PUSH2 0x633 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x41B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x41B JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x3E6 JUMP JUMPDEST POP PUSH2 0x427 SWAP3 SWAP2 POP PUSH2 0x42B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x42C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x49A JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x475 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38D DUP3 PUSH2 0x4A6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x544 JUMPI PUSH2 0x544 PUSH2 0x4DD JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x569 JUMPI PUSH2 0x569 PUSH2 0x4DD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x5AC JUMPI PUSH2 0x59D DUP6 PUSH2 0x4A6 JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x58C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5F6 JUMPI PUSH2 0x5F6 PUSH2 0x5CE JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x60F JUMPI PUSH2 0x60F PUSH2 0x5CE JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x62E JUMPI PUSH2 0x62E PUSH2 0x5CE JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x650 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xA5 POP PUSH25 0x70EAA8DADFD39AEE3AA844D67EC4655BF49D43DDE07D4C9A13 PUSH19 0xAA8564736F6C634300080F0033000000000000 ",
							"sourceMap": "170:1456:5:-:0;;;578:156;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;640:8;:20;;;;671:11;:26;;-1:-1:-1;;;;;671:26:5;;;-1:-1:-1;;;;;;671:26:5;;;;;;708:5;:18;;;;;716:10;708:18;;;170:1456;;14:351:6;93:6;101;154:2;142:9;133:7;129:23;125:32;122:52;;;170:1;167;160:12;122:52;193:16;;252:2;237:18;;231:25;193:16;;-1:-1:-1;;;;;;285:31:6;;275:42;;265:70;;331:1;328;321:12;265:70;354:5;344:15;;;14:351;;;;;:::o;:::-;170:1456:5;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@GetRewardUser_918": {
									"entryPoint": 519,
									"id": 918,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@SetReward_909": {
									"entryPoint": 660,
									"id": 909,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@SetUserReward_950": {
									"entryPoint": 452,
									"id": 950,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@User_Map_841": {
									"entryPoint": null,
									"id": 841,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@getUserReward_972": {
									"entryPoint": 617,
									"id": 972,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@interest_822": {
									"entryPoint": null,
									"id": 822,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@mul_763": {
									"entryPoint": 916,
									"id": 763,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@owner_826": {
									"entryPoint": null,
									"id": 826,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rewardToken_824": {
									"entryPoint": null,
									"id": 824,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rewarduser_829": {
									"entryPoint": 410,
									"id": 829,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@sub_735": {
									"entryPoint": 884,
									"id": 735,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1190,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1218,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr": {
									"entryPoint": 1267,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 1088,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 1113,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_bool_t_uint256__to_t_uint256_t_bool_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 1587,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1556,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1533,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 1508,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1486,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1464,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1245,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4331:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:6"
															},
															"nodeType": "YulIf",
															"src": "94:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:6",
														"type": ""
													}
												],
												"src": "14:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:102:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "310:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "322:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "333:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "318:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "318:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "310:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "352:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "367:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "383:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "388:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "379:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "379:11:6"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "392:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "375:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "375:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "363:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "363:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "345:51:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "345:51:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "269:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "280:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "291:4:6",
														"type": ""
													}
												],
												"src": "199:203:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "508:76:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "518:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "530:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "541:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "526:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "526:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "518:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "560:9:6"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "571:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "553:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "553:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "553:25:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "477:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "488:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "499:4:6",
														"type": ""
													}
												],
												"src": "407:177:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "740:507:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "750:12:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "760:2:6",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "754:2:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "771:32:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "789:9:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "800:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "785:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "785:18:6"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "775:6:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "819:9:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "830:2:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "812:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "812:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "812:21:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "842:17:6",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "853:6:6"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "846:3:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "868:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "888:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "882:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "882:13:6"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "872:6:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "911:6:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "919:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "904:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "904:22:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "904:22:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "935:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "946:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "957:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "942:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "942:18:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "969:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "987:6:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "995:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "983:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "983:15:6"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "973:6:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1007:10:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1016:1:6",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1011:1:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1075:146:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1096:3:6"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "srcPtr",
																									"nodeType": "YulIdentifier",
																									"src": "1111:6:6"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "1105:5:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1105:13:6"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1128:3:6",
																											"type": "",
																											"value": "160"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1133:1:6",
																											"type": "",
																											"value": "1"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "1124:3:6"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1124:11:6"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1137:1:6",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "1120:3:6"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1120:19:6"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1101:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1101:39:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1089:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1089:52:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1089:52:6"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1154:19:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1165:3:6"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1170:2:6"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1161:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1161:12:6"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1154:3:6"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1186:25:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "1200:6:6"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1208:2:6"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1196:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1196:15:6"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1186:6:6"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1037:1:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1040:6:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1034:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1034:13:6"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1048:18:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1050:14:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1059:1:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1062:1:6",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1055:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1055:9:6"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1050:1:6"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1030:3:6",
																"statements": []
															},
															"src": "1026:195:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1230:11:6",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "1238:3:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1230:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "709:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "720:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "731:4:6",
														"type": ""
													}
												],
												"src": "589:658:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1301:124:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1311:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1333:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1320:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1320:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1311:5:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1403:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1412:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1415:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1405:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1405:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1405:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1362:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1373:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1388:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1393:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1384:3:6"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1384:11:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1397:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1380:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1380:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1369:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1369:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1359:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1359:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1352:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1352:50:6"
															},
															"nodeType": "YulIf",
															"src": "1349:70:6"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1280:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1291:5:6",
														"type": ""
													}
												],
												"src": "1252:173:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1500:116:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1546:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1555:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1558:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1548:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1548:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1548:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1521:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1530:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1517:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1517:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1542:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1513:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1513:32:6"
															},
															"nodeType": "YulIf",
															"src": "1510:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1571:39:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1600:9:6"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1581:18:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1581:29:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1466:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1477:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1489:6:6",
														"type": ""
													}
												],
												"src": "1430:186:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1772:178:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1782:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1794:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1805:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1790:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1790:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1782:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1824:9:6"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1835:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1817:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1817:25:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1817:25:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1862:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1873:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1858:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1858:18:6"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "1892:6:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1885:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1885:14:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1878:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1878:22:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1851:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1851:50:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1851:50:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1921:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1917:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1917:18:6"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "1937:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1910:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1910:34:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1910:34:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_bool_t_uint256__to_t_uint256_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1725:9:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1736:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1744:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1752:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1763:4:6",
														"type": ""
													}
												],
												"src": "1621:329:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1987:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2004:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2011:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2016:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2007:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2007:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1997:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1997:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1997:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2044:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2047:4:6",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2037:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2037:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2037:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2068:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2071:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2061:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2061:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2061:15:6"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1955:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2182:1026:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2192:12:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2202:2:6",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2196:2:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2249:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2258:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2261:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2251:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2251:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2251:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2224:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2233:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2220:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2220:23:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2245:2:6"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2216:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2216:32:6"
															},
															"nodeType": "YulIf",
															"src": "2213:52:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2274:37:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2301:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2288:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2288:23:6"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2278:6:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2320:28:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2330:18:6",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "2324:2:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2375:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2384:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2387:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2377:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2377:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2377:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2363:6:6"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2371:2:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2360:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2360:14:6"
															},
															"nodeType": "YulIf",
															"src": "2357:34:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2400:32:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2414:9:6"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2425:6:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2410:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2410:22:6"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "2404:2:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2480:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2489:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2492:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2482:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2482:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2482:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "2459:2:6"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2463:4:6",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2455:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2455:13:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2470:7:6"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2451:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2451:27:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2444:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2444:35:6"
															},
															"nodeType": "YulIf",
															"src": "2441:55:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2505:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "2528:2:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2515:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2515:16:6"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "2509:2:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2554:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2556:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2556:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2556:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2546:2:6"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2550:2:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2543:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2543:10:6"
															},
															"nodeType": "YulIf",
															"src": "2540:36:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2585:20:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2599:1:6",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2602:2:6"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "2595:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2595:10:6"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "2589:2:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2614:23:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2634:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2628:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2628:9:6"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "2618:6:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2646:56:6",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2668:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_5",
																						"nodeType": "YulIdentifier",
																						"src": "2684:2:6"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2688:2:6",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2680:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2680:11:6"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2697:2:6",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2693:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2693:7:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2676:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2676:25:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2664:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2664:38:6"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "2650:10:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2761:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2763:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2763:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2763:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2720:10:6"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "2732:2:6"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2717:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2717:18:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2740:10:6"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2752:6:6"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2737:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2737:22:6"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2714:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2714:46:6"
															},
															"nodeType": "YulIf",
															"src": "2711:72:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2799:2:6",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "2803:10:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2792:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2792:22:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2792:22:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2823:17:6",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "2834:6:6"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "2827:3:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2856:6:6"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2864:2:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2849:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2849:18:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2849:18:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2876:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2887:6:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2895:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2883:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2883:15:6"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "2876:3:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2907:34:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "2929:2:6"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "2933:2:6"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2925:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2925:11:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2938:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2921:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2921:20:6"
															},
															"variables": [
																{
																	"name": "srcEnd",
																	"nodeType": "YulTypedName",
																	"src": "2911:6:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2973:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2982:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2985:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2975:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2975:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2975:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2956:6:6"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2964:7:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2953:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2953:19:6"
															},
															"nodeType": "YulIf",
															"src": "2950:39:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2998:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "3013:2:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3017:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3009:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3009:11:6"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "3002:3:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3085:92:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "3106:3:6"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "3130:3:6"
																						}
																					],
																					"functionName": {
																						"name": "abi_decode_address",
																						"nodeType": "YulIdentifier",
																						"src": "3111:18:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3111:23:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3099:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3099:36:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3099:36:6"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3148:19:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "3159:3:6"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "3164:2:6"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3155:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3155:12:6"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "3148:3:6"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3040:3:6"
																	},
																	{
																		"name": "srcEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3045:6:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3037:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3037:15:6"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3053:23:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3055:19:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "3066:3:6"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "3071:2:6"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3062:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3062:12:6"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "3055:3:6"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3033:3:6",
																"statements": []
															},
															"src": "3029:148:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3186:16:6",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "3196:6:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3186:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2148:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2159:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2171:6:6",
														"type": ""
													}
												],
												"src": "2087:1121:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3308:92:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3318:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3330:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3341:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3326:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3326:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3318:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3360:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3385:6:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3378:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3378:14:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3371:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3371:22:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3353:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3353:41:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3353:41:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3277:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3288:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3299:4:6",
														"type": ""
													}
												],
												"src": "3213:187:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3437:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3454:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3461:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3466:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3457:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3457:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3447:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3447:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3447:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3494:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3497:4:6",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3487:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3487:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3487:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3518:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3521:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3511:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3511:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3511:15:6"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "3405:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3569:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3586:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3593:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3598:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3589:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3589:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3579:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3579:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3579:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3626:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3629:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3619:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3619:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3619:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3650:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3653:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3643:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3643:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3643:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "3537:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3716:88:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3747:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3749:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3749:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3749:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3732:5:6"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3743:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3739:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3739:6:6"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "3729:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3729:17:6"
															},
															"nodeType": "YulIf",
															"src": "3726:43:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3778:20:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3789:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3796:1:6",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3785:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3785:13:6"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3778:3:6"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3698:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3708:3:6",
														"type": ""
													}
												],
												"src": "3669:135:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3858:76:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3880:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3882:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3882:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3882:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3874:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3877:1:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3871:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3871:8:6"
															},
															"nodeType": "YulIf",
															"src": "3868:34:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3911:17:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3923:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3926:1:6"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3919:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3919:9:6"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3911:4:6"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3840:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3843:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3849:4:6",
														"type": ""
													}
												],
												"src": "3809:125:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3991:116:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4050:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4052:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4052:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4052:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4022:1:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4015:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4015:9:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4008:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4008:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4030:1:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4041:1:6",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4037:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4037:6:6"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4045:1:6"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4033:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4033:14:6"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4027:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4027:21:6"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4004:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4004:45:6"
															},
															"nodeType": "YulIf",
															"src": "4001:71:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4081:20:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4096:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4099:1:6"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4092:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4092:9:6"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4081:7:6"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3970:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3973:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "3979:7:6",
														"type": ""
													}
												],
												"src": "3939:168:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4158:171:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4189:111:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4210:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4217:3:6",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4222:10:6",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4213:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4213:20:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4203:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4203:31:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4203:31:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4254:1:6",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4257:4:6",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4247:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4247:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4247:15:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4282:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4285:4:6",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4275:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4275:15:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4275:15:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4178:1:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4171:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4171:9:6"
															},
															"nodeType": "YulIf",
															"src": "4168:132:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4309:14:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4318:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4321:1:6"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "4314:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4314:9:6"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4309:1:6"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4143:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4146:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "4152:1:6",
														"type": ""
													}
												],
												"src": "4112:217:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_bool_t_uint256__to_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610140578063c392f76614610153578063d793d83e1461015c578063f41185b814610164578063f7c618c11461018757600080fd5b806316c3f92c146100985780633b7d10c1146100c85780635a42b7a0146100de5780638c93ecff146100f3575b600080fd5b6100ab6100a6366004610440565b61019a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06101c4565b6040519081526020016100bf565b6100e6610207565b6040516100bf9190610459565b6101256101013660046104c2565b600460205260009081526040902080546001820154600290920154909160ff169083565b604080519384529115156020840152908201526060016100bf565b6002546100ab906001600160a01b031681565b6100d060005481565b6100d0610269565b6101776101723660046104f3565b610294565b60405190151581526020016100bf565b6001546100ab906001600160a01b031681565b600381815481106101aa57600080fd5b6000918252602090912001546001600160a01b0316905081565b600080543382526004602052604082206002015482916101ef916101e9904290610374565b90610394565b33600090815260046020526040902081905592915050565b6060600380548060200260200160405190810160405280929190818152602001828054801561025f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610241575b5050505050905090565b6000805433825260046020526040822060020154829161028e916101e9904290610374565b90505090565b80516000906102aa9060039060208501906103c6565b5060005b60035481101561036b576001600460008584815181106102d0576102d06105b8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a81548160ff0219169083151502179055504260046000858481518110610329576103296105b8565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600201819055508080610363906105e4565b9150506102ae565b50600192915050565b60008282111561038357600080fd5b61038d82846105fd565b9392505050565b60006103a08284610614565b90508215806103b75750816103b58483610633565b145b6103c057600080fd5b92915050565b82805482825590600052602060002090810192821561041b579160200282015b8281111561041b57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906103e6565b5061042792915061042b565b5090565b5b80821115610427576000815560010161042c565b60006020828403121561045257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561049a5783516001600160a01b031683529284019291840191600101610475565b50909695505050505050565b80356001600160a01b03811681146104bd57600080fd5b919050565b6000602082840312156104d457600080fd5b61038d826104a6565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561050657600080fd5b823567ffffffffffffffff8082111561051e57600080fd5b818501915085601f83011261053257600080fd5b813581811115610544576105446104dd565b8060051b604051601f19603f83011681018181108582111715610569576105696104dd565b60405291825284820192508381018501918883111561058757600080fd5b938501935b828510156105ac5761059d856104a6565b8452938501939285019261058c565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016105f6576105f66105ce565b5060010190565b60008282101561060f5761060f6105ce565b500390565b600081600019048311821515161561062e5761062e6105ce565b500290565b60008261065057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200ca5507870eaa8dadfd39aee3aa844d67ec4655bf49d43dde07d4c9a1372aa8564736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0xC392F766 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xD793D83E EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xF41185B8 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x16C3F92C EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x3B7D10C1 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x5A42B7A0 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0x8C93ECFF EQ PUSH2 0xF3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x19A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD0 PUSH2 0x1C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBF JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x207 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 PUSH1 0xFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0xAB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xD0 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x269 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xAB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 ADD SLOAD DUP3 SWAP2 PUSH2 0x1EF SWAP2 PUSH2 0x1E9 SWAP1 TIMESTAMP SWAP1 PUSH2 0x374 JUMP JUMPDEST SWAP1 PUSH2 0x394 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x241 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x2 ADD SLOAD DUP3 SWAP2 PUSH2 0x28E SWAP2 PUSH2 0x1E9 SWAP1 TIMESTAMP SWAP1 PUSH2 0x374 JUMP JUMPDEST SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x2AA SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x3C6 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x36B JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2D0 JUMPI PUSH2 0x2D0 PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x4 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x329 JUMPI PUSH2 0x329 PUSH2 0x5B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x363 SWAP1 PUSH2 0x5E4 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2AE JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38D DUP3 DUP5 PUSH2 0x5FD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0 DUP3 DUP5 PUSH2 0x614 JUMP JUMPDEST SWAP1 POP DUP3 ISZERO DUP1 PUSH2 0x3B7 JUMPI POP DUP2 PUSH2 0x3B5 DUP5 DUP4 PUSH2 0x633 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x3C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x41B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x41B JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x3E6 JUMP JUMPDEST POP PUSH2 0x427 SWAP3 SWAP2 POP PUSH2 0x42B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x42C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x49A JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x475 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38D DUP3 PUSH2 0x4A6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x506 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x544 JUMPI PUSH2 0x544 PUSH2 0x4DD JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x569 JUMPI PUSH2 0x569 PUSH2 0x4DD JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x5AC JUMPI PUSH2 0x59D DUP6 PUSH2 0x4A6 JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x58C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x5F6 JUMPI PUSH2 0x5F6 PUSH2 0x5CE JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x60F JUMPI PUSH2 0x60F PUSH2 0x5CE JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x62E JUMPI PUSH2 0x62E PUSH2 0x5CE JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x650 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xA5 POP PUSH25 0x70EAA8DADFD39AEE3AA844D67EC4655BF49D43DDE07D4C9A13 PUSH19 0xAA8564736F6C634300080F0033000000000000 ",
							"sourceMap": "170:1456:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;376:27;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;363:32:6;;;345:51;;333:2;318:18;376:27:5;;;;;;;;1190:250;;;:::i;:::-;;;553:25:6;;;541:2;526:18;1190:250:5;407:177:6;1082:100:5;;;:::i;:::-;;;;;;;:::i;529:40::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1817:25:6;;;1885:14;;1878:22;1873:2;1858:18;;1851:50;1917:18;;;1910:34;1805:2;1790:18;529:40:5;1621:329:6;349:20:5;;;;;-1:-1:-1;;;;;349:20:5;;;289;;;;;;1448:171;;;:::i;742:332::-;;;;;;:::i;:::-;;:::i;:::-;;;3378:14:6;;3371:22;3353:41;;3341:2;3326:18;742:332:5;3213:187:6;316:26:5;;;;;-1:-1:-1;;;;;316:26:5;;;376:27;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;376:27:5;;-1:-1:-1;376:27:5;:::o;1190:250::-;1232:4;1336:8;;1298:10;1289:20;;:8;:20;;;;;:40;;;1232:4;;1268:77;;1269:61;;:15;;:19;:61::i;:::-;1268:67;;:77::i;:::-;1365:10;1356:20;;;;:8;:20;;;;;:45;;;1249:96;1190:250;-1:-1:-1;;1190:250:5:o;1082:100::-;1128:16;1164:10;1157:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1157:17:5;;;;;;;;;;;;;;;;;;;;;;;1082:100;:::o;1448:171::-;1493:4;1600:8;;1562:10;1553:20;;:8;:20;;;;;:40;;;1493:4;;1532:77;;1533:61;;:15;;:19;:61::i;1532:77::-;1510:99;;1499:120;1448:171;:::o;742:332::-;824:24;;807:4;;824:24;;:10;;:24;;;;;:::i;:::-;;864:6;859:185;876:10;:17;872:21;;859:185;;;951:4;914:8;:24;923:11;935:1;923:14;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;914:24:5;-1:-1:-1;;;;;914:24:5;;;;;;;;;;;;:34;;;:41;;;;;;;;;;;;;;;;;;1017:15;970:8;:24;979:11;991:1;979:14;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;970:24:5;-1:-1:-1;;;;;970:24:5;;;;;;;;;;;;:44;;:62;;;;895:3;;;;;:::i;:::-;;;;859:185;;;-1:-1:-1;1061:4:5;;742:332;-1:-1:-1;;742:332:5:o;207:114:4:-;259:6;291:1;286;:6;;278:15;;;;;;308:5;312:1;308;:5;:::i;:::-;304:9;207:114;-1:-1:-1;;;207:114:4:o;327:128::-;379:6;402:5;406:1;402;:5;:::i;:::-;398:9;-1:-1:-1;426:6:4;;;:20;;-1:-1:-1;445:1:4;436:5;440:1;436;:5;:::i;:::-;:10;426:20;418:29;;;;;;327:128;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:180:6;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:6;;14:180;-1:-1:-1;14:180:6:o;589:658::-;760:2;812:21;;;882:13;;785:18;;;904:22;;;731:4;;760:2;983:15;;;;957:2;942:18;;;731:4;1026:195;1040:6;1037:1;1034:13;1026:195;;;1105:13;;-1:-1:-1;;;;;1101:39:6;1089:52;;1196:15;;;;1161:12;;;;1137:1;1055:9;1026:195;;;-1:-1:-1;1238:3:6;;589:658;-1:-1:-1;;;;;;589:658:6:o;1252:173::-;1320:20;;-1:-1:-1;;;;;1369:31:6;;1359:42;;1349:70;;1415:1;1412;1405:12;1349:70;1252:173;;;:::o;1430:186::-;1489:6;1542:2;1530:9;1521:7;1517:23;1513:32;1510:52;;;1558:1;1555;1548:12;1510:52;1581:29;1600:9;1581:29;:::i;1955:127::-;2016:10;2011:3;2007:20;2004:1;1997:31;2047:4;2044:1;2037:15;2071:4;2068:1;2061:15;2087:1121;2171:6;2202:2;2245;2233:9;2224:7;2220:23;2216:32;2213:52;;;2261:1;2258;2251:12;2213:52;2301:9;2288:23;2330:18;2371:2;2363:6;2360:14;2357:34;;;2387:1;2384;2377:12;2357:34;2425:6;2414:9;2410:22;2400:32;;2470:7;2463:4;2459:2;2455:13;2451:27;2441:55;;2492:1;2489;2482:12;2441:55;2528:2;2515:16;2550:2;2546;2543:10;2540:36;;;2556:18;;:::i;:::-;2602:2;2599:1;2595:10;2634:2;2628:9;2697:2;2693:7;2688:2;2684;2680:11;2676:25;2668:6;2664:38;2752:6;2740:10;2737:22;2732:2;2720:10;2717:18;2714:46;2711:72;;;2763:18;;:::i;:::-;2799:2;2792:22;2849:18;;;2883:15;;;;-1:-1:-1;2925:11:6;;;2921:20;;;2953:19;;;2950:39;;;2985:1;2982;2975:12;2950:39;3009:11;;;;3029:148;3045:6;3040:3;3037:15;3029:148;;;3111:23;3130:3;3111:23;:::i;:::-;3099:36;;3062:12;;;;3155;;;;3029:148;;;3196:6;2087:1121;-1:-1:-1;;;;;;;;2087:1121:6:o;3405:127::-;3466:10;3461:3;3457:20;3454:1;3447:31;3497:4;3494:1;3487:15;3521:4;3518:1;3511:15;3537:127;3598:10;3593:3;3589:20;3586:1;3579:31;3629:4;3626:1;3619:15;3653:4;3650:1;3643:15;3669:135;3708:3;3729:17;;;3726:43;;3749:18;;:::i;:::-;-1:-1:-1;3796:1:6;3785:13;;3669:135::o;3809:125::-;3849:4;3877:1;3874;3871:8;3868:34;;;3882:18;;:::i;:::-;-1:-1:-1;3919:9:6;;3809:125::o;3939:168::-;3979:7;4045:1;4041;4037:6;4033:14;4030:1;4027:21;4022:1;4015:9;4008:17;4004:45;4001:71;;;4052:18;;:::i;:::-;-1:-1:-1;4092:9:6;;3939:168::o;4112:217::-;4152:1;4178;4168:132;;4222:10;4217:3;4213:20;4210:1;4203:31;4257:4;4254:1;4247:15;4285:4;4282:1;4275:15;4168:132;-1:-1:-1;4314:9:6;;4112:217::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "335000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"GetRewardUser()": "infinite",
								"SetReward(address[])": "infinite",
								"SetUserReward()": "27079",
								"User_Map(address)": "6867",
								"getUserReward()": "4923",
								"interest()": "2317",
								"owner()": "2326",
								"rewardToken()": "2414",
								"rewarduser(uint256)": "4604"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 578,
									"end": 734,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 578,
									"end": 734,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 578,
									"end": 734,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 640,
									"end": 648,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 640,
									"end": 660,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 640,
									"end": 660,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 660,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 640,
									"end": 660,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 671,
									"end": 682,
									"name": "PUSH",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 671,
									"end": 697,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 671,
									"end": 697,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "AND",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 671,
									"end": 697,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 671,
									"end": 697,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 708,
									"end": 713,
									"name": "PUSH",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 708,
									"end": 726,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 716,
									"end": 726,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 708,
									"end": 726,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 14,
									"end": 365,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 365,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 93,
									"end": 99,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 101,
									"end": 107,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 154,
									"end": 156,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 142,
									"end": 151,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 133,
									"end": 140,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 129,
									"end": 152,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 125,
									"end": 157,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 122,
									"end": 174,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 122,
									"end": 174,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 122,
									"end": 174,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 170,
									"end": 171,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 168,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 160,
									"end": 172,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 122,
									"end": 174,
									"name": "tag",
									"source": 6,
									"value": "9"
								},
								{
									"begin": 122,
									"end": 174,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 193,
									"end": 209,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 193,
									"end": 209,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 252,
									"end": 254,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 237,
									"end": 255,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 237,
									"end": 255,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 231,
									"end": 256,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 193,
									"end": 209,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 193,
									"end": 209,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 285,
									"end": 316,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 285,
									"end": 316,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 275,
									"end": 317,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 275,
									"end": 317,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 265,
									"end": 335,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 265,
									"end": 335,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 331,
									"end": 332,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 328,
									"end": 329,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 321,
									"end": 333,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 265,
									"end": 335,
									"name": "tag",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 265,
									"end": 335,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 354,
									"end": 359,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 344,
									"end": 359,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 344,
									"end": 359,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 344,
									"end": 359,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 14,
									"end": 365,
									"name": "tag",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 365,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 170,
									"end": 1626,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200ca5507870eaa8dadfd39aee3aa844d67ec4655bf49d43dde07d4c9a1372aa8564736f6c634300080f0033",
									".code": [
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "8DA5CB5B"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "C392F766"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "D793D83E"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "F41185B8"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "F7C618C1"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "16C3F92C"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "3B7D10C1"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "5A42B7A0"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "8C93ECFF"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 170,
											"end": 1626,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 376,
											"end": 403,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 376,
											"end": 403,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 363,
											"end": 395,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 363,
											"end": 395,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 363,
											"end": 395,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 345,
											"end": 396,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 345,
											"end": 396,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 333,
											"end": 335,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 376,
											"end": 403,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1190,
											"end": 1440,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 553,
											"end": 578,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 553,
											"end": 578,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 541,
											"end": 543,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 526,
											"end": 544,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 407,
											"end": 584,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1082,
											"end": 1182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 1082,
											"end": 1182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 529,
											"end": 569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "tag",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 529,
											"end": 569,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 529,
											"end": 569,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1817,
											"end": 1842,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1817,
											"end": 1842,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1817,
											"end": 1842,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1899,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1885,
											"end": 1899,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1878,
											"end": 1900,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1873,
											"end": 1875,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1858,
											"end": 1876,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1851,
											"end": 1901,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1917,
											"end": 1935,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1917,
											"end": 1935,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1917,
											"end": 1935,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1910,
											"end": 1944,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1805,
											"end": 1807,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1790,
											"end": 1808,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 529,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 1621,
											"end": 1950,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 349,
											"end": 369,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 349,
											"end": 369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 349,
											"end": 369,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 349,
											"end": 369,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 349,
											"end": 369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 349,
											"end": 369,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 349,
											"end": 369,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 349,
											"end": 369,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 349,
											"end": 369,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 289,
											"end": 309,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 289,
											"end": 309,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 289,
											"end": 309,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 289,
											"end": 309,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 289,
											"end": 309,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 289,
											"end": 309,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 289,
											"end": 309,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1448,
											"end": 1619,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 742,
											"end": 1074,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "tag",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 742,
											"end": 1074,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "tag",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3378,
											"end": 3392,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3378,
											"end": 3392,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 3393,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3353,
											"end": 3394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3353,
											"end": 3394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3341,
											"end": 3343,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3326,
											"end": 3344,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 3213,
											"end": 3400,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 316,
											"end": 342,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 316,
											"end": 342,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 316,
											"end": 342,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 316,
											"end": 342,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 316,
											"end": 342,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 316,
											"end": 342,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 316,
											"end": 342,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 316,
											"end": 342,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 316,
											"end": 342,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "tag",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 376,
											"end": 403,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 376,
											"end": 403,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 376,
											"end": 403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1232,
											"end": 1236,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1336,
											"end": 1344,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1336,
											"end": 1344,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1298,
											"end": 1308,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1297,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1309,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1329,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1289,
											"end": 1329,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1289,
											"end": 1329,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1232,
											"end": 1236,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1232,
											"end": 1236,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1268,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 1268,
											"end": 1345,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1269,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 1269,
											"end": 1330,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1269,
											"end": 1284,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 1269,
											"end": 1284,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1269,
											"end": 1288,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1269,
											"end": 1330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1269,
											"end": 1330,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 1269,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1268,
											"end": 1335,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1268,
											"end": 1335,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 1268,
											"end": 1345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1268,
											"end": 1345,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 1268,
											"end": 1345,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1365,
											"end": 1375,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1364,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1376,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1401,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1401,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1356,
											"end": 1401,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1249,
											"end": 1345,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1440,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1190,
											"end": 1440,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1128,
											"end": 1144,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1164,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1157,
											"end": 1174,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1082,
											"end": 1182,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1493,
											"end": 1497,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1600,
											"end": 1608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1600,
											"end": 1608,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1562,
											"end": 1572,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1561,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1573,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1593,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1553,
											"end": 1593,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1553,
											"end": 1593,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1493,
											"end": 1497,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1493,
											"end": 1497,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1532,
											"end": 1609,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 1609,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1533,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 1533,
											"end": 1594,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1533,
											"end": 1548,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 1533,
											"end": 1548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1533,
											"end": 1552,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1533,
											"end": 1594,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1532,
											"end": 1609,
											"name": "tag",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 1532,
											"end": 1609,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1510,
											"end": 1609,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1510,
											"end": 1609,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1499,
											"end": 1619,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1448,
											"end": 1619,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1448,
											"end": 1619,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 807,
											"end": 811,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 807,
											"end": 811,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 824,
											"end": 848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 824,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 824,
											"end": 834,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 824,
											"end": 848,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 824,
											"end": 848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 824,
											"end": 848,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 824,
											"end": 848,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 864,
											"end": 870,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "tag",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 876,
											"end": 886,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 876,
											"end": 893,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 872,
											"end": 893,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 872,
											"end": 893,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 951,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 914,
											"end": 922,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 914,
											"end": 938,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 923,
											"end": 934,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 935,
											"end": 936,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 923,
											"end": 937,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 923,
											"end": 937,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 923,
											"end": 937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 923,
											"end": 937,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 923,
											"end": 937,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 923,
											"end": 937,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 923,
											"end": 937,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 914,
											"end": 938,
											"name": "AND",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 914,
											"end": 938,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 914,
											"end": 938,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 914,
											"end": 938,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 914,
											"end": 938,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 938,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 914,
											"end": 948,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 914,
											"end": 948,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 914,
											"end": 948,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 914,
											"end": 955,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "FF"
										},
										{
											"begin": 914,
											"end": 955,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "OR",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 914,
											"end": 955,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1017,
											"end": 1032,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 970,
											"end": 978,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 970,
											"end": 994,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 979,
											"end": 990,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 991,
											"end": 992,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 979,
											"end": 993,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 979,
											"end": 993,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 979,
											"end": 993,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 979,
											"end": 993,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 979,
											"end": 993,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 979,
											"end": 993,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 979,
											"end": 993,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 970,
											"end": 994,
											"name": "AND",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 970,
											"end": 994,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 970,
											"end": 994,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 970,
											"end": 994,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 970,
											"end": 994,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 994,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1014,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 970,
											"end": 1014,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1032,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1032,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1032,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1032,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 895,
											"end": 898,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 895,
											"end": 898,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 895,
											"end": 898,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 895,
											"end": 898,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "67"
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "tag",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 859,
											"end": 1044,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1061,
											"end": 1065,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 1061,
											"end": 1065,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 742,
											"end": 1074,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 742,
											"end": 1074,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 207,
											"end": 321,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 207,
											"end": 321,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 259,
											"end": 265,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 291,
											"end": 292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 286,
											"end": 287,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 286,
											"end": 292,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 286,
											"end": 292,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 278,
											"end": 293,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 278,
											"end": 293,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 278,
											"end": 293,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 278,
											"end": 293,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 308,
											"end": 313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 312,
											"end": 313,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 308,
											"end": 309,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 308,
											"end": 313,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 308,
											"end": 313,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 308,
											"end": 313,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 308,
											"end": 313,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 304,
											"end": 313,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 207,
											"end": 321,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 207,
											"end": 321,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 327,
											"end": 455,
											"name": "tag",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 327,
											"end": 455,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 379,
											"end": 385,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 402,
											"end": 407,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 406,
											"end": 407,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 402,
											"end": 403,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 402,
											"end": 407,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 402,
											"end": 407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 402,
											"end": 407,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 402,
											"end": 407,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 398,
											"end": 407,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 426,
											"end": 432,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 426,
											"end": 432,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 426,
											"end": 446,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 426,
											"end": 446,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 445,
											"end": 446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 436,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 440,
											"end": 441,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 436,
											"end": 437,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 436,
											"end": 441,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 436,
											"end": 441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 436,
											"end": 441,
											"name": "tag",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 436,
											"end": 441,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 436,
											"end": 446,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 426,
											"end": 446,
											"name": "tag",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 426,
											"end": 446,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 418,
											"end": 447,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 418,
											"end": 447,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 418,
											"end": 447,
											"name": "tag",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 418,
											"end": 447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 327,
											"end": 455,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 327,
											"end": 455,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 327,
											"end": 455,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 327,
											"end": 455,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 327,
											"end": 455,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "66"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MUL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "91"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "91"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "93"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "91"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "93"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 589,
											"end": 1247,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 589,
											"end": 1247,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 760,
											"end": 762,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 812,
											"end": 833,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 812,
											"end": 833,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 812,
											"end": 833,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 882,
											"end": 895,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 882,
											"end": 895,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 785,
											"end": 803,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 785,
											"end": 803,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 785,
											"end": 803,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 904,
											"end": 926,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 904,
											"end": 926,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 904,
											"end": 926,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 731,
											"end": 735,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 731,
											"end": 735,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 760,
											"end": 762,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 983,
											"end": 998,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 983,
											"end": 998,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 983,
											"end": 998,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 983,
											"end": 998,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 957,
											"end": 959,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 942,
											"end": 960,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 942,
											"end": 960,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 942,
											"end": 960,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 731,
											"end": 735,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1040,
											"end": 1046,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1037,
											"end": 1038,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1034,
											"end": 1047,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1105,
											"end": 1118,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1105,
											"end": 1118,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1101,
											"end": 1140,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1089,
											"end": 1141,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1089,
											"end": 1141,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1196,
											"end": 1211,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1196,
											"end": 1211,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1196,
											"end": 1211,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1196,
											"end": 1211,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1161,
											"end": 1173,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1161,
											"end": 1173,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1161,
											"end": 1173,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1161,
											"end": 1173,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1137,
											"end": 1138,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1055,
											"end": 1064,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 1026,
											"end": 1221,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1238,
											"end": 1241,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1238,
											"end": 1241,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": 589,
											"end": 1247,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 589,
											"end": 1247,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1252,
											"end": 1425,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1252,
											"end": 1425,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1320,
											"end": 1340,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1369,
											"end": 1400,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1369,
											"end": 1400,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1359,
											"end": 1401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1359,
											"end": 1401,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1349,
											"end": 1419,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 1349,
											"end": 1419,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1415,
											"end": 1416,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1412,
											"end": 1413,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1405,
											"end": 1417,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1349,
											"end": 1419,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 1349,
											"end": 1419,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1252,
											"end": 1425,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1252,
											"end": 1425,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1252,
											"end": 1425,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1252,
											"end": 1425,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1430,
											"end": 1616,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1430,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1489,
											"end": 1495,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1542,
											"end": 1544,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1521,
											"end": 1528,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1517,
											"end": 1540,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1513,
											"end": 1545,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1562,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 1510,
											"end": 1562,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1558,
											"end": 1559,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1555,
											"end": 1556,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1560,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1510,
											"end": 1562,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 1510,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1581,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 1600,
											"end": 1609,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1581,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 1581,
											"end": 1610,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1955,
											"end": 2082,
											"name": "tag",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 1955,
											"end": 2082,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2016,
											"end": 2026,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 2011,
											"end": 2014,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 2007,
											"end": 2027,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 2004,
											"end": 2005,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1997,
											"end": 2028,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2047,
											"end": 2051,
											"name": "PUSH",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 2044,
											"end": 2045,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2037,
											"end": 2052,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2071,
											"end": 2075,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2068,
											"end": 2069,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2076,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2087,
											"end": 3208,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2087,
											"end": 3208,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2171,
											"end": 2177,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2245,
											"end": 2247,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2233,
											"end": 2242,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2224,
											"end": 2231,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2220,
											"end": 2243,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2216,
											"end": 2248,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 2213,
											"end": 2265,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2213,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 2213,
											"end": 2265,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2261,
											"end": 2262,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2258,
											"end": 2259,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2251,
											"end": 2263,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2213,
											"end": 2265,
											"name": "tag",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 2213,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2301,
											"end": 2310,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2288,
											"end": 2311,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 2330,
											"end": 2348,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2371,
											"end": 2373,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2363,
											"end": 2369,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2360,
											"end": 2374,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2391,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2391,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 2357,
											"end": 2391,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2387,
											"end": 2388,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2384,
											"end": 2385,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2377,
											"end": 2389,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2357,
											"end": 2391,
											"name": "tag",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 2357,
											"end": 2391,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2425,
											"end": 2431,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2414,
											"end": 2423,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2410,
											"end": 2432,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2400,
											"end": 2432,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2400,
											"end": 2432,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2470,
											"end": 2477,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2463,
											"end": 2467,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2459,
											"end": 2461,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2455,
											"end": 2468,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2451,
											"end": 2478,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 2441,
											"end": 2496,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 2441,
											"end": 2496,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2492,
											"end": 2493,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2489,
											"end": 2490,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2441,
											"end": 2496,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 2441,
											"end": 2496,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2528,
											"end": 2530,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2515,
											"end": 2531,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 2550,
											"end": 2552,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2546,
											"end": 2548,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2543,
											"end": 2553,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2540,
											"end": 2576,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2540,
											"end": 2576,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 2540,
											"end": 2576,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2556,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 2556,
											"end": 2574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 2556,
											"end": 2574,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2556,
											"end": 2574,
											"name": "tag",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 2556,
											"end": 2574,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2602,
											"end": 2604,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2599,
											"end": 2600,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 2595,
											"end": 2605,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 2634,
											"end": 2636,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2628,
											"end": 2637,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2697,
											"end": 2699,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2693,
											"end": 2700,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 2688,
											"end": 2690,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 2684,
											"end": 2686,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2680,
											"end": 2691,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2676,
											"end": 2701,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2668,
											"end": 2674,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2664,
											"end": 2702,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2752,
											"end": 2758,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2750,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2737,
											"end": 2759,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 2732,
											"end": 2734,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2720,
											"end": 2730,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2717,
											"end": 2735,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2714,
											"end": 2760,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 2711,
											"end": 2783,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2711,
											"end": 2783,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2711,
											"end": 2783,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2763,
											"end": 2781,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2763,
											"end": 2781,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 2763,
											"end": 2781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2763,
											"end": 2781,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 2763,
											"end": 2781,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2799,
											"end": 2801,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2792,
											"end": 2814,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2849,
											"end": 2867,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2849,
											"end": 2867,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2849,
											"end": 2867,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2883,
											"end": 2898,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2883,
											"end": 2898,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2883,
											"end": 2898,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2883,
											"end": 2898,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2925,
											"end": 2936,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2925,
											"end": 2936,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2925,
											"end": 2936,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2921,
											"end": 2941,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2921,
											"end": 2941,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2921,
											"end": 2941,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2953,
											"end": 2972,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2953,
											"end": 2972,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2953,
											"end": 2972,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2950,
											"end": 2989,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 2950,
											"end": 2989,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 2950,
											"end": 2989,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2985,
											"end": 2986,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2982,
											"end": 2983,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2975,
											"end": 2987,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2950,
											"end": 2989,
											"name": "tag",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 2950,
											"end": 2989,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3020,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3020,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3020,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3009,
											"end": 3020,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "tag",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3045,
											"end": 3051,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3040,
											"end": 3043,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3037,
											"end": 3052,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3111,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 3130,
											"end": 3133,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3111,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 3111,
											"end": 3134,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3111,
											"end": 3134,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 3111,
											"end": 3134,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3099,
											"end": 3135,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3099,
											"end": 3135,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3062,
											"end": 3074,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3062,
											"end": 3074,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3062,
											"end": 3074,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3062,
											"end": 3074,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 3155,
											"end": 3167,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3155,
											"end": 3167,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3155,
											"end": 3167,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3155,
											"end": 3167,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 3029,
											"end": 3177,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3196,
											"end": 3202,
											"name": "SWAP9",
											"source": 6
										},
										{
											"begin": 2087,
											"end": 3208,
											"name": "SWAP8",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2087,
											"end": 3208,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3405,
											"end": 3532,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 3405,
											"end": 3532,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3466,
											"end": 3476,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 3461,
											"end": 3464,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 3457,
											"end": 3477,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3454,
											"end": 3455,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3447,
											"end": 3478,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3497,
											"end": 3501,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 3494,
											"end": 3495,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3487,
											"end": 3502,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3521,
											"end": 3525,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 3518,
											"end": 3519,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3511,
											"end": 3526,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3537,
											"end": 3664,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3537,
											"end": 3664,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 3593,
											"end": 3596,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 3589,
											"end": 3609,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 3586,
											"end": 3587,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3579,
											"end": 3610,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3629,
											"end": 3633,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 3626,
											"end": 3627,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3619,
											"end": 3634,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3653,
											"end": 3657,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 3650,
											"end": 3651,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3643,
											"end": 3658,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3669,
											"end": 3804,
											"name": "tag",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 3669,
											"end": 3804,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3708,
											"end": 3711,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3769,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3726,
											"end": 3769,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3749,
											"end": 3767,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3796,
											"end": 3797,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 3785,
											"end": 3798,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3798,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3669,
											"end": 3804,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3809,
											"end": 3934,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 3809,
											"end": 3934,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3849,
											"end": 3853,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3877,
											"end": 3878,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3874,
											"end": 3875,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3871,
											"end": 3879,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 3868,
											"end": 3902,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3868,
											"end": 3902,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 3868,
											"end": 3902,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 3882,
											"end": 3900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3919,
											"end": 3928,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3919,
											"end": 3928,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3809,
											"end": 3934,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3939,
											"end": 4107,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 3939,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3979,
											"end": 3986,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4045,
											"end": 4046,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4041,
											"end": 4042,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4037,
											"end": 4043,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 4033,
											"end": 4047,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4031,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4027,
											"end": 4048,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 4022,
											"end": 4023,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4015,
											"end": 4024,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4008,
											"end": 4025,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4004,
											"end": 4049,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4001,
											"end": 4072,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4001,
											"end": 4072,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 4001,
											"end": 4072,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 4052,
											"end": 4070,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4092,
											"end": 4101,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 4092,
											"end": 4101,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3939,
											"end": 4107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4112,
											"end": 4329,
											"name": "tag",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 4112,
											"end": 4329,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4152,
											"end": 4153,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4178,
											"end": 4179,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4168,
											"end": 4300,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 4168,
											"end": 4300,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4222,
											"end": 4232,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 4217,
											"end": 4220,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 4213,
											"end": 4233,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 4210,
											"end": 4211,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4203,
											"end": 4234,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4257,
											"end": 4261,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 4254,
											"end": 4255,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4247,
											"end": 4262,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4285,
											"end": 4289,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 4282,
											"end": 4283,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4275,
											"end": 4290,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4168,
											"end": 4300,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 4168,
											"end": 4300,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4314,
											"end": 4323,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 4314,
											"end": 4323,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4112,
											"end": 4329,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"safeMath/safemath.sol",
								"写项目基础/写个蓝图计划.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"GetRewardUser()": "5a42b7a0",
							"SetReward(address[])": "f41185b8",
							"SetUserReward()": "3b7d10c1",
							"User_Map(address)": "8c93ecff",
							"getUserReward()": "d793d83e",
							"interest()": "c392f766",
							"owner()": "8da5cb5b",
							"rewardToken()": "f7c618c1",
							"rewarduser(uint256)": "16c3f92c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GetRewardUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewarduser\",\"type\":\"address[]\"}],\"name\":\"SetReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"User_Map\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userState\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"userRewardStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarduser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"\\u5199\\u9879\\u76ee\\u57fa\\u7840/\\u5199\\u4e2a\\u84dd\\u56fe\\u8ba1\\u5212.sol\":\"BluePlan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6\",\"dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"safeMath/safemath.sol\":{\"keccak256\":\"0x97fc4ad193b2a914edb17b5e2e6ca80c5afb817413db1da916fc00694960325a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6018ff050520f0291861aa0b68d6e9369a1e46e55cdd7fe95afac6eae3ff8274\",\"dweb:/ipfs/QmYaYCoStbzohrcbL4qdL4h93DJ8UTyhwJCinnKSb7KUBr\"]},\"\\u5199\\u9879\\u76ee\\u57fa\\u7840/\\u5199\\u4e2a\\u84dd\\u56fe\\u8ba1\\u5212.sol\":{\"keccak256\":\"0xec484bee7f31b8cd52373d18948d321be38653cb1b5ec9dc996683c364a26670\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0fa842100f845affd343bc0a06ba5ead1ac5de019e6174759234b5b63692e218\",\"dweb:/ipfs/QmdnPfY8CBHEMa2E7JuTh6DGSa39axTNtLVvDJbnmFigpq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 822,
								"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
								"label": "interest",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 824,
								"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
								"label": "rewardToken",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 826,
								"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
								"label": "owner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 829,
								"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
								"label": "rewarduser",
								"offset": 0,
								"slot": "3",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 841,
								"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
								"label": "User_Map",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_struct(User)836_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(User)836_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct BluePlan.User)",
								"numberOfBytes": "32",
								"value": "t_struct(User)836_storage"
							},
							"t_struct(User)836_storage": {
								"encoding": "inplace",
								"label": "struct BluePlan.User",
								"members": [
									{
										"astId": 831,
										"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
										"label": "userReward",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 833,
										"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
										"label": "userState",
										"offset": 0,
										"slot": "1",
										"type": "t_bool"
									},
									{
										"astId": 835,
										"contract": "写项目基础/写个蓝图计划.sol:BluePlan",
										"label": "userRewardStartTime",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "6321",
				"formattedMessage": "Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n  --> 写项目基础/写个蓝图计划.sol:52:50:\n   |\n52 |     function getUserReward() public view returns(uint) {\n   |                                                  ^^^^\n\n",
				"message": "Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1497,
					"file": "写项目基础/写个蓝图计划.sol",
					"start": 1493
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n  --> 写项目基础/写个蓝图计划.sol:53:9:\n   |\n53 |         uint _getuserReward = (block.timestamp.sub(User_Map[msg.sender].userRewardStartTime)).mul(interest);\n   |         ^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1529,
					"file": "写项目基础/写个蓝图计划.sol",
					"start": 1510
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> safeMath/safemath.sol:27:5:\n   |\n27 |     function matha(uint _a, uint _b) public view returns (uint)  {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 754,
					"file": "safeMath/safemath.sol",
					"start": 636
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2677:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2699:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2719:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2758:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:0"
									},
									"scope": 77,
									"src": "2646:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2564:0",
							"usedErrors": []
						}
					],
					"src": "106:2661:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							113
						]
					},
					"id": 114,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 80,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:1",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:1",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 98,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1471:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1494:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1519:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1542:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 88,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1568:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 90,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1585:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 92,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1604:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:1"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:1"
									},
									"scope": 113,
									"src": "1446:183:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:1",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1950:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:1"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1988:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:1"
									},
									"scope": 113,
									"src": "1934:63:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:1",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2240:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:1"
									},
									"scope": 113,
									"src": "2189:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 114,
							"src": "620:1631:1",
							"usedErrors": []
						}
					],
					"src": "114:2138:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							689
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"SafeERC20": [
							394
						]
					},
					"id": 395,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 78,
							"src": "140:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 114,
							"src": "164:46:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 118,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 690,
							"src": "211:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 119,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:2",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 394,
							"linearizedBaseContracts": [
								394
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 122,
									"libraryName": {
										"id": 120,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 689,
										"src": "737:7:2"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:2",
									"typeName": {
										"id": 121,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "865:103:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 133,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 125,
															"src": "895:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 136,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 125,
																			"src": "925:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 137,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 44,
																		"src": "925:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 138,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 139,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 127,
																	"src": "950:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 140,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 129,
																	"src": "954:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 134,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 132,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "875:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "875:86:2"
											}
										]
									},
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "794:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 124,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 123,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "794:6:2"
													},
													"referencedDeclaration": 77,
													"src": "794:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "816:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "836:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:2"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:2"
									},
									"scope": 394,
									"src": "763:205:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 170,
										"nodeType": "Block",
										"src": "1102:113:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 158,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "1132:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 161,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 148,
																			"src": "1162:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 76,
																		"src": "1162:18:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 164,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 150,
																	"src": "1191:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 165,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 152,
																	"src": "1197:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 166,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 154,
																	"src": "1201:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 159,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 157,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "1112:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 169,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:2"
											}
										]
									},
									"id": 171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1009:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 147,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 146,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1009:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1009:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1031:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1053:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "1073:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:2"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:2"
									},
									"scope": 394,
									"src": "974:241:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "1581:497:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 198,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 185,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 183,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 179,
																			"src": "1830:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 184,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 186,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 191,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$394",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$394",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 190,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 189,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:2",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 192,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 193,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 177,
																					"src": "1877:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 187,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 175,
																					"src": "1846:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 188,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 54,
																				"src": "1846:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 197,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 182,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 201,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 203,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "2001:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 206,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 175,
																			"src": "2031:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 207,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2031:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 209,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 177,
																	"src": "2055:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 210,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "2064:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 204,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 205,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 202,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "1981:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 213,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:2"
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:2",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "1505:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 173,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1505:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1505:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "1527:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "1552:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:2"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:2"
									},
									"scope": 394,
									"src": "1475:603:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 250,
										"nodeType": "Block",
										"src": "2200:194:2",
										"statements": [
											{
												"assignments": [
													226
												],
												"declarations": [
													{
														"constant": false,
														"id": 226,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 250,
														"src": "2210:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 225,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 237,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 231,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$394",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$394",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 229,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 232,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 233,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 220,
																"src": "2264:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 227,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 218,
																"src": "2233:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																}
															},
															"id": 228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 54,
															"src": "2233:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 234,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 235,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 222,
														"src": "2275:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 239,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "2310:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 242,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 218,
																			"src": "2340:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 243,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2340:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 245,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 220,
																	"src": "2364:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 246,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 226,
																	"src": "2373:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 240,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 238,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "2290:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 249,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:2"
											}
										]
									},
									"id": 251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "2124:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 217,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 216,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2124:6:2"
													},
													"referencedDeclaration": 77,
													"src": "2124:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "2146:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "2171:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:2"
									},
									"scope": 394,
									"src": "2084:310:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "2516:370:2",
										"statements": [
											{
												"id": 297,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:2",
												"statements": [
													{
														"assignments": [
															262
														],
														"declarations": [
															{
																"constant": false,
																"id": 262,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:2",
																"nodeType": "VariableDeclaration",
																"scope": 297,
																"src": "2550:20:2",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 261,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 271,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 267,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$394",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$394",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 265,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 269,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 256,
																	"src": "2604:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 263,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "2573:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 54,
																"src": "2573:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 270,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 273,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 262,
																		"src": "2634:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 274,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "2650:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 272,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 278,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:2"
													},
													{
														"assignments": [
															280
														],
														"declarations": [
															{
																"constant": false,
																"id": 280,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:2",
																"nodeType": "VariableDeclaration",
																"scope": 297,
																"src": "2715:20:2",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 279,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 284,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 281,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 262,
																"src": "2738:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 282,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "2753:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 286,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "2792:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 289,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 254,
																					"src": "2822:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 290,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 64,
																				"src": "2822:13:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 291,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 292,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "2846:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 293,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 280,
																			"src": "2855:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 287,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 285,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 393,
																"src": "2772:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 296,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:2"
													}
												]
											}
										]
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "2440:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 253,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 252,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2440:6:2"
													},
													"referencedDeclaration": 77,
													"src": "2440:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "2462:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "2487:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:2"
									},
									"returnParameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:2"
									},
									"scope": 394,
									"src": "2400:486:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "3107:257:2",
										"statements": [
											{
												"assignments": [
													320
												],
												"declarations": [
													{
														"constant": false,
														"id": 320,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 354,
														"src": "3117:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 319,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 325,
												"initialValue": {
													"arguments": [
														{
															"id": 323,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3152:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 321,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3139:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 322,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "3139:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 329,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3181:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 330,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "3188:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 308,
															"src": "3197:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 332,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 310,
															"src": "3204:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 333,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 312,
															"src": "3214:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 334,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "3217:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 335,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "3220:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 326,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3168:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 328,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 98,
														"src": "3168:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:2"
											},
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 354,
														"src": "3232:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 344,
												"initialValue": {
													"arguments": [
														{
															"id": 342,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "3266:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 340,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3253:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "3253:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 346,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 339,
																"src": "3290:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 347,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 320,
																	"src": "3304:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 345,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 353,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:2"
											}
										]
									},
									"id": 355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2921:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$113",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 301,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 300,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 113,
														"src": "2921:12:2"
													},
													"referencedDeclaration": 113,
													"src": "2921:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$113",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2949:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2972:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "2997:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3020:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 309,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3046:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 311,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3063:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 313,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "3082:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 315,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:2"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:2"
									},
									"scope": 394,
									"src": "2892:472:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 392,
										"nodeType": "Block",
										"src": "3817:636:2",
										"statements": [
											{
												"assignments": [
													365
												],
												"declarations": [
													{
														"constant": false,
														"id": 365,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 392,
														"src": "4166:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 364,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 374,
												"initialValue": {
													"arguments": [
														{
															"id": 371,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 361,
															"src": "4220:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 372,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 368,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 359,
																	"src": "4200:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 366,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 483,
														"src": "4192:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 375,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "4275:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 377,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 391,
												"nodeType": "IfStatement",
												"src": "4271:176:2",
												"trueBody": {
													"id": 390,
													"nodeType": "Block",
													"src": "4298:149:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 382,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 365,
																				"src": "4370:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 384,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 383,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:2",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 385,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 380,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 381,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 379,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 389,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:2",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 393,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "3776:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 358,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 357,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "3776:6:2"
													},
													"referencedDeclaration": 77,
													"src": "3776:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "3790:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 360,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:2"
									},
									"scope": 394,
									"src": "3747:706:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 395,
							"src": "707:3748:2",
							"usedErrors": []
						}
					],
					"src": "115:4341:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							689
						]
					},
					"id": 690,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 396,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 397,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 689,
							"linearizedBaseContracts": [
								689
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "1241:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 405,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "1465:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 408,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 404,
												"id": 410,
												"nodeType": "Return",
												"src": "1458:30:3"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "1195:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "1235:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 402,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:3"
									},
									"scope": 689,
									"src": "1175:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 445,
										"nodeType": "Block",
										"src": "2483:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 423,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		],
																		"id": 422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 421,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 426,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 417,
																"src": "2526:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 428,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 420,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:3"
											},
											{
												"assignments": [
													432,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 432,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 445,
														"src": "2578:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 431,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 439,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 433,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 415,
																"src": "2596:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 434,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 436,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 435,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 417,
																"src": "2618:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 441,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "2647:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 440,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 444,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:3"
											}
										]
									},
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "2431:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 446,
												"src": "2458:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:3"
									},
									"scope": 689,
									"src": "2412:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 462,
										"nodeType": "Block",
										"src": "3555:84:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 457,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "3585:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 458,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 451,
															"src": "3593:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 459,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 456,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															463,
															483
														],
														"referencedDeclaration": 483,
														"src": "3572:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 455,
												"id": 461,
												"nodeType": "Return",
												"src": "3565:67:3"
											}
										]
									},
									"documentation": {
										"id": 447,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3488:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3504:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 450,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:3"
									},
									"returnParameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3541:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 453,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:3"
									},
									"scope": 689,
									"src": "3466:173:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 482,
										"nodeType": "Block",
										"src": "4008:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 476,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 466,
															"src": "4047:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 477,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 468,
															"src": "4055:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 478,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 479,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 470,
															"src": "4064:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 475,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															503,
															553
														],
														"referencedDeclaration": 553,
														"src": "4025:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 474,
												"id": 481,
												"nodeType": "Return",
												"src": "4018:59:3"
											}
										]
									},
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3892:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3916:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 467,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3943:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 469,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:3"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "3994:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 472,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:3"
									},
									"scope": 689,
									"src": "3861:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 502,
										"nodeType": "Block",
										"src": "4589:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 496,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 486,
															"src": "4628:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "4636:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 498,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 490,
															"src": "4642:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 495,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															503,
															553
														],
														"referencedDeclaration": 553,
														"src": "4606:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 494,
												"id": 501,
												"nodeType": "Return",
												"src": "4599:94:3"
											}
										]
									},
									"documentation": {
										"id": 484,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4486:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4510:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 487,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4537:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 489,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:3"
									},
									"returnParameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "4575:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 492,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:3"
									},
									"scope": 689,
									"src": "4446:254:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 552,
										"nodeType": "Block",
										"src": "5127:320:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 520,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$689",
																				"typeString": "library Address"
																			}
																		],
																		"id": 519,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 518,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 522,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 523,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 510,
																"src": "5170:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 517,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 530,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 506,
																	"src": "5247:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 529,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "5236:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 531,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 528,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 534,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:3"
											},
											{
												"assignments": [
													536,
													538
												],
												"declarations": [
													{
														"constant": false,
														"id": 536,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 552,
														"src": "5300:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 535,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 538,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 552,
														"src": "5314:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 537,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 545,
												"initialValue": {
													"arguments": [
														{
															"id": 543,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "5367:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 539,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "5341:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 542,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 541,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 510,
																"src": "5360:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 547,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "5406:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 548,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "5415:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 549,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "5427:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 546,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "5389:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 550,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 516,
												"id": 551,
												"nodeType": "Return",
												"src": "5382:58:3"
											}
										]
									},
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "4988:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5012:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 507,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 509,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5062:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 511,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:3"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 553,
												"src": "5113:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 514,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:3"
									},
									"scope": 689,
									"src": "4948:499:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 569,
										"nodeType": "Block",
										"src": "5724:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 564,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "5760:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 565,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "5768:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 563,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															570,
															605
														],
														"referencedDeclaration": 605,
														"src": "5741:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 562,
												"id": 568,
												"nodeType": "Return",
												"src": "5734:80:3"
											}
										]
									},
									"documentation": {
										"id": 554,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 570,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "5652:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "5668:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 557,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:3"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "5710:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 560,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:3"
									},
									"scope": 689,
									"src": "5624:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "6163:228:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 584,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "6192:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 583,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "6181:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 586,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 588,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:3"
											},
											{
												"assignments": [
													590,
													592
												],
												"declarations": [
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "6252:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 589,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 592,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "6266:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 591,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "6311:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 593,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "6293:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "6350:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "6359:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "6371:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "6333:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 581,
												"id": 603,
												"nodeType": "Return",
												"src": "6326:58:3"
											}
										]
									},
									"documentation": {
										"id": 571,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6042:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6066:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6093:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 576,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:3"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "6149:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 579,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:3"
									},
									"scope": 689,
									"src": "6005:386:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "6667:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "6705:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "6713:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 615,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "6684:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "6677:84:3"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "6600:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "6616:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:3"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "6653:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:3"
									},
									"scope": 689,
									"src": "6570:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "7109:232:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "7138:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 412,
																"src": "7127:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:3"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "7200:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "7214:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "7261:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "7241:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "7300:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "7309:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "7321:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "7283:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "7276:58:3"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6993:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "7017:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "7044:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:3"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "7095:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:3"
									},
									"scope": 689,
									"src": "6954:387:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "7721:582:3",
										"statements": [
											{
												"condition": {
													"id": 669,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 660,
													"src": "7735:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 685,
													"nodeType": "Block",
													"src": "7792:505:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 673,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "7876:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 683,
																"nodeType": "Block",
																"src": "8234:53:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 680,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 664,
																					"src": "8259:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 679,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8252:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 681,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8252:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 682,
																		"nodeType": "ExpressionStatement",
																		"src": "8252:20:3"
																	}
																]
															},
															"id": 684,
															"nodeType": "IfStatement",
															"src": "7872:415:3",
															"trueBody": {
																"id": 678,
																"nodeType": "Block",
																"src": "7899:329:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8069:145:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8091:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8120:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8114:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8114:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8095:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8163:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8167:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8159:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8159:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8180:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8152:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8152:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8152:44:3"
																				}
																			]
																		},
																		"documentation": "@solidity memory-safe-assembly",
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 662,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8120:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 662,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8167:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 677,
																		"nodeType": "InlineAssembly",
																		"src": "8060:154:3"
																	}
																]
															}
														}
													]
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "7731:566:3",
												"trueBody": {
													"id": 672,
													"nodeType": "Block",
													"src": "7744:42:3",
													"statements": [
														{
															"expression": {
																"id": 670,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 662,
																"src": "7765:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 668,
															"id": 671,
															"nodeType": "Return",
															"src": "7758:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:3",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7596:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 659,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7618:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7651:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 663,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:3"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "7707:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 666,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:3"
									},
									"scope": 689,
									"src": "7561:742:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 690,
							"src": "194:8111:3",
							"usedErrors": []
						}
					],
					"src": "101:8205:3"
				},
				"id": 3
			},
			"safeMath/safemath.sol": {
				"ast": {
					"absolutePath": "safeMath/safemath.sol",
					"exportedSymbols": {
						"SafeMath": [
							786
						],
						"math": [
							809
						]
					},
					"id": 810,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 691,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 786,
							"linearizedBaseContracts": [
								786
							],
							"name": "SafeMath",
							"nameLocation": "71:8:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 712,
										"nodeType": "Block",
										"src": "147:54:4",
										"statements": [
											{
												"expression": {
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 700,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "158:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 703,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 701,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "162:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"id": 702,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "166:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "162:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "158:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 705,
												"nodeType": "ExpressionStatement",
												"src": "158:9:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 707,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 698,
																"src": "186:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 708,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "191:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "186:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 706,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "178:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "178:15:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "178:15:4"
											}
										]
									},
									"id": 713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "96:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "105:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "100:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "100:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "113:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "108:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "108:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "99:16:4"
									},
									"returnParameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "144:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 713,
												"src": "139:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 697,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "139:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "138:8:4"
									},
									"scope": 786,
									"src": "87:114:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "267:54:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 723,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 717,
																"src": "286:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 724,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 715,
																"src": "291:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "286:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 722,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "278:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "278:15:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 727,
												"nodeType": "ExpressionStatement",
												"src": "278:15:4"
											},
											{
												"expression": {
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 728,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "304:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 729,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 715,
															"src": "308:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 730,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 717,
															"src": "312:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "308:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "304:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 733,
												"nodeType": "ExpressionStatement",
												"src": "304:9:4"
											}
										]
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "216:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "225:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "220:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 714,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "220:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "233:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "228:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "228:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "219:16:4"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "264:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "259:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "259:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "258:8:4"
									},
									"scope": 786,
									"src": "207:114:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 762,
										"nodeType": "Block",
										"src": "387:68:4",
										"statements": [
											{
												"expression": {
													"id": 748,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 744,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "398:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 747,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 745,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 737,
															"src": "402:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"id": 746,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "406:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "402:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "398:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 749,
												"nodeType": "ExpressionStatement",
												"src": "398:9:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 751,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 737,
																	"src": "426:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "431:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "426:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 758,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 756,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 754,
																		"name": "c",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 742,
																		"src": "436:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 755,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 737,
																		"src": "440:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "436:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 757,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 739,
																	"src": "445:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "436:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "426:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 750,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "418:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "418:29:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 761,
												"nodeType": "ExpressionStatement",
												"src": "418:29:4"
											}
										]
									},
									"id": 763,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "336:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "345:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "340:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 736,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "340:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "353:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "348:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 738,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "348:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "339:16:4"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "384:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 763,
												"src": "379:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "379:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "378:8:4"
									},
									"scope": 786,
									"src": "327:128:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 784,
										"nodeType": "Block",
										"src": "521:53:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 773,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "540:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "544:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "540:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 772,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "532:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "532:14:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 777,
												"nodeType": "ExpressionStatement",
												"src": "532:14:4"
											},
											{
												"expression": {
													"id": 782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 778,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 770,
														"src": "557:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 781,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 779,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "561:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 780,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "565:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "561:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "557:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 783,
												"nodeType": "ExpressionStatement",
												"src": "557:9:4"
											}
										]
									},
									"id": 785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "470:3:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "479:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "474:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 764,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "474:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "487:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "482:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "473:16:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "c",
												"nameLocation": "518:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "513:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 769,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "513:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "512:8:4"
									},
									"scope": 786,
									"src": "461:113:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 810,
							"src": "63:514:4",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "math",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 809,
							"linearizedBaseContracts": [
								809
							],
							"name": "math",
							"nameLocation": "592:4:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 789,
									"libraryName": {
										"id": 787,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 786,
										"src": "610:8:4"
									},
									"nodeType": "UsingForDirective",
									"src": "604:24:4",
									"typeName": {
										"id": 788,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "623:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "697:57:4",
										"statements": [
											{
												"assignments": [
													799
												],
												"declarations": [
													{
														"constant": false,
														"id": 799,
														"mutability": "mutable",
														"name": "c",
														"nameLocation": "713:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "708:6:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 798,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "708:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 804,
												"initialValue": {
													"arguments": [
														{
															"id": 802,
															"name": "_b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "724:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 800,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "717:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 801,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 713,
														"src": "717:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "717:10:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "708:19:4"
											},
											{
												"expression": {
													"id": 805,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 799,
													"src": "745:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 797,
												"id": 806,
												"nodeType": "Return",
												"src": "738:8:4"
											}
										]
									},
									"functionSelector": "803ab3a9",
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "matha",
									"nameLocation": "645:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "656:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "651:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 790,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "651:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "_b",
												"nameLocation": "665:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "660:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 792,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "660:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "650:18:4"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "690:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 795,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "690:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "689:6:4"
									},
									"scope": 809,
									"src": "636:118:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 810,
							"src": "583:174:4",
							"usedErrors": []
						}
					],
					"src": "36:721:4"
				},
				"id": 4
			},
			"写项目基础/写个蓝图计划.sol": {
				"ast": {
					"absolutePath": "写项目基础/写个蓝图计划.sol",
					"exportedSymbols": {
						"Address": [
							689
						],
						"BluePlan": [
							973
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"SafeERC20": [
							394
						],
						"SafeMath": [
							786
						],
						"math": [
							809
						]
					},
					"id": 974,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 811,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "38:23:5"
						},
						{
							"absolutePath": "safeMath/safemath.sol",
							"file": "../safeMath/safemath.sol",
							"id": 812,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 974,
							"sourceUnit": 810,
							"src": "65:34:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 813,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 974,
							"sourceUnit": 395,
							"src": "101:65:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "BluePlan",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 973,
							"linearizedBaseContracts": [
								973
							],
							"name": "BluePlan",
							"nameLocation": "179:8:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 816,
									"libraryName": {
										"id": 814,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 786,
										"src": "203:8:5"
									},
									"nodeType": "UsingForDirective",
									"src": "197:24:5",
									"typeName": {
										"id": 815,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "216:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"global": false,
									"id": 820,
									"libraryName": {
										"id": 817,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 394,
										"src": "233:9:5"
									},
									"nodeType": "UsingForDirective",
									"src": "227:27:5",
									"typeName": {
										"id": 819,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 818,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "247:6:5"
										},
										"referencedDeclaration": 77,
										"src": "247:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "c392f766",
									"id": 822,
									"mutability": "mutable",
									"name": "interest",
									"nameLocation": "301:8:5",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "289:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 821,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "289:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f7c618c1",
									"id": 824,
									"mutability": "mutable",
									"name": "rewardToken",
									"nameLocation": "331:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "316:26:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 823,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "316:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 826,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "364:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "349:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 825,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "349:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "16c3f92c",
									"id": 829,
									"mutability": "mutable",
									"name": "rewarduser",
									"nameLocation": "393:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "376:27:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 827,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "376:7:5",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 828,
										"nodeType": "ArrayTypeName",
										"src": "376:9:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "BluePlan.User",
									"id": 836,
									"members": [
										{
											"constant": false,
											"id": 831,
											"mutability": "mutable",
											"name": "userReward",
											"nameLocation": "443:10:5",
											"nodeType": "VariableDeclaration",
											"scope": 836,
											"src": "438:15:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 830,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "438:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 833,
											"mutability": "mutable",
											"name": "userState",
											"nameLocation": "469:9:5",
											"nodeType": "VariableDeclaration",
											"scope": 836,
											"src": "464:14:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 832,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "464:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 835,
											"mutability": "mutable",
											"name": "userRewardStartTime",
											"nameLocation": "494:19:5",
											"nodeType": "VariableDeclaration",
											"scope": 836,
											"src": "489:24:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 834,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "489:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "User",
									"nameLocation": "423:4:5",
									"nodeType": "StructDefinition",
									"scope": 973,
									"src": "416:105:5",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c93ecff",
									"id": 841,
									"mutability": "mutable",
									"name": "User_Map",
									"nameLocation": "561:8:5",
									"nodeType": "VariableDeclaration",
									"scope": 973,
									"src": "529:40:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
										"typeString": "mapping(address => struct BluePlan.User)"
									},
									"typeName": {
										"id": 840,
										"keyType": {
											"id": 837,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "537:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "529:24:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
											"typeString": "mapping(address => struct BluePlan.User)"
										},
										"valueType": {
											"id": 839,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 838,
												"name": "User",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 836,
												"src": "548:4:5"
											},
											"referencedDeclaration": 836,
											"src": "548:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_User_$836_storage_ptr",
												"typeString": "struct BluePlan.User"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 861,
										"nodeType": "Block",
										"src": "629:105:5",
										"statements": [
											{
												"expression": {
													"id": 850,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 848,
														"name": "interest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 822,
														"src": "640:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 849,
														"name": "_interest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 843,
														"src": "651:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "640:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 851,
												"nodeType": "ExpressionStatement",
												"src": "640:20:5"
											},
											{
												"expression": {
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 852,
														"name": "rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 824,
														"src": "671:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 853,
														"name": "_rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 845,
														"src": "685:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "671:26:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 855,
												"nodeType": "ExpressionStatement",
												"src": "671:26:5"
											},
											{
												"expression": {
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 856,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 826,
														"src": "708:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 857,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "716:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 858,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "716:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "708:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 860,
												"nodeType": "ExpressionStatement",
												"src": "708:18:5"
											}
										]
									},
									"id": 862,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "_interest",
												"nameLocation": "596:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "591:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "591:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "_rewardToken",
												"nameLocation": "615:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "607:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "607:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "590:38:5"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "629:0:5"
									},
									"scope": 973,
									"src": "578:156:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 908,
										"nodeType": "Block",
										"src": "813:261:5",
										"statements": [
											{
												"expression": {
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 870,
														"name": "rewarduser",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 829,
														"src": "824:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 871,
														"name": "_rewarduser",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 865,
														"src": "837:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "824:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"id": 873,
												"nodeType": "ExpressionStatement",
												"src": "824:24:5"
											},
											{
												"body": {
													"id": 903,
													"nodeType": "Block",
													"src": "899:145:5",
													"statements": [
														{
															"expression": {
																"id": 891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 884,
																			"name": "User_Map",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 841,
																			"src": "914:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
																				"typeString": "mapping(address => struct BluePlan.User storage ref)"
																			}
																		},
																		"id": 888,
																		"indexExpression": {
																			"baseExpression": {
																				"id": 885,
																				"name": "_rewarduser",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 865,
																				"src": "923:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																					"typeString": "address[] memory"
																				}
																			},
																			"id": 887,
																			"indexExpression": {
																				"id": 886,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 875,
																				"src": "935:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "923:14:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "914:24:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_User_$836_storage",
																			"typeString": "struct BluePlan.User storage ref"
																		}
																	},
																	"id": 889,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "userState",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 833,
																	"src": "914:34:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "951:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "914:41:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 892,
															"nodeType": "ExpressionStatement",
															"src": "914:41:5"
														},
														{
															"expression": {
																"id": 901,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 893,
																			"name": "User_Map",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 841,
																			"src": "970:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
																				"typeString": "mapping(address => struct BluePlan.User storage ref)"
																			}
																		},
																		"id": 897,
																		"indexExpression": {
																			"baseExpression": {
																				"id": 894,
																				"name": "_rewarduser",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 865,
																				"src": "979:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																					"typeString": "address[] memory"
																				}
																			},
																			"id": 896,
																			"indexExpression": {
																				"id": 895,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 875,
																				"src": "991:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "979:14:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "970:24:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_User_$836_storage",
																			"typeString": "struct BluePlan.User storage ref"
																		}
																	},
																	"id": 898,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "userRewardStartTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 835,
																	"src": "970:44:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 899,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "1017:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 900,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "1017:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "970:62:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 902,
															"nodeType": "ExpressionStatement",
															"src": "970:62:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 877,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "872:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 878,
															"name": "rewarduser",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 829,
															"src": "876:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "876:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "872:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 904,
												"initializationExpression": {
													"assignments": [
														875
													],
													"declarations": [
														{
															"constant": false,
															"id": 875,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "869:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 904,
															"src": "864:6:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 874,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "864:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 876,
													"nodeType": "VariableDeclarationStatement",
													"src": "864:6:5"
												},
												"loopExpression": {
													"expression": {
														"id": 882,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "895:3:5",
														"subExpression": {
															"id": 881,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "895:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 883,
													"nodeType": "ExpressionStatement",
													"src": "895:3:5"
												},
												"nodeType": "ForStatement",
												"src": "859:185:5"
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1061:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"id": 906,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1060:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 869,
												"id": 907,
												"nodeType": "Return",
												"src": "1054:12:5"
											}
										]
									},
									"functionSelector": "f41185b8",
									"id": 909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "SetReward",
									"nameLocation": "751:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "_rewarduser",
												"nameLocation": "778:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "761:28:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 863,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "761:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 864,
													"nodeType": "ArrayTypeName",
													"src": "761:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "760:30:5"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "807:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 867,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "807:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "806:6:5"
									},
									"scope": 973,
									"src": "742:332:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 917,
										"nodeType": "Block",
										"src": "1146:36:5",
										"statements": [
											{
												"expression": {
													"id": 915,
													"name": "rewarduser",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 829,
													"src": "1164:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"functionReturnParameters": 914,
												"id": 916,
												"nodeType": "Return",
												"src": "1157:17:5"
											}
										]
									},
									"functionSelector": "5a42b7a0",
									"id": 918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "GetRewardUser",
									"nameLocation": "1091:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1104:2:5"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "1128:16:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 911,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1128:7:5",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 912,
													"nodeType": "ArrayTypeName",
													"src": "1128:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1127:18:5"
									},
									"scope": 973,
									"src": "1082:100:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 949,
										"nodeType": "Block",
										"src": "1238:202:5",
										"statements": [
											{
												"assignments": [
													924
												],
												"declarations": [
													{
														"constant": false,
														"id": 924,
														"mutability": "mutable",
														"name": "_userReward",
														"nameLocation": "1254:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 949,
														"src": "1249:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 923,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1249:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 938,
												"initialValue": {
													"arguments": [
														{
															"id": 936,
															"name": "interest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 822,
															"src": "1336:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"components": [
																{
																	"arguments": [
																		{
																			"expression": {
																				"baseExpression": {
																					"id": 928,
																					"name": "User_Map",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 841,
																					"src": "1289:8:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
																						"typeString": "mapping(address => struct BluePlan.User storage ref)"
																					}
																				},
																				"id": 931,
																				"indexExpression": {
																					"expression": {
																						"id": 929,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "1298:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 930,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "1298:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "1289:20:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_User_$836_storage",
																					"typeString": "struct BluePlan.User storage ref"
																				}
																			},
																			"id": 932,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "userRewardStartTime",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 835,
																			"src": "1289:40:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"expression": {
																				"id": 925,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "1269:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 926,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "1269:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 927,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 735,
																		"src": "1269:19:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1269:61:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 934,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1268:63:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 935,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 763,
														"src": "1268:67:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1268:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1249:96:5"
											},
											{
												"expression": {
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 939,
																"name": "User_Map",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 841,
																"src": "1356:8:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
																	"typeString": "mapping(address => struct BluePlan.User storage ref)"
																}
															},
															"id": 942,
															"indexExpression": {
																"expression": {
																	"id": 940,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1365:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1365:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1356:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_User_$836_storage",
																"typeString": "struct BluePlan.User storage ref"
															}
														},
														"id": 943,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "userReward",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 831,
														"src": "1356:31:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 944,
														"name": "_userReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 924,
														"src": "1390:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1356:45:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 946,
												"nodeType": "ExpressionStatement",
												"src": "1356:45:5"
											},
											{
												"expression": {
													"id": 947,
													"name": "_userReward",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 924,
													"src": "1419:11:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 922,
												"id": 948,
												"nodeType": "Return",
												"src": "1412:18:5"
											}
										]
									},
									"functionSelector": "3b7d10c1",
									"id": 950,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "SetUserReward",
									"nameLocation": "1199:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1212:2:5"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 950,
												"src": "1232:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 920,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1232:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1231:6:5"
									},
									"scope": 973,
									"src": "1190:250:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 971,
										"nodeType": "Block",
										"src": "1499:120:5",
										"statements": [
											{
												"assignments": [
													956
												],
												"declarations": [
													{
														"constant": false,
														"id": 956,
														"mutability": "mutable",
														"name": "_getuserReward",
														"nameLocation": "1515:14:5",
														"nodeType": "VariableDeclaration",
														"scope": 971,
														"src": "1510:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 955,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1510:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 970,
												"initialValue": {
													"arguments": [
														{
															"id": 968,
															"name": "interest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 822,
															"src": "1600:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"components": [
																{
																	"arguments": [
																		{
																			"expression": {
																				"baseExpression": {
																					"id": 960,
																					"name": "User_Map",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 841,
																					"src": "1553:8:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$836_storage_$",
																						"typeString": "mapping(address => struct BluePlan.User storage ref)"
																					}
																				},
																				"id": 963,
																				"indexExpression": {
																					"expression": {
																						"id": 961,
																						"name": "msg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967281,
																						"src": "1562:3:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_message",
																							"typeString": "msg"
																						}
																					},
																					"id": 962,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "sender",
																					"nodeType": "MemberAccess",
																					"src": "1562:10:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "1553:20:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_User_$836_storage",
																					"typeString": "struct BluePlan.User storage ref"
																				}
																			},
																			"id": 964,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "userRewardStartTime",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 835,
																			"src": "1553:40:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"expression": {
																				"id": 957,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "1533:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 958,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "1533:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 959,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sub",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 735,
																		"src": "1533:19:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 965,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1533:61:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 966,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1532:63:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 967,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 763,
														"src": "1532:67:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1532:77:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1510:99:5"
											}
										]
									},
									"functionSelector": "d793d83e",
									"id": 972,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUserReward",
									"nameLocation": "1457:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1470:2:5"
									},
									"returnParameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "1493:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 952,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1493:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1492:6:5"
									},
									"scope": 973,
									"src": "1448:171:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 974,
							"src": "170:1456:5",
							"usedErrors": []
						}
					],
					"src": "38:1657:5"
				},
				"id": 5
			}
		}
	}
}